<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>el-tree-v2搜索数据不展开问题</title>
      <link href="/star/2025/0526665561.html"/>
      <url>/star/2025/0526665561.html</url>
      
        <content type="html"><![CDATA[<h2 id="el-tree-v2-搜索数据不展开问题"><a href="#el-tree-v2-搜索数据不展开问题" class="headerlink" title="el-tree-v2 搜索数据不展开问题"></a>el-tree-v2 搜索数据不展开问题</h2><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;!-- 结构 --&gt;&lt;el-input v-model&#x3D;&quot;treeQuery&quot; placeholder&#x3D;&quot;请输入&quot; clearable @input&#x3D;&quot;onQueryChanged&quot; &#x2F;&gt;&lt;div class&#x3D;&quot;left-tree&quot;&gt;     &lt;el-tree-v2 v-if&#x3D;&quot;data.length&quot;                 ref&#x3D;&quot;treeRef&quot;                 :data&#x3D;&quot;data&quot;                 :props&#x3D;&quot;props&quot;                 :height&#x3D;&quot;430&quot;                 :filter-method&#x3D;&quot;filterMethod&quot;                 :default-expanded-keys&#x3D;&quot;expandedKeys&quot;                 :expand-on-click-node&#x3D;&quot;false&quot;&gt;            &lt;template #default&#x3D;&quot;&#123; node, data &#125;&quot;&gt;              &lt;div class&#x3D;&quot;left-slot&quot;&gt;                &lt;div&gt;&#123;&#123; node.label &#125;&#125; &lt;&#x2F;div&gt;                &lt;div v-show&#x3D;&quot;data.selectType &#x3D;&#x3D; 1&quot;&gt;                  &lt;el-link type&#x3D;&quot;primary&quot; @click.stop&#x3D;&quot;moveIn(node, data)&quot;&gt;移入&lt;&#x2F;el-link&gt;                &lt;&#x2F;div&gt;              &lt;&#x2F;div&gt;            &lt;&#x2F;template&gt;     &lt;&#x2F;el-tree-v2&gt;     &lt;el-empty v-else description&#x3D;&quot;暂无数据&quot; &#x2F;&gt;&lt;&#x2F;div&gt;</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 逻辑</span><span class="token keyword">const</span> originalData <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//存储完整的数据</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//存储展示的数据</span><span class="token keyword">const</span> treeRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// tree的ref</span><span class="token comment">// 计算需要展开的数据</span><span class="token keyword">const</span> expandedKeys <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token literal-property property">keys</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> <span class="token function-variable function">getKeys</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">nodes</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    nodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> nodeKey <span class="token operator">=</span> node<span class="token punctuation">[</span>props<span class="token punctuation">.</span>value<span class="token punctuation">]</span> <span class="token comment">// 匹配唯一值</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>treeQuery<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>          node<span class="token punctuation">.</span>isSearchMatch <span class="token operator">||</span>          <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span>            node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">child</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> child<span class="token punctuation">.</span>isSearchMatch<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nodeKey<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nodeKey<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">getKeys</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">getKeys</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token keyword">return</span> keys<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 搜索，进行数据递归匹配</span><span class="token keyword">const</span> <span class="token function-variable function">onQueryChanged</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">query</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    data<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>originalData<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 递归过滤数据</span>  <span class="token keyword">const</span> filterData <span class="token operator">=</span> <span class="token punctuation">(</span>nodes<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> nodes      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> isMatch <span class="token operator">=</span> <span class="token function">filterMethod</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> node<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> filteredChildren <span class="token operator">=</span> <span class="token function">filterData</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span>          node<span class="token punctuation">.</span>children <span class="token operator">=</span> filteredChildren          <span class="token comment">// 如果当前节点匹配或者有匹配的子节点，则保留该节点</span>          <span class="token keyword">return</span> filteredChildren<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> isMatch        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> isMatch      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token operator">...</span>node<span class="token punctuation">,</span>        <span class="token comment">// 添加一个标记，表示这个节点是搜索结果中的匹配节点</span>        <span class="token literal-property property">isSearchMatch</span><span class="token operator">:</span> <span class="token function">filterMethod</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 是否匹配</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 对数据进行过滤</span>  <span class="token keyword">const</span> <span class="token literal-property property">filteredData</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token function">filterData</span><span class="token punctuation">(</span>    <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>originalData<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  data<span class="token punctuation">.</span>value <span class="token operator">=</span> filteredData<span class="token punctuation">&#125;</span><span class="token comment">// 获取tree数据</span><span class="token keyword">const</span> <span class="token function-variable function">treeList</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token literal-property property">res</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">treeListApi</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> treeData <span class="token operator">=</span> res<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      originalData<span class="token punctuation">.</span>value <span class="token operator">=</span> treeData <span class="token comment">// 存储完整数据</span>      data<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>treeData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 存储展示的数据</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'获取树数据失败:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// tree过滤</span><span class="token keyword">const</span> <span class="token function-variable function">filterMethod</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">query</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">node</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>query<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token keyword">return</span> node<span class="token punctuation">.</span>label<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token comment">// 数据匹配</span><span class="token punctuation">&#125;</span><span class="token comment">// 监听搜索框数据，等el-tree-v2初始化完成后进行数据展开</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> treeQuery<span class="token punctuation">.</span>value<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>treeRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> currentExpandedKeys <span class="token operator">=</span> expandedKeys<span class="token punctuation">.</span>value        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          treeRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">setExpandedKeys</span><span class="token punctuation">(</span>currentExpandedKeys<span class="token punctuation">)</span> <span class="token comment">// 手动展开数据</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'展开失败，树组件可能未完全初始化'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生产环境接口报错“Failed to load response data No data found for resource with given identifier”</title>
      <link href="/star/2025/052438659.html"/>
      <url>/star/2025/052438659.html</url>
      
        <content type="html"><![CDATA[<h2 id="生产环境接口报错“Failed-to-load-response-data-No-data-found-for-resource-with-given-identifier”"><a href="#生产环境接口报错“Failed-to-load-response-data-No-data-found-for-resource-with-given-identifier”" class="headerlink" title="生产环境接口报错“Failed to load response data No data found for resource with given identifier”"></a>生产环境接口报错“Failed to load response data No data found for resource with given identifier”</h2><p>首先排查是的跨域，接口请求超时，请求地址是否正确。</p><p>场景：开发环境接口正常，生产环境报错，且偶现报错</p><p>原因：数据量过大，导致报错。让后端在数据库拿到数据后，截取 50 条数据返回到前端。打包部署后在，在生产环境测试接口是否仍然出现偶现的报错，如果没出现，基本上就确定了是数据量过大造成的</p><p>解决：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">location <span class="token operator">/</span>api<span class="token operator">/</span> <span class="token punctuation">&#123;</span>    # 缓冲区配置（关键修改）    # 读取响应头的缓冲区大小<span class="token punctuation">,</span>proxy_buffer_size 不能小于proxy_buffers    proxy_buffer_size        128k<span class="token punctuation">;</span>  # 不能小于下方的128k    proxy_buffers            <span class="token number">256</span> 128k<span class="token punctuation">;</span>  # 总缓冲容量 <span class="token operator">=</span> <span class="token number">256</span> × 128KB <span class="token operator">=</span> 32MB    proxy_busy_buffers_size  256k<span class="token punctuation">;</span>  # 必须 ≥ <span class="token function">max</span><span class="token punctuation">(</span>proxy_buffer_size<span class="token punctuation">,</span> proxy_buffers单缓冲区大小<span class="token punctuation">)</span>    proxy_temp_file_write_size 256k<span class="token punctuation">;</span>  # 临时文件写入大小（与busy_buffers匹配）    # 其他配置保持不变    <span class="token operator">...</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-tree插槽，鼠标移入移出展开与关闭子节点</title>
      <link href="/star/2025/052066556.html"/>
      <url>/star/2025/052066556.html</url>
      
        <content type="html"><![CDATA[<h3 id="el-tree-插槽，鼠标移入移出展开与关闭子节点"><a href="#el-tree-插槽，鼠标移入移出展开与关闭子节点" class="headerlink" title="el-tree 插槽，鼠标移入移出展开与关闭子节点"></a>el-tree 插槽，鼠标移入移出展开与关闭子节点</h3><pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F; 结构&lt;el-tree :data&#x3D;&quot;treeData&quot; node-key&#x3D;&quot;id&quot; :props&#x3D;&quot;defaultProps&quot;&gt;     &lt;template #default&#x3D;&quot;&#123; node, data &#125;&quot;&gt;         &lt;span class&#x3D;&quot;custom-tree-node&quot; @mouseleave&#x3D;&quot;handleNodeLeave(data, node)&quot;                    @mouseover&#x3D;&quot;handleNodeMenu(data, node)&quot; :data-node-id&#x3D;&quot;node.id&quot;&gt;                 &#123;&#123; node.label &#125;&#125;         &lt;&#x2F;span&gt;      &lt;&#x2F;template&gt;&lt;&#x2F;el-tree&gt;</code></pre><p><code>@mouseleave=&quot;mouseleave(data, node)&quot;</code> 移入事件</p><p><code>@mouseover=&quot;handleNodeMenu(data, node)&quot;</code> 移出事件</p><p><code>:data-node-id=&quot;node.id&quot;</code> 自定义属性</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 逻辑</span><span class="token comment">// 移入</span><span class="token keyword">const</span> <span class="token function-variable function">handleNodeMenu</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">data</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">node</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>closeTimer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>closeTimer<span class="token punctuation">)</span>    node<span class="token punctuation">.</span>closeTimer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node<span class="token punctuation">.</span>expanded<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 开启</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 移出</span><span class="token keyword">const</span> <span class="token function-variable function">mouseleave</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">data</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">node</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  node<span class="token punctuation">.</span>closeTimer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkHoverState</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>expanded<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node<span class="token punctuation">.</span><span class="token function">collapse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 关闭</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 递归查询</span><span class="token keyword">const</span> <span class="token function-variable function">checkHoverState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">checkChildren</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">childNodes</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> childNodes<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">child</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> childEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[data-node-id="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>child<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token keyword">return</span> childEl<span class="token operator">?.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">':hover'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">checkChildren</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>childNodes <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">checkChildren</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>childNodes <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/**  const currentNodeEl = document.querySelector(`[data-node-id="$&#123;node.id&#125;"]`)  if (currentNodeEl?.matches(':hover')) return true**/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElemenetPlus 的 Form 组件的二次封装</title>
      <link href="/star/2025/0514665123814.html"/>
      <url>/star/2025/0514665123814.html</url>
      
        <content type="html"><![CDATA[<h1 id="ElemenetPlus-的-Form-组件的二次封装"><a href="#ElemenetPlus-的-Form-组件的二次封装" class="headerlink" title="ElemenetPlus 的 Form 组件的二次封装"></a>ElemenetPlus 的 Form 组件的二次封装</h1><p>介绍：二次封装 Element 表单</p><p>插件地址：<a href="https://www.npmjs.com/package/base-form-v3">https://www.npmjs.com/package/base-form-v3</a></p><p>Api 介绍：</p><table><thead><tr><th>Api 名称</th><th>说明</th></tr></thead><tbody><tr><td>v-model</td><td>绑定的表单数据</td></tr><tr><td>formItemArr</td><td>表单数组</td></tr><tr><td>rules</td><td>规则</td></tr><tr><td>ref</td><td>获取内部 el-form 的 ref</td></tr><tr><td>isSpan</td><td>是否开启 span，默认为 true</td></tr><tr><td>isItem</td><td>select 的 options 中，是单个数据，没有 label 与 value，每一项的值就是 label 与 value，将他开启即可，默认值为 flase</td></tr><tr><td>isSpacing</td><td>是否开启缩小间距，默认为 true,true 为缩小间距</td></tr></tbody></table><h2 id="1-formItemArr"><a href="#1-formItemArr" class="headerlink" title="1.formItemArr"></a>1.formItemArr</h2><p>传入的表单数组，一个对象即对应一个表单</p><p>参数介绍：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>formType</td><td>表单类型</td></tr><tr><td>name</td><td>绑定的参数名</td></tr><tr><td>span</td><td>占几份，共 24 份，默认值 6 份</td></tr><tr><td>on</td><td>事件绑定</td></tr><tr><td>slots</td><td>插槽绑定</td></tr><tr><td>computed</td><td>计算几个表单的数据</td></tr><tr><td>visible</td><td>是否展示某个表单，用于动态表单</td></tr><tr><td>isReadOnly</td><td>动态只读</td></tr><tr><td>isDisabled</td><td>动态禁用</td></tr></tbody></table><h3 id="1-1-formType"><a href="#1-1-formType" class="headerlink" title="1.1 formType"></a>1.1 formType</h3><p><code>当内部有使用二次封装的组件时，类型定义为modelType</code><br>多选类型：<code> checkbox,checkboxGroup,checkboxButton</code> 默认：checkbox<br>单选类型：<code> radio,radioGroup,radioButton</code> 默认：radio<br>下拉：<code>select,selectGroup</code> 默认：select</p><p>customLabel,customValue,为二次封装组件自定义的数据，同样，label,value 为原本的展示数据与展示数据</p><p>如若需要定义 el-option-group 的 label,请使用 customGroupLabel</p><p>表单类型:</p><table><thead><tr><th>名称</th><th>对应</th><th>是否二次封装</th></tr></thead><tbody><tr><td>autocomplete</td><td>el-autocomplete</td><td></td></tr><tr><td>cascader</td><td>el-cascader</td><td></td></tr><tr><td>checkbox</td><td>el-checkbox</td><td>是</td></tr><tr><td>datePicker</td><td>el-date-picker</td><td></td></tr><tr><td>input</td><td>el-input</td><td></td></tr><tr><td>inputNumber</td><td>el-input-number</td><td></td></tr><tr><td>inputTag</td><td>el-input-tag</td><td></td></tr><tr><td>mention</td><td>el-mention</td><td></td></tr><tr><td>radio</td><td>el-radio</td><td>是</td></tr><tr><td>rate</td><td>el-rate</td><td></td></tr><tr><td>select</td><td>el-select</td><td>是</td></tr><tr><td>selectV2</td><td>el-select-v2</td><td>是</td></tr><tr><td>slider</td><td>el-slider</td><td></td></tr><tr><td>switch</td><td>el-switch</td><td></td></tr><tr><td>timePicker</td><td>el-time-picker</td><td></td></tr><tr><td>timeSelect</td><td>el-time-select</td><td></td></tr><tr><td>transfer</td><td>el-transfer</td><td></td></tr><tr><td>treeSelect</td><td>el-tree-select</td><td></td></tr></tbody></table><p><code>input为默认</code></p><p><strong>注意：</strong></p><ol><li>默认值为<code>input</code></li><li>每个类型都是去除<code>el</code>后的单词，单个单词为小写，多个单词为小驼峰</li><li><code>checkBox</code>，<code>radio</code>，<code>select</code>，<code>selectV2</code>这 4 个由于有多种组合，因此进行了二次封装，二次封装的组件不需要在<code>formItemArr</code>中定义<code>slot</code></li><li>进行二次封装的组件与未进行封装的使用插槽的方式不一致，后续会讲</li><li>由于上传类型很多因此并未加入该组件，如需使用请使用插槽</li></ol><h3 id="1-2-name"><a href="#1-2-name" class="headerlink" title="1.2 name"></a>1.2 name</h3><p>表单单项的绑定值，同时会决定表单插槽的绑定</p><h3 id="1-3-span"><a href="#1-3-span" class="headerlink" title="1.3 span"></a>1.3 span</h3><p>默认值 6 份，共 24 份，</p><h3 id="1-4-on"><a href="#1-4-on" class="headerlink" title="1.4 on"></a>1.4 on</h3><p>事件绑定，只能绑定该表单的对应的事件</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">input</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">val</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'输入内容'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">blur</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失焦'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="1-5-slots"><a href="#1-5-slots" class="headerlink" title="1.5 slots"></a>1.5 slots</h3><p>插槽绑定，分为 4 种情况</p><p><strong>第一种：</strong><code>el-form</code>的插槽，直接使用<code>template</code>绑上<code>default</code>即可</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template #default&gt;&lt;&#x2F;template&gt;</code></pre><p><strong>第二种：</strong><code>el-form</code>-item 的插槽，开启需要传参，如果是<code>default</code>，每项定义，<code>defaultSlot</code>为 true，<code>soltName为你该项的唯一值</code>,依次类推，<code>label</code>，就是<code>labelSlot</code>为 true，<code>soltName为你该项的唯一值</code>,依次类推</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template #soltName值+插槽名&#x3D;&quot;&#123;参数与el-form-item插槽参数一致&#125;&quot;&gt;&lt;&#x2F;template&gt;</code></pre><p><strong>第三种：</strong>进行二次封装的组件插槽，开启同样需要传参，与第二种差不多，如果是<code>default</code>，每项定义，<code>defaultSlot</code>为 true，依次类推，<code>soltName</code>不用传，他绑定的是<code>name</code>，由于他可能存在几层，因此每层的返参不一样</p><pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F; 第一层&lt;template #name值+插槽名&#x3D;&quot;&#123; info &#125;&quot;&gt;&lt;&#x2F;template&gt;&#x2F;&#x2F; info:该项数据 &#x2F;&#x2F; 非第一层&lt;template #name值+插槽名&#x3D;&quot;&#123; info, index &#125;&quot;&gt;&lt;&#x2F;template&gt;&#x2F;&#x2F; info:该项数据 index:该项索引</code></pre><p><strong>第四种：</strong>未进行二次封装的，直接在该项中去定义</p><pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F; 封装的组件&lt;template&gt;  &lt;div&gt;    &lt;span style&#x3D;&quot;color: red&quot;&gt;&#123;&#123; node.label &#125;&#125;&lt;&#x2F;span&gt;    &lt;el-button size&#x3D;&quot;mini&quot; @click&#x3D;&quot;handleClick&quot;&gt;点我&lt;&#x2F;el-button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;const props &#x3D; defineProps([&#39;node&#39;, &#39;data&#39;])const handleClick &#x3D; () &#x3D;&gt; &#123;  alert(&#96;你点击了 $&#123;props.node.label&#125;&#96;)&#125;&lt;&#x2F;script&gt;</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">slots</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">slotProps</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'封装的组件名'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>slotProps <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token comment">// 参数与该表单的插槽传参一致，可定义多个插槽</span><span class="token punctuation">&#125;</span></code></pre><p>或</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">slots</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">slotProps</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>span的属性<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 展示内容<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 参数与该表单的插槽传参一致，可定义多个插槽</span><span class="token punctuation">&#125;</span></code></pre><h3 id="1-6-computed"><a href="#1-6-computed" class="headerlink" title="1.6 computed"></a>1.6 computed</h3><p>计算，当有一个表单的值是根据其余表单的值计算出来的时候使用 computed</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 例如：计算其余两个表单的乘</span><span class="token function-variable function">computed</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">formData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Number</span><span class="token punctuation">(</span>formData<span class="token punctuation">.</span>price<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">Number</span><span class="token punctuation">(</span>formData<span class="token punctuation">.</span>count<span class="token punctuation">)</span></code></pre><h3 id="1-7-visible"><a href="#1-7-visible" class="headerlink" title="1.7 visible"></a>1.7 visible</h3><p>动态表单，表单是根据某个或多个表单的值来决定是否展示</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">visible</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">formData</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> formData<span class="token punctuation">.</span>age <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> formData<span class="token punctuation">.</span>sex <span class="token operator">==</span> <span class="token number">0</span></code></pre><h2 id="2-rules"><a href="#2-rules" class="headerlink" title="2.rules"></a>2.rules</h2><p>与 el-form 定义规则一致</p><h2 id="3-ref"><a href="#3-ref" class="headerlink" title="3.ref"></a>3.ref</h2><p>操作组件 ref，内部会给你暴露出一个 formRef，获取使用即可，与 el-form 一致</p><p>注意：未展示的属性，方法，插槽名称与 element-plus 的表单组件一致，如果使用请写入到对应的对象中</p><h2 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 全局</span><span class="token keyword">import</span> ElementPlus <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">import</span> <span class="token string">'element-plus/dist/index.css'</span><span class="token keyword">import</span> BaseFormV3 <span class="token keyword">from</span> <span class="token string">'base-form-v3'</span><span class="token keyword">import</span> <span class="token string">'base-form-v3/dist/style.css'</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>BaseFormV3<span class="token punctuation">)</span><span class="token comment">// 按需</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> BaseFormV3<span class="token punctuation">,</span> FormComponents <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'base-form-v3'</span></code></pre><p>禁用： isDisabled: (formData) &#x3D;&gt; !!formData.id<br>只读： isReadOnly: (formData) &#x3D;&gt; 逻辑</p><h2 id="5-报错"><a href="#5-报错" class="headerlink" title="5.报错"></a>5.报错</h2><p>报错：<code>Invalid prop: type check failed for prop &quot;value&quot;. Expected String | Number | Boolean | Object, got Undefined</code></p><p>解决：给表单配置写成响应式的，ref 或 reactive</p><p>报错：<code>this.dep.track is not a function</code></p><p>解决：formData: form.value，传入的数据别搞错了</p>]]></content>
      
      
      <categories>
          
          <category> 组件封装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件封装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElemenetPlus 的 Table 组件的二次封装</title>
      <link href="/star/2025/05066651238.html"/>
      <url>/star/2025/05066651238.html</url>
      
        <content type="html"><![CDATA[<h2 id="ElemenetPlus-的-Table-组件的二次封装"><a href="#ElemenetPlus-的-Table-组件的二次封装" class="headerlink" title="ElemenetPlus 的 Table 组件的二次封装"></a>ElemenetPlus 的 Table 组件的二次封装</h2><p>本插件是基于 ElemenetPlus+Vue3 二次封装的 table 组件</p><p>插件地址：<a href="https://www.npmjs.com/package/base-table-v3">https://www.npmjs.com/package/base-table-v3</a></p><p><strong>API 介绍：</strong></p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>column</td><td>表格项</td></tr><tr><td>ref</td><td>拿去内部 el-table 的 ref</td></tr><tr><td>defaultSlot</td><td>el-table 的 default 插槽开启，由于与子集插槽名冲突，需开启才能使用，其余的均可直接使用</td></tr></tbody></table><p><code>注意：其余参数，事件，插槽与el-table一致，直接传入即可</code></p><h3 id="1-column"><a href="#1-column" class="headerlink" title="1. column"></a>1. column</h3><p><strong>Api 介绍：</strong></p><table><thead><tr><th>名称</th><th>说明</th><th>使用</th></tr></thead><tbody><tr><td>type</td><td>类型 与 el-table 的 type 参数一致</td><td></td></tr><tr><td>align</td><td>默认：’center’</td><td></td></tr><tr><td>prop</td><td>1.配置 el-table-item 的 prop， 2.用于区分插槽</td><td></td></tr><tr><td>headerSlot</td><td>开启头部插槽，默认：false</td><td>插槽名为 prop-default，参数与 el-table-item 一致，以此类推</td></tr><tr><td>defaultSlot</td><td>开启默认插槽，默认：false</td><td>查看上方</td></tr><tr><td>filterIconSlot</td><td>开启过滤图标插槽，默认：false</td><td>查看上上方</td></tr></tbody></table><p><code>注意：其余参数，事件，插槽与el-table-item一致，直接传入即可</code></p><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> ElementPlus <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">import</span> <span class="token string">'element-plus/dist/index.css'</span><span class="token keyword">import</span> BaseTableV3 <span class="token keyword">from</span> <span class="token string">'base-table-v3'</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>BaseTableV3<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 组件封装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件封装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-node-registry API 文档</title>
      <link href="/star/2025/042966512336.html"/>
      <url>/star/2025/042966512336.html</url>
      
        <content type="html"><![CDATA[<h1 id="logicflow-vue-node-registry-API-文档"><a href="#logicflow-vue-node-registry-API-文档" class="headerlink" title="@logicflow&#x2F;vue-node-registry API 文档"></a>@logicflow&#x2F;vue-node-registry API 文档</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>@logicflow&#x2F;vue-node-registry 是一个用于在 LogicFlow 中渲染 Vue 组件的工具包。它提供了一套完整的 API 来注册和管理自定义 Vue 节点。</p><h2 id="API-列表"><a href="#API-列表" class="headerlink" title="API 列表"></a>API 列表</h2><h3 id="1-register"><a href="#1-register" class="headerlink" title="1. register"></a>1. register</h3><p><strong>功能</strong>: 注册自定义 Vue 节点到 LogicFlow 实例中</p><p><strong>使用方法</strong>:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> register <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@logicflow/vue-node-registry'</span><span class="token function">register</span><span class="token punctuation">(</span>  <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> <span class="token string">'custom-vue-node'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> YourVueComponent<span class="token punctuation">,</span>    model<span class="token operator">:</span> YourCustomNodeModel<span class="token punctuation">,</span> <span class="token comment">// 可选</span>    view<span class="token operator">:</span> CustomNodeView<span class="token punctuation">,</span> <span class="token comment">// 可选</span>    effect<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'properties'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 可选</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  lf<span class="token punctuation">)</span></code></pre><p><strong>参数说明</strong>:</p><ul><li>config: VueNodeConfig 类型<ul><li>type: string (必需) - 节点类型标识符</li><li>component: any (必需) - Vue 组件</li><li>model: any (可选) - 自定义节点数据模型</li><li>view: any (可选) - 自定义节点视图类</li><li>effect: (keyof LogicFlow.PropertiesType)[] (可选) - 需要监听的属性列表</li></ul></li></ul><p><strong>注意事项</strong>:</p><ul><li>type 参数是必需的，不能为空</li><li>如果未提供 model，将使用默认的 VueNodeModel</li><li>如果未提供 view，将使用默认的 VueNodeView</li><li>如果未提供 effect，将不会监听任何属性变化</li></ul><p><strong>导出位置</strong>: src&#x2F;registry.ts</p><h3 id="2-getTeleport"><a href="#2-getTeleport" class="headerlink" title="2. getTeleport"></a>2. getTeleport</h3><p><strong>功能</strong>: 获取用于渲染 Vue 组件的 Teleport 容器组件</p><p><strong>使用方法</strong>:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getTeleport <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@logicflow/vue-node-registry'</span><span class="token keyword">const</span> TeleportContainer <span class="token operator">=</span> <span class="token function">getTeleport</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>参数说明</strong>:</p><ul><li>无参数</li></ul><p><strong>返回值</strong>:</p><ul><li>Vue 组件，需要传入 flowId 属性</li></ul><p><strong>注意事项</strong>:</p><ul><li>仅在 Vue 3 环境下可用</li><li>必须提供 flowId 属性</li><li>用于管理多个流程图实例的组件渲染</li></ul><p><strong>导出位置</strong>: src&#x2F;teleport.ts</p><h3 id="3-connect"><a href="#3-connect" class="headerlink" title="3. connect"></a>3. connect</h3><p><strong>功能</strong>: 将 Vue 组件连接到指定的 DOM 容器</p><p><strong>使用方法</strong>:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> connect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@logicflow/vue-node-registry'</span><span class="token function">connect</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> component<span class="token punctuation">,</span> container<span class="token punctuation">,</span> node<span class="token punctuation">,</span> graph<span class="token punctuation">)</span></code></pre><p><strong>参数说明</strong>:</p><ul><li>id: string - 连接的唯一标识符</li><li>component: any - Vue 组件</li><li>container: HTMLDivElement - 目标 DOM 容器</li><li>node: BaseNodeModel - 节点数据模型</li><li>graph: GraphModel - 图数据模型</li></ul><p><strong>注意事项</strong>:</p><ul><li>仅在 active 状态为 true 时生效</li><li>组件会被 markRaw 处理以避免不必要的响应式</li></ul><p><strong>导出位置</strong>: src&#x2F;teleport.ts</p><h3 id="4-disconnect"><a href="#4-disconnect" class="headerlink" title="4. disconnect"></a>4. disconnect</h3><p><strong>功能</strong>: 断开指定 ID 的组件连接</p><p><strong>使用方法</strong>:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> disconnect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@logicflow/vue-node-registry'</span><span class="token function">disconnect</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span></code></pre><p><strong>参数说明</strong>:</p><ul><li>id: string - 要断开的连接 ID</li></ul><p><strong>注意事项</strong>:</p><ul><li>仅在 active 状态为 true 时生效</li></ul><p><strong>导出位置</strong>: src&#x2F;teleport.ts</p><h3 id="5-isActive"><a href="#5-isActive" class="headerlink" title="5. isActive"></a>5. isActive</h3><p><strong>功能</strong>: 检查 Teleport 系统是否处于活动状态</p><p><strong>使用方法</strong>:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isActive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@logicflow/vue-node-registry'</span><span class="token keyword">const</span> active <span class="token operator">=</span> <span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>参数说明</strong>:</p><ul><li>无参数</li></ul><p><strong>返回值</strong>:</p><ul><li>boolean - 当前是否处于活动状态</li></ul><p><strong>导出位置</strong>: src&#x2F;teleport.ts</p><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> LogicFlow <span class="token keyword">from</span> <span class="token string">'@logicflow/core'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> register<span class="token punctuation">,</span> getTeleport <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@logicflow/vue-node-registry'</span><span class="token keyword">import</span> YourVueComponent <span class="token keyword">from</span> <span class="token string">'./YourVueComponent.vue'</span><span class="token comment">// 创建 LogicFlow 实例</span><span class="token keyword">const</span> lf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogicFlow</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  container<span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#container'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  grid<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 注册自定义节点</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  type<span class="token operator">:</span> <span class="token string">'custom-vue-node'</span><span class="token punctuation">,</span>  component<span class="token operator">:</span> YourVueComponent<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> lf<span class="token punctuation">)</span><span class="token comment">// 获取 Teleport 容器</span><span class="token keyword">const</span> TeleportContainer <span class="token operator">=</span> <span class="token function">getTeleport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 在模板中使用</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>TeleportContainer <span class="token operator">:</span>flow<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">"flowId"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>该包仅支持 Vue 3</li><li>使用 Teleport 功能时必须提供 flowId</li><li>自定义节点组件需要正确处理节点的属性和事件</li><li>在多个流程图实例中使用时，需要注意 flowId 的唯一性</li></ol><h3 id="3-CustomNodeView"><a href="#3-CustomNodeView" class="headerlink" title="3. CustomNodeView"></a>3. CustomNodeView</h3><p><strong>功能</strong>: 自定义节点视图类，用于控制节点的渲染和生命周期</p><p><strong>使用场景</strong>:</p><ol><li>需要自定义节点渲染逻辑</li><li>需要控制节点的生命周期</li><li>需要自定义节点的事件处理</li><li>需要自定义节点的样式和行为</li></ol><p><strong>使用方法</strong>:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> HtmlNode <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@logicflow/core'</span><span class="token keyword">class</span> <span class="token class-name">CustomNodeView</span> <span class="token keyword">extends</span> <span class="token class-name">HtmlNode</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 自定义渲染逻辑</span>  <span class="token function">setHtml</span><span class="token punctuation">(</span>rootEl<span class="token operator">:</span> SVGForeignObjectElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>    el<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'custom-node-content'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> el    rootEl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderVueComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 自定义更新逻辑</span>  <span class="token function">confirmUpdate</span><span class="token punctuation">(</span>rootEl<span class="token operator">:</span> SVGForeignObjectElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在这里实现自定义的更新逻辑</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">confirmUpdate</span><span class="token punctuation">(</span>rootEl<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 自定义组件卸载逻辑</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>主要方法说明</strong>:</p><ol><li><p><code>setHtml</code>: 设置节点的 HTML 内容</p><ul><li>参数: rootEl - SVGForeignObjectElement 类型</li><li>作用: 创建和设置节点的 DOM 结构</li></ul></li><li><p><code>confirmUpdate</code>: 确认节点更新</p><ul><li>参数: rootEl - SVGForeignObjectElement 类型</li><li>作用: 处理节点更新时的逻辑</li></ul></li><li><p><code>componentWillUnmount</code>: 组件卸载前处理</p><ul><li>作用: 清理节点资源，移除事件监听等</li></ul></li><li><p><code>renderVueComponent</code>: 渲染 Vue 组件</p><ul><li>作用: 将 Vue 组件渲染到节点中</li></ul></li></ol><p><strong>使用示例</strong>:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 注册自定义节点</span><span class="token function">register</span><span class="token punctuation">(</span>  <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> <span class="token string">'custom-node'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> YourComponent<span class="token punctuation">,</span>    view<span class="token operator">:</span> CustomNodeView<span class="token punctuation">,</span>    model<span class="token operator">:</span> CustomNodeModel<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  lf<span class="token punctuation">)</span></code></pre><p><strong>注意事项</strong>:</p><ol><li>CustomNodeView 继承自 HtmlNode，可以使用 HtmlNode 的所有功能</li><li>需要正确实现生命周期方法，避免内存泄漏</li><li>在自定义渲染逻辑时，注意保持与 LogicFlow 的兼容性</li><li>建议在 confirmUpdate 中实现增量更新，提高性能</li></ol><p><strong>最佳实践</strong>:</p><ol><li>基础节点视图</li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">BasicNodeView</span> <span class="token keyword">extends</span> <span class="token class-name">HtmlNode</span> <span class="token punctuation">&#123;</span>  <span class="token function">setHtml</span><span class="token punctuation">(</span>rootEl<span class="token operator">:</span> SVGForeignObjectElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>    el<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'basic-node'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> el    rootEl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderVueComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>带交互的节点视图</li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">InteractiveNodeView</span> <span class="token keyword">extends</span> <span class="token class-name">HtmlNode</span> <span class="token punctuation">&#123;</span>  <span class="token function">setHtml</span><span class="token punctuation">(</span>rootEl<span class="token operator">:</span> SVGForeignObjectElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>    el<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'interactive-node'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> el    rootEl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>    <span class="token comment">// 添加交互事件</span>    el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseenter'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleMouseEnter</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderVueComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 处理点击事件</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>model<span class="token punctuation">.</span><span class="token function">setSelected</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">handleMouseEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 处理鼠标进入事件</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>model<span class="token punctuation">.</span><span class="token function">setHovered</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 清理事件监听</span>    <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getComponentContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      el<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">)</span>      el<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseenter'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseEnter<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>动态更新节点视图</li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">DynamicNodeView</span> <span class="token keyword">extends</span> <span class="token class-name">HtmlNode</span> <span class="token punctuation">&#123;</span>  <span class="token function">confirmUpdate</span><span class="token punctuation">(</span>rootEl<span class="token operator">:</span> SVGForeignObjectElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 只在数据变化时更新</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>model<span class="token punctuation">.</span>isChanged<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderVueComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>model<span class="token punctuation">.</span>isChanged <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">confirmUpdate</span><span class="token punctuation">(</span>rootEl<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下拉搜索hook</title>
      <link href="/star/2025/0426329699.html"/>
      <url>/star/2025/0426329699.html</url>
      
        <content type="html"><![CDATA[<h2 id="下拉搜索-hook"><a href="#下拉搜索-hook" class="headerlink" title="下拉搜索 hook"></a>下拉搜索 hook</h2><h3 id="el-select-搜索"><a href="#el-select-搜索" class="headerlink" title="el-select 搜索"></a>el-select 搜索</h3><p>传参：数组，搜索的属性名称，是否从开头搜索</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> computed<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">useFilterSelect</span><span class="token punctuation">(</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  filterName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>  isStart <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> filterKeyword <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">filterMethod</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">keyword</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    filterKeyword<span class="token punctuation">.</span>value <span class="token operator">=</span> keyword  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> filteredOptions <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filterKeyword<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> data    <span class="token keyword">if</span> <span class="token punctuation">(</span>isStart<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span>        item<span class="token punctuation">[</span>filterName<span class="token punctuation">]</span>          <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>filterKeyword<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span>        item<span class="token punctuation">[</span>filterName<span class="token punctuation">]</span>          <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>filterKeyword<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    filterMethod<span class="token punctuation">,</span> <span class="token comment">// 返回过滤的方法</span>    filteredOptions<span class="token punctuation">,</span> <span class="token comment">// 返回过滤后的数据</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//  filterable :filter-method="filterMethod"</span></code></pre><h3 id="el-tree-select-数据量大时"><a href="#el-tree-select-数据量大时" class="headerlink" title="el-tree-select 数据量大时"></a>el-tree-select 数据量大时</h3><p>传参：数组，搜索的属性名称，子集名称</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> computed<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 递归删除空的children</span><span class="token keyword">const</span> <span class="token function-variable function">cleanEmptyChildren</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arr</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建新对象，避免修改原对象</span>    <span class="token keyword">const</span> newItem <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>item <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果有children属性且不为空数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newItem<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>newItem<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newItem<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 递归处理children</span>        newItem<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">cleanEmptyChildren</span><span class="token punctuation">(</span>newItem<span class="token punctuation">.</span>children<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果children是空数组，删除children属性</span>        <span class="token keyword">delete</span> newItem<span class="token punctuation">.</span>children      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> newItem  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">useFilterTreeSelect</span><span class="token punctuation">(</span>data<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token string">'label'</span><span class="token punctuation">,</span> children <span class="token operator">=</span> <span class="token string">'children'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> treeSelectsArr <span class="token operator">=</span> ref<span class="token operator">&lt;</span>any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">cleanEmptyChildren</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 数组</span>  <span class="token keyword">const</span> filterKeyword <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token comment">// 搜索词</span>  <span class="token comment">// 递归查询tree结构数据</span>  <span class="token keyword">const</span> filteredOptions <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filterKeyword<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> treeSelectsArr<span class="token punctuation">.</span>value  <span class="token comment">// 不存在则不变</span>    <span class="token keyword">const</span> filterTree <span class="token operator">=</span> <span class="token punctuation">(</span>nodes<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> nodes<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">node</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> match <span class="token operator">=</span> node<span class="token punctuation">[</span>label<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>filterKeyword<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 是否包含</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span>children<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">[</span>children<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> <span class="token literal-property property">filteredChildren</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">filterTree</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>children<span class="token punctuation">]</span><span class="token punctuation">)</span>          node<span class="token punctuation">[</span>children<span class="token punctuation">]</span> <span class="token operator">=</span> filteredChildren          <span class="token keyword">return</span> match <span class="token operator">||</span> filteredChildren<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> match      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">filterTree</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>treeSelectsArr<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 改变搜索词</span>  <span class="token keyword">const</span> <span class="token function-variable function">filterMethod</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">keyword</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    filterKeyword<span class="token punctuation">.</span>value <span class="token operator">=</span> keyword  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    filterMethod<span class="token punctuation">,</span>  <span class="token comment">// 返回过滤的方法</span>    filteredOptions  <span class="token comment">// 返回过滤后的数据</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//  filterable :filter-method="filterMethod"  clearable default-expand-all check-strictly</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决el-tree-select数据量过大，搜索时，循环递归造成的内存泄露解决</title>
      <link href="/star/2025/04256651236.html"/>
      <url>/star/2025/04256651236.html</url>
      
        <content type="html"><![CDATA[<h3 id="解决-el-tree-select-数据量过大，搜索时，循环递归造成的内存泄露解决"><a href="#解决-el-tree-select-数据量过大，搜索时，循环递归造成的内存泄露解决" class="headerlink" title="解决 el-tree-select 数据量过大，搜索时，循环递归造成的内存泄露解决"></a>解决 el-tree-select 数据量过大，搜索时，循环递归造成的内存泄露解决</h3><p>报错信息：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">:</span><span class="token number">5002</span><span class="token operator">/</span>#<span class="token operator">/</span>dataGovern<span class="token operator">/</span>d…GovernTaskProcess<span class="token operator">:</span><span class="token number">1</span> <span class="token function">Uncaught</span> <span class="token punctuation">(</span><span class="token keyword">in</span> promise<span class="token punctuation">)</span> Maximum recursive updates exceeded <span class="token keyword">in</span> component <span class="token operator">&lt;</span>ElSelect<span class="token operator">></span><span class="token punctuation">.</span> This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself<span class="token punctuation">.</span> Possible sources include component template<span class="token punctuation">,</span> render <span class="token keyword">function</span><span class="token punctuation">,</span> updated hook or watcher source <span class="token keyword">function</span><span class="token punctuation">.</span></code></pre><p>原因：数据量过大，递归造成内存泄露，减少数据量，你会发现，啥问题都没有了。</p><p>解决： 一定要使用自定义方法 :filter-method&#x3D;”filterMethod”</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 组件</span> <span class="token operator">&lt;</span>el<span class="token operator">-</span>tree<span class="token operator">-</span>select v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"form.deptId"</span> <span class="token operator">:</span>data<span class="token operator">=</span><span class="token string">"filteredOptions"</span> <span class="token operator">:</span>props<span class="token operator">=</span>"<span class="token punctuation">&#123;</span>       <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span>       <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'label'</span><span class="token punctuation">,</span>       <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">'children'</span><span class="token punctuation">,</span>       <span class="token literal-property property">checkStrictly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token string">" filterable :filter-method="</span>filterMethod" <span class="token operator">/</span><span class="token operator">></span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 逻辑</span><span class="token keyword">const</span> treeSelectsArr <span class="token operator">=</span> ref <span class="token operator">&lt;</span> any <span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 数据</span><span class="token keyword">const</span> filterKeyword <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment">// 搜索词</span><span class="token comment">// 通过计算属性递归计算数据，返回数据</span><span class="token keyword">const</span> filteredOptions <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filterKeyword<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> treeSelectsArr<span class="token punctuation">.</span>value  <span class="token keyword">const</span> filterTree <span class="token operator">=</span> <span class="token punctuation">(</span>nodes<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> nodes<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> match <span class="token operator">=</span> node<span class="token punctuation">.</span>label        <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>filterKeyword<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token literal-property property">filteredChildren</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">filterTree</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span>        node<span class="token punctuation">.</span>children <span class="token operator">=</span> filteredChildren        <span class="token keyword">return</span> match <span class="token operator">||</span> filteredChildren<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> match    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">filterTree</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>treeSelectsArr<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 改变搜索词</span><span class="token keyword">const</span> <span class="token function-variable function">filterMethod</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">keyword</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  filterKeyword<span class="token punctuation">.</span>value <span class="token operator">=</span> keyword<span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LogicFlow的Vue3自定义节点</title>
      <link href="/star/2025/0422368113.html"/>
      <url>/star/2025/0422368113.html</url>
      
        <content type="html"><![CDATA[<h2 id="LogicFlow-的-Vue3-自定义节点"><a href="#LogicFlow-的-Vue3-自定义节点" class="headerlink" title="LogicFlow 的 Vue3 自定义节点"></a>LogicFlow 的 Vue3 自定义节点</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>​ 当项目业务像贪吃蛇疯狂吃豆子一样越变越复杂，我摩拳擦掌把算盘打到了 LogicFlow 的自定义节点身上！想象中这官网得是个知识大礼包，我搓着手点进去，结果页面直接给我表演了个 “速通”—— 就一个案例，唰地一下结束了，仿佛是在玩网页版 “大家来找茬”，可找来找去就那孤零零的一个例子！</p><p>我跟打不死的小强似的，转头杀进搜索引擎。好家伙，打开一堆博客，不是把官网案例 Ctrl+V 得明明白白，博主们像在参加 “复制粘贴武林大会”，比谁手速快；就是惜字如金，说的内容还没我家猫打翻的猫粮颗粒多，气得我直拍大腿，靠，看源码！</p><h3 id="2-LogicFlow-的-Api-介绍"><a href="#2-LogicFlow-的-Api-介绍" class="headerlink" title="2.LogicFlow 的 Api 介绍"></a>2.LogicFlow 的 Api 介绍</h3><p>官网 Api: <a href="https://site.logic-flow.cn/api/model/graph-model">https://site.logic-flow.cn/api/model/graph-model</a></p><p><img src="/star/image/CustomVue/img1.png" alt="img1"><br>上表，请记住<code>graphModel</code>和<code>nodeModel</code>，这两个 Api 集合。</p><table><thead><tr><th>Api 集合</th><th>说明</th></tr></thead><tbody><tr><td>graphModel</td><td>graphModel 是 LogicFlow 中整个画布对应的 <code>model</code></td></tr><tr><td>nodeModel</td><td>LogicFlow 中所有的节点都会有一个 nodeModel 与其对应</td></tr><tr><td>edgeModel</td><td>LogicFlow 中所有的边都会有一个 edgeModel 与其对应</td></tr><tr><td>transformModel</td><td>控制画布的放大、缩小、平移</td></tr><tr><td>editConfigModel</td><td>editConfigModel 是控制页面编辑状态</td></tr></tbody></table><p>说明：</p><ol><li><strong>注意</strong>graphModel 上所有的属性都是只读，要想修改，请使用提供的对应方法进行修改。</li><li>由于数据驱动视图的机制，我们对<code>节点和边</code>的所有操作事实上就是对 model 的操作。大多数情况下，我们不建议直接对<code> nodeModel 和 edgeModel的属性</code>进行<code>赋值操作</code>，而是调用 <code>model ， edgeModel</code> 或者 graphModel: <a href="https://site.logic-flow.cn/api/model/graph-model">https://site.logic-flow.cn/api/model/graph-model</a> 上提供的方法。</li></ol><p>总结：以上自己熟悉熟悉即可，不要通过<code>graphModel和nodeModel和edgeModel</code>的属性进行赋值操作，均是只读。要改属性请调用方法。</p><h3 id="3-让我们看看官方-Vue3-的自定义节点"><a href="#3-让我们看看官方-Vue3-的自定义节点" class="headerlink" title="3.让我们看看官方 Vue3 的自定义节点"></a>3.让我们看看官方 Vue3 的自定义节点</h3><p>官方的 Vue 自定义节点: <a href="https://site.logic-flow.cn/tutorial/advanced/vue">https://site.logic-flow.cn/tutorial/advanced/vue</a></p><p><img src="/star/image/CustomVue/img2.png" alt="img2"></p><p>由上图可知，提供了一个包<code>@logicflow/vue-node-registry</code>，要是有 Vue 自定义节点请先下载这个包</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> @logicflow/core <span class="token parameter variable">--save</span>       <span class="token comment"># LogicFlow核心包</span><span class="token function">npm</span> <span class="token function">install</span> @logicflow/extension <span class="token parameter variable">--save</span>  <span class="token comment"># 插件包（不使用插件时不需要引入）</span><span class="token function">npm</span> <span class="token function">install</span> @logicflow/vue-node-registry <span class="token parameter variable">--save</span>  <span class="token comment"># Vue自定义节点包</span><span class="token function">import</span> <span class="token string">'@logicflow/core/es/index.css'</span>         <span class="token comment"># LogicFlow核心包样式（2选1即可）</span><span class="token function">import</span> <span class="token string">'@logicflow/core/lib/style/index.css'</span>   <span class="token comment"># LogicFlow核心包样式（2选1即可）</span><span class="token function">import</span> <span class="token string">'@logicflow/extension/es/index.css'</span> <span class="token comment"># 插件包样式（2选1即可）</span><span class="token function">import</span> <span class="token string">'@logicflow/extension/lib/style/index.css'</span> <span class="token comment"># 插件包样式（2选1即可）</span></code></pre><p>1.如果以上的包下载了，未生效，请查看项目中的<code>node_modules -- &gt;  @logicflow</code>下面是否存在<code>core,extension,vue-node-registry</code>这三个包，如果不使用插件，可以不下载第二个包。</p><p>2.如果样式引入不生效，同样请查看<code>node_modules -- &gt;  @logicflow</code>中<code>core,extension</code>这两个包的样式位置即可</p><h3 id="4-创建自定义节点"><a href="#4-创建自定义节点" class="headerlink" title="4.创建自定义节点"></a>4.创建自定义节点</h3><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;script lang&#x3D;&quot;ts&quot; setup&gt;import &#123; ref, inject &#125; from &#39;vue&#39;import &#123; lywMessage, lywConfirm &#125; from &#39;@&#x2F;utils&#x2F;feedBack&#39; &#x2F;&#x2F;自定义提示与弹框通知const getNode: any &#x3D; inject(&#39;getNode&#39;)const getGraph: any &#x3D; inject(&#39;getGraph&#39;)const node &#x3D; getNode()const graph &#x3D; getGraph()&#x2F;&#x2F; 事件触发&#x2F;&#x2F;  编辑const updateSubmit &#x3D; () &#x3D;&gt; &#123;  graph.eventCenter?.emit(&#39;node:doEdit&#39;, &#123;    form: formUpdate.value,    pojoList: fieldArrEdit.value,  &#125;)  graph.eventCenter.on(&#39;node:axiosStatus&#39;, (args: any) &#x3D;&gt; &#123;    if (args) &#123;      doClose()    &#125; else &#123;      lywMessage(&#39;编辑失败&#39;, &#39;error&#39;)    &#125;  &#125;)&#125;&#x2F;&#x2F; 删除const del &#x3D; () &#x3D;&gt; &#123;  lywConfirm(&#39;您确定要移除当前项吗&#39;, null, async () &#x3D;&gt; &#123;    graph.eventCenter?.emit(&#39;node:doDel&#39;, &#123;      data: node.properties.tableObject,    &#125;)  &#125;)&#125;&#x2F;&#x2F;...其余逻辑代码正常写，不要违反LogicFlow的Api介绍的注意点即可&lt;&#x2F;script&gt;</code></pre><p>以上代码就是 Vue 的自定义节点，他的<code>Html结构与Css样式</code>我就不展示了，我只展示关键代码</p><h4 id="4-1-关键点一：数据从何而来？"><a href="#4-1-关键点一：数据从何而来？" class="headerlink" title="4.1.关键点一：数据从何而来？"></a>4.1.关键点一：数据从何而来？</h4><p><img src="/star/image/CustomVue/img3.png" alt="img3"></p><p>官方的 Vue 自定义节点: <a href="https://site.logic-flow.cn/tutorial/advanced/vue">https://site.logic-flow.cn/tutorial/advanced/vue</a></p><p>在我们看见官方的演示中，并未进行<code>provide</code>传递数据。那 inject 数据从何而来？</p><p><code>const TeleportContainer = getTeleport()</code>注意这行代码，让我们看看他的内部逻辑</p><p><img src="/star/image/CustomVue/img5.png" alt="img5"></p><p>这 4 个暴露出的函数就是这个文件的全部，解释请看图即可，其中，让我们看看<code>connect函数</code></p><p><img src="/star/image/CustomVue/img4.png" alt="img4"></p><p><code>看见源码可以发现，人家在connect接入这个函数进行了数据传递，继续往下看</code></p><p><img src="/star/image/CustomVue/img6.png" alt="img6"></p><p><img src="/star/image/CustomVue/img7.png" alt="img7"></p><p>上方的这个图片红框解释一下，相当于一个模板吧，例如：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">h</span><span class="token punctuation">(</span> 标签名<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>     标签的属性：属性值<span class="token punctuation">,</span>     （例如img标签属性，a标签的属性等）     <span class="token literal-property property">style</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>       <span class="token literal-property property">width</span><span class="token operator">:</span><span class="token number">0</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function">该标签的子组件</span><span class="token punctuation">(</span>子组件为同一等级<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>ok，解释玩完上方，<code>有细心的伙伴就发现了,getTeleport这个函数并未调用connect函数</code>，确实如此，为什么没调用，会触发？</p><h4 id="4-2-getTeleport-并未调用函数，为何会触发？"><a href="#4-2-getTeleport-并未调用函数，为何会触发？" class="headerlink" title="4.2.getTeleport 并未调用函数，为何会触发？"></a>4.2.getTeleport 并未调用函数，为何会触发？</h4><p>我们先看一下 logicFlow 官方放出来自定义节点的流程图</p><p><img src="/star/image/CustomVue/img8.png" alt="img8"></p><p>ok，这个流程图看完了，请问表达了什么？就只表达了自定义节点的底层是如何运行的，那怎样才能让自定义节点运行起来？当然是需要挂载到 LogicFlow 实例上才行啊！！！</p><p><strong>分为以下几步：</strong></p><ol><li>创建 LogicFlow 实例</li><li>注册自定义节点</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;script setup lang&#x3D;&quot;ts&quot;&gt;onMounted(() &#x3D;&gt; &#123;  if (containerRef.value) &#123;    &#x2F;&#x2F; 1.创建LogicFlow实例    lf.value &#x3D; new LogicFlow(&#123;      container: containerRef.value!,      grid: true,      nodeTextEdit: false,      edgeTextEdit: false,      zoom: &#123;        min: 0.2,        max: 2,        size: 0.1,      &#125;,      &#x2F;&#x2F; ...多个属性，自己去官网找    &#125;)    &#x2F;&#x2F; 2.注册节点    register(      &#123;        type: &#39;custom-vue-node&#39;,        component: ProgressNode,        model: CustomNodeModel,      &#125;,      lf.value    )  &#125;&#125;)&lt;&#x2F;script&gt;</code></pre><p>在注册节点时，调用了<code>register</code>函数，继续往下看</p><p><img src="/star/image/CustomVue/img9.png" alt="img9"></p><p>我们自定义的组件其实就是图中的<code>View</code>，注意：我说的是自定义的组件，不是自定义节点。我们不传递自定义的 view，View 使用的是<code>VueNodeView</code></p><p><img src="/star/image/CustomVue/img10.png" alt="img10"></p><p>这里是代码位置，让我们看看内部代码。</p><p><img src="/star/image/CustomVue/img11.png" alt="img11"></p><p><code>Vue2</code>我们就不看了，直接看<code>Vue3</code>的代码，当在激活时，触发 connect 函数，函数在这里触发了。那当没有激活时，那下面那段代码是什么意思？</p><h4 id="4-3-未激活时，会发生什么？"><a href="#4-3-未激活时，会发生什么？" class="headerlink" title="4.3.未激活时，会发生什么？"></a>4.3.未激活时，会发生什么？</h4><p>请问上面的未激活说明了什么？自己去看看<code>teleport.ts</code>代码，说明了并未调用<code>getTeleport</code>这个函数，那么就说明，自定义节点并不只是通过<code>getTeleport()</code>函数这一种写法，说明了还有另一种写法，这种写法不需要传递<code>flowId</code>,不需要写入<code>getTeleport()</code>的组件， 只不过这种写法官方并没有示例与说明。这种写法我就不演示了，我感觉官方的写法就挺好用的。我试了，是可行的。有兴趣的可以自己去试一下</p><h4 id="4-4-数据的使用"><a href="#4-4-数据的使用" class="headerlink" title="4.4.数据的使用"></a>4.4.数据的使用</h4><p>前面 3 点，讲清楚了<code>getNode,getGraph</code>这两个数据是从何而来。现在说说他们的作用，先仔细看看前面的部分,去看<code>第2点LogicFlow的Api介绍</code></p><ol><li><p>尽量不要去改内部的属性，修改属性自己去官网找方法</p></li><li><p>通过&#96;&#96;中的<code>properties</code>传递的数据去展示数据</p></li><li><p>通过<code>getGraph</code>中的<code>eventCenter</code>去触发事件</p></li></ol><p>注意：千万不要自作聪明，去传参拿数据，去写自定义事件，我告诉你，一个都没用，渲染数据就用<code>getNode</code>,触发事件就用<code>getGraph</code>，getGraph 与 graphModel，只相差<code>flowId</code>一个参数，<code>getNode</code>就是整个自定义节点，即 View，他包含了<code>getGraph</code>。</p><p>官网事件: <a href="https://site.logic-flow.cn/api/event-center">https://site.logic-flow.cn/api/event-center</a></p><p>找到监听事件<code>on,off,once,emit</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父组件</span><span class="token comment">// 编辑与移除事件结果</span><span class="token keyword">const</span> <span class="token function-variable function">sendStatus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">flag</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  lf<span class="token punctuation">.</span>value<span class="token operator">?.</span>graphModel<span class="token punctuation">.</span>eventCenter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'node:axiosStatus'</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span>  <span class="token comment">//触发</span><span class="token punctuation">&#125;</span><span class="token comment">// 编辑与移除事件</span><span class="token keyword">const</span> <span class="token function-variable function">initEvent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">lf</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 监听编辑</span>  lf<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'graph:rendered'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> graphModel <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">graphModel</span><span class="token operator">:</span> any <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    flowId<span class="token punctuation">.</span>value <span class="token operator">=</span> graphModel<span class="token punctuation">.</span>flowId<span class="token operator">!</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  lf<span class="token punctuation">.</span>value<span class="token operator">?.</span>graphModel<span class="token punctuation">.</span>eventCenter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'node:doEdit'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">agrs</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> form<span class="token punctuation">,</span> pojoList <span class="token punctuation">&#125;</span> <span class="token operator">=</span> agrs    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> form<span class="token punctuation">,</span> pojoList <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'编辑'</span><span class="token punctuation">)</span>    <span class="token function">sendStatus</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token comment">// 监听删除</span>  lf<span class="token punctuation">.</span>value<span class="token operator">?.</span>graphModel<span class="token punctuation">.</span>eventCenter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'node:doDel'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">agrs</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> modeName<span class="token punctuation">,</span> tableName <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span> <span class="token operator">=</span> agrs    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> modeName<span class="token punctuation">,</span> tableName <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'移除'</span><span class="token punctuation">)</span>    <span class="token function">sendStatus</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 子组件</span><span class="token comment">// 编辑</span><span class="token keyword">const</span> <span class="token function-variable function">updateSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">//触发</span>  graph<span class="token punctuation">.</span>eventCenter<span class="token operator">?.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'node:doEdit'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">form</span><span class="token operator">:</span> formUpdate<span class="token punctuation">.</span>value<span class="token punctuation">,</span>    <span class="token literal-property property">pojoList</span><span class="token operator">:</span> fieldArrEdit<span class="token punctuation">.</span>value<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//监听结果</span>  graph<span class="token punctuation">.</span>eventCenter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'node:axiosStatus'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">args</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">doClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">lywMessage</span><span class="token punctuation">(</span><span class="token string">'编辑失败'</span><span class="token punctuation">,</span> <span class="token string">'error'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 删除</span><span class="token keyword">const</span> <span class="token function-variable function">del</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">lywConfirm</span><span class="token punctuation">(</span><span class="token string">'您确定要移除当前项吗'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//触发</span>    graph<span class="token punctuation">.</span>eventCenter<span class="token operator">?.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'node:doDel'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">data</span><span class="token operator">:</span> node<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>tableObject<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="5-Model"><a href="#5-Model" class="headerlink" title="5.Model"></a>5.Model</h3><p>之前的全部操作相当于全是做的<code>View</code>，<code>Model</code>需要自己定义，当然你也可以不做，使用默认的，但是默认的往往无法达到你想要的效果，这边没什么好说的，你们自己去看看 Model 的 Api 即可</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RectNodeModel<span class="token punctuation">,</span> CircleNodeModel <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@logicflow/core'</span><span class="token keyword">class</span> <span class="token class-name">CustomNodeModel</span> <span class="token keyword">extends</span> <span class="token class-name">RectNodeModel</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//移入放大锚点</span>  <span class="token function">getAnchorStyle</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">anchorInfo</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getAnchorStyle</span><span class="token punctuation">(</span>anchorInfo<span class="token punctuation">)</span>    style<span class="token punctuation">.</span>stroke <span class="token operator">=</span> <span class="token string">'rgb(24, 125, 255)'</span>    style<span class="token punctuation">.</span>fill <span class="token operator">=</span> <span class="token string">'#4E88F3'</span>    style<span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>style<span class="token punctuation">.</span>hover<span class="token punctuation">)</span> <span class="token keyword">return</span> style    style<span class="token punctuation">.</span>hover<span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token number">8</span>    style<span class="token punctuation">.</span>hover<span class="token punctuation">.</span>fill <span class="token operator">=</span> <span class="token string">'rgb(24, 125, 255)'</span>    style<span class="token punctuation">.</span>hover<span class="token punctuation">.</span>stroke <span class="token operator">=</span> <span class="token string">'rgb(24, 125, 255)'</span>    <span class="token keyword">return</span> style  <span class="token punctuation">&#125;</span>  <span class="token function">getOutlineStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getOutlineStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token operator">...</span>style<span class="token punctuation">,</span>      <span class="token literal-property property">stroke</span><span class="token operator">:</span> <span class="token string">'transparent'</span><span class="token punctuation">,</span> <span class="token comment">// 将边框颜色设为透明</span>      <span class="token literal-property property">strokeDasharray</span><span class="token operator">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token comment">// 取消虚线效果</span>      <span class="token literal-property property">strokeWidth</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 完全隐藏边框</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">getNodeStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getNodeStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token operator">...</span>style<span class="token punctuation">,</span> <span class="token comment">// fill: this.isSelected ? : '#fff', // 选中时浅蓝背景</span>      <span class="token literal-property property">stroke</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isSelected <span class="token operator">?</span> <span class="token string">'#1890ff'</span> <span class="token operator">:</span> <span class="token string">'#999'</span><span class="token punctuation">,</span> <span class="token comment">// 选中时蓝色，默认灰色</span>      <span class="token literal-property property">strokeDasharray</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isSelected <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">:</span> <span class="token string">'3,2'</span><span class="token punctuation">,</span> <span class="token comment">// 选中时实线，默认虚线</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> CustomNodeModel</code></pre><h3 id="6-Edge"><a href="#6-Edge" class="headerlink" title="6.Edge"></a>6.Edge</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> BezierEdgeModel <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@logicflow/core'</span><span class="token keyword">class</span> <span class="token class-name">CustomNodeLine</span> <span class="token keyword">extends</span> <span class="token class-name">BezierEdgeModel</span> <span class="token punctuation">&#123;</span>  <span class="token function">getEdgeStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getEdgeStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    style<span class="token punctuation">.</span>stroke <span class="token operator">=</span> <span class="token string">'#4e88f3'</span>    <span class="token comment">// style.strokeDasharray = '3 3'   // 虚线</span>    style<span class="token punctuation">.</span>strokeWidth <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> style  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> CustomNodeLine</code></pre><p>边默认是黑色的，这边想好看点自己去看 Api，Api 实在太多了，说也说不完</p><h3 id="7-注册"><a href="#7-注册" class="headerlink" title="7.注册"></a>7.注册</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript">lf<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'CustomNodeLine'</span><span class="token punctuation">,</span>  <span class="token literal-property property">view</span><span class="token operator">:</span> BezierEdge<span class="token punctuation">,</span>  <span class="token literal-property property">model</span><span class="token operator">:</span> CustomNodeLine<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>后续直接使用即可，你可以注册多个不同的自定义组件</p><p>最后，几个注意点：</p><ol><li>当回退撤销按钮实现，即历史记录不完整，请更换插件包版本</li><li>当你的节点里面只有一张图片，拖拽时，就点击了一下，节点跟着你的鼠标到处跑，请在 img 中加入 <code>draggable: false</code>，不是包的问题</li><li>很多时候一定要基本遵循官方要求去操作数据，<code>   lf.value.graphModel.edgeType = &#39;CustomNodeLine&#39;</code>，graphModel 的属性都是只读的，能找到他的方法去调用就去调用，一般都存在，官网找不到就去 TS 中去找，这种就是正确写法<code>lf.value.graphModel.setDefaultEdgeType(&#39;CustomNodeLine&#39;)</code></li></ol><p>自定义节点完结，如有错误，留言更正，希望对你们有帮助。</p><!-- 演示地址(需要科学上网): https://domandbom.github.io/LogicFlow-Lyw -->]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LogicFlow</title>
      <link href="/star/2025/04213575961113.html"/>
      <url>/star/2025/04213575961113.html</url>
      
        <content type="html"><![CDATA[<h2 id="LogicFlow"><a href="#LogicFlow" class="headerlink" title="LogicFlow"></a>LogicFlow</h2><p>​ 由于工作需要，本人将 LogicFlow 实践了多次。因此写下本篇博客以此记录，希望能帮助到刚开始使用的小伙伴。</p><p>​ 官方回答：<code>LogicFlow</code>是一款流程图编辑框架，提供了一系列流程图交互、编辑所必需的功能和灵活的节点自定义、插件等拓展机制。 <code>LogicFlow</code>支持前端自定义开发各种逻辑编排场景，如流程图、<code>ER</code>图、<code>BPMN</code>流程等。在工作审批流配置、机器人逻辑编排、无代码平台流程配置都有较好的应用。</p><p>LogicFlow 官网: <a href="https://site.logic-flow.cn/tutorial/about">https://site.logic-flow.cn/tutorial/about</a></p><p><strong>我们先看看大概的布局</strong></p><p><img src="/star/image/LogicFlow/LogicFlow.png" alt="LogicFlow"></p><p><code>由图可见，可分为以下部分</code></p><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>左侧的拖拽组件选择栏</td><td>分为流程图模板和流程组件</td></tr><tr><td>中间的流程图</td><td>展示流程图的类型以及指向</td></tr><tr><td>右侧空白区域</td><td>右侧空白区域主要是某个流程节点相关的数据的输入，这里我没定义，看个人需求</td></tr><tr><td>顶部的小按钮</td><td>主要包括流程图的缩小，放大，撤销，回退，居中，清空等功能</td></tr><tr><td>提交按钮</td><td>主要是能拿到该流程图的数据以及流程图右侧输入的数据</td></tr></tbody></table><h2 id="LogicFlow-的-Vue-自定义节点"><a href="#LogicFlow-的-Vue-自定义节点" class="headerlink" title="LogicFlow 的 Vue 自定义节点"></a>LogicFlow 的 Vue 自定义节点</h2><p>为什么使用自定义节点？因为使用 LogincFlow 原本的属性与 Api，很多复杂的操作都是实现困难甚至无法实现的。</p><p>Vue 的自定义节点建议使用 Vue3 进行操作，因为 Vue2 我没试过。</p><p><img src="/star/image/LogicFlow/CustomVue1.png" alt="CustomVue1"></p><p><img src="/star/image/LogicFlow/CustomVue2.png" alt="CustomVue2"></p><p><img src="/star/image/LogicFlow/CustomVue3.png" alt="CustomVue3"></p><p>由上图可见，如果不通过自定义节点去实现，我们先不说难度的问题，就是代码你都要写冒烟</p><p>那又有人说了，你这个自定义节点有 4 个锚点，原生的也是 4 个，原生的可以自定义锚点个数以及锚点样式，线的样式等等，那自定义节点怎么弄？ 我不想要 4 个，我想要根据他的列生成多个锚点，或者我只希望他只有 2 个锚点，又或者说想要调整他其他的部分。ok,没问题，请看下图</p><p><img src="/star/image/LogicFlow/CustomVue4.png" alt="CustomVue4"></p><p>这张图的代码我没集成进 GitHub，因为我后面会出一篇文章详细讲解 Vue3 自定义节点，原生的我就不再出文章了，大家看看官网得了。</p><!-- 演示地址(需要科学上网)：https://domandbom.github.io/LogicFlow-Lyw -->]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表格单选回显</title>
      <link href="/star/2025/04113296969.html"/>
      <url>/star/2025/04113296969.html</url>
      
        <content type="html"><![CDATA[<h3 id="表格单选回显"><a href="#表格单选回显" class="headerlink" title="表格单选回显"></a>表格单选回显</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> nextTick<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// onlyValue: table的row-key绑定的唯一值</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useTableSingle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">onlyValue</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> tableRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//ref</span>  <span class="token keyword">const</span> tableData <span class="token operator">=</span> ref<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// table数据</span>  <span class="token keyword">const</span> selectedData <span class="token operator">=</span> ref<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 存储选中的数据</span>  <span class="token comment">// 点击某一项时，触发</span>  <span class="token keyword">const</span> <span class="token function-variable function">onSelect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">row</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">item</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    tableRef<span class="token punctuation">.</span>value<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">clearSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    tableRef<span class="token punctuation">.</span>value<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">toggleRowSelection</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    selectedData<span class="token punctuation">.</span>value <span class="token operator">=</span> item  <span class="token punctuation">&#125;</span>  <span class="token comment">// 设置表格数据</span>  <span class="token keyword">const</span> <span class="token function-variable function">setTableData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">data</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    tableData<span class="token punctuation">.</span>value <span class="token operator">=</span> data    <span class="token comment">// 在数据加载完成后，尝试回显选中状态</span>    <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedData<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> tableData<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> index <span class="token operator">=</span> tableData<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">[</span>onlyValue<span class="token punctuation">]</span> <span class="token operator">===</span> selectedData<span class="token punctuation">.</span>value<span class="token punctuation">[</span>onlyValue<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          tableRef<span class="token punctuation">.</span>value<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">toggleRowSelection</span><span class="token punctuation">(</span>tableData<span class="token punctuation">.</span>value<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 获取选中数据</span>  <span class="token keyword">const</span> <span class="token function-variable function">getSelectedData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> selectedData<span class="token punctuation">.</span>value  <span class="token punctuation">&#125;</span>  <span class="token comment">// 清空选中状态</span>  <span class="token keyword">const</span> <span class="token function-variable function">clearSelection</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    selectedData<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span>    tableRef<span class="token punctuation">.</span>value<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">clearSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    tableRef<span class="token punctuation">,</span>    onSelect<span class="token punctuation">,</span>    tableData<span class="token punctuation">,</span>    setTableData<span class="token punctuation">,</span>    getSelectedData<span class="token punctuation">,</span>    clearSelection  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 0.css  ::v-deep .el-table__header-wrapper .el-checkbox &#123;     display: none;  &#125; * 使用方法: * 1.引入 import &#123; useTableSingle &#125; from '~/src/hooks/useTableSingle' * 2.调用 const &#123; onSelect, tableData, tableRef, setTableData, getSelectedData, clearSelection &#125; = useTableSingle('唯一值') * 3.table定义: *   &lt;el-table *     ref="tableRef" *     :data="tableData" *     @select="onSelect" *     row-key="绑定唯一值" *   > * 4.设置表格数据时使用 setTableData 方法: *   setTableData(表格数据) * 5.获取选中数据: *   const selectedData = getSelectedData() * 6.清空选中状态: *   clearSelection() */</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cursor</title>
      <link href="/star/2025/0409329696.html"/>
      <url>/star/2025/0409329696.html</url>
      
        <content type="html"><![CDATA[<h2 id="Cursor"><a href="#Cursor" class="headerlink" title="Cursor"></a>Cursor</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>Ctrl+i , Ctrl+L</td><td>开启 Chat 搜索</td></tr><tr><td>选择相对应得文本 Ctrl+L</td><td>可以根据这段文本搜索给你答案</td></tr><tr><td>Tab</td><td>代码自动补全，代码智能改写以及光标预测</td></tr><tr><td>Alt</td><td>多选代码</td></tr><tr><td>Ctrl + H</td><td>全局替换(不建议)</td></tr></tbody></table><h3 id="1-自动补全配置-Tab-或-Tab-右键"><a href="#1-自动补全配置-Tab-或-Tab-右键" class="headerlink" title="1.自动补全配置 Tab 或 Tab + 右键"></a>1.自动补全配置 Tab 或 Tab + 右键</h3><p>1.右下角配置</p><p><img src="/star/image/cursor/zdbqpz1.png" alt="自动补全配置1"></p><p>2.设置中，Features 配置</p><p><img src="/star/image/cursor/zdbqpz2.png" alt="自动补全配置2"></p><h3 id="2-行内对话框-Ctrl-k"><a href="#2-行内对话框-Ctrl-k" class="headerlink" title="2.行内对话框 Ctrl + k"></a>2.行内对话框 Ctrl + k</h3><h3 id="3-打开-Chat-模式"><a href="#3-打开-Chat-模式" class="headerlink" title="3.打开 Chat 模式"></a>3.打开 Chat 模式</h3><ol><li>Ctrl + L ， Ctrl + i</li><li>选中代码，点击 Chat 即可</li><li>打开控制台，选中信息，即会出现按钮</li></ol><h4 id="增加上下文"><a href="#增加上下文" class="headerlink" title="增加上下文"></a>增加上下文</h4><p><img src="/star/image/cursor/sssxw1.png" alt="搜索上下文1"></p><h4 id="使用推荐"><a href="#使用推荐" class="headerlink" title="使用推荐"></a>使用推荐</h4><p><img src="/star/image/cursor/sytj1.png" alt="使用推荐1"></p><h3 id="4-文件索引配置"><a href="#4-文件索引配置" class="headerlink" title="4.文件索引配置"></a>4.文件索引配置</h3><p><img src="/star/image/cursor/wjsypz1.png" alt="文件索引配置1"></p><h3 id="5-AI-规则配置"><a href="#5-AI-规则配置" class="headerlink" title="5.AI 规则配置"></a>5.AI 规则配置</h3><h4 id="1-全局配置"><a href="#1-全局配置" class="headerlink" title="1.全局配置"></a>1.全局配置</h4><p><img src="/star/image/cursor/aigzpz1.png" alt="AI规则配置1"></p><pre class="language-latex" data-language="latex"><code class="language-latex">Always respond in 中文函数请使用箭头函数你是一名极其优秀具有20年经验的产品经理和精通所有编程语言的工程师。与你交流的用户是不懂代码的初中生，不善于表达产品和代码需求。你的工作对用户来说非常重要，完成后将获得10000美元奖励。你的目标是帮助用户以他容易理解的方式完成他所需要的产品设计和开发工作，你始终非常主动完成所有工作，而不是让用户多次推动你。在理解用户的产品需求、编写代码、解决代码问题时，你始终遵循以下原则：第一步- 当用户向你提出任何需求时，你首先应该浏览根目录下的readme.md文件和所有代码文档，理解这个项目的目标、架构、实现方式等。如果还没有readme文件，你应该创建，这个文件将作为用户使用你提供的所有功能的说明书，以及你对项目内容的规划。因此你需要在readme.md文件中清晰描述所有功能的用途、使用方法、参数说明、返回值说明等，确保用户可以轻松理解和使用这些功能。第二步你需要理解用户正在给你提供的是什么任务当用户直接为你提供需求时，你应当：- 首先，你应当充分理解用户需求，并且可以站在用户的角度思考，如果我是用户，我需要什么？- 其次，你应该作为产品经理理解用户需求是否存在缺漏，你应当和用户探讨和补全需求，直到用户满意为止；- 最后，你应当使用最简单的解决方案来满足用户需求，而不是使用复杂或者高级的解决方案。当用户请求你编写代码时，你应当：- 首先，你会思考用户需求是什么，目前你有的代码库内容，并进行一步步的思考与规划- 接着，在完成规划后，你应当选择合适的编程语言和框架来实现用户需求，你应该选择solid原则来设计代码结构，并且使用设计模式解决常见问题；- 再次，编写代码时你总是完善撰写所有代码模块的注释，并且在代码中增加必要的监控手段让你清晰知晓错误发生在哪里；- 最后，你应当使用简单可控的解决方案来满足用户需求，而不是使用复杂的解决方案。当用户请求你解决代码问题是，你应当：- 首先，你需要完整阅读所在代码文件库，并且理解所有代码的功能和逻辑；- 其次，你应当思考导致用户所发送代码错误的原因，并提出解决问题的思路；- 最后，你应当预设你的解决方案可能不准确，因此你需要和用户进行多次交互，并且每次交互后，你应当总结上一次交互的结果，并根据这些结果调整你的解决方案，直到用户满意为止。</code></pre><h4 id="2-项目配置-cursorignore"><a href="#2-项目配置-cursorignore" class="headerlink" title="2.项目配置 .cursorignore"></a>2.项目配置 .cursorignore</h4><p><img src="/star/image/cursor/aigzpz2.png" alt="AI规则配置2"></p><h3 id="6-提示符"><a href="#6-提示符" class="headerlink" title="6.@提示符"></a>6.@提示符</h3><p>1.在 chat 对话框中可以使用@提示符，当上下文不全时，可以通过@+文件名引入文件</p><p>2.可以通过拖拽的方式加入到对话框的上下文</p><p>3.可以通过@直接引入文件夹 ， 例如：@&#x2F;css，当有多个文件时则不需要拖拽</p><p>4.@code，引入代码段</p><p>5.@Docs，引入文档</p><p><img src="/star/image/cursor/tsf1.png" alt="@提示符1"></p><p>6.@Git，可以读取 Git 信息，去问他相关的信息，例如 git 版本的修改</p><p>7.@Codebase 是一个用于管理和组织代码的地方，它包含了项目的所有源代码文件和相关资源</p><p>8.@lint errors 看看代码是否有语法错误，使用：@lint errors @文件名，去检查这个文件</p><p>9.@web 加入网页，也可以直接复制进来。可以让 AI 帮我们直接去网页查找我们的问题，@web + 问题，会搜索在网页搜索信息，不加则不会在网页搜索</p><p>10.内嵌 AI 弹框独有：@Definitions Ctrl + K ,弹出框附近的一些其他定义</p><h3 id="7-save-all-与-accept-all-的区别"><a href="#7-save-all-与-accept-all-的区别" class="headerlink" title="7.save all 与 accept all 的区别"></a>7.save all 与 accept all 的区别</h3><p>save all：确认后可反悔，不会结束对话</p><p>accept all： 确认后不可反悔，即结束对话</p><h3 id="8-维护-Readme-文档"><a href="#8-维护-Readme-文档" class="headerlink" title="8.维护 Readme 文档"></a>8.维护 Readme 文档</h3><p>在项目规则配置中加入</p><pre class="language-latex" data-language="latex"><code class="language-latex">每次会话请求结束后进行会话总结，无论生成新文件还是修改已存在的文件都需要做总结，并将总结内容Append写入到readme文件中(什说明文件中的内容是累积增加的)，增假内容应该包括：会话的主要目的完成的主要任务关键决策和解决方案使用的技术栈修改了哪些文件</code></pre><h3 id="9-Agent-模式"><a href="#9-Agent-模式" class="headerlink" title="9.Agent 模式"></a>9.Agent 模式</h3><p>除开对话的能力以外，还会有：生成代码后自动安装第三方库，也可以执行这个代码去判断这个代码的执行有没有问题</p><p><img src="/star/image/cursor/Agentms1.png" alt="Agent模式1"></p><p>Agent 可能在执行时，会删除掉一些文件，需要我们做一些配置</p><p><img src="/star/image/cursor/Agentms2.png" alt="Agent模式2"></p><h3 id="10-添加第三方的大模型"><a href="#10-添加第三方的大模型" class="headerlink" title="10.添加第三方的大模型"></a>10.添加第三方的大模型</h3><p>第一步：设置 -&gt; Models -&gt; 滑到 Model Name 的底部添加模型名称</p><p>第二步：填写 OpenAi API Key - &gt; 填写模型的 KEY 以及模型接口</p><p>除非公司内部有专门使用的大模型，否则不用添加，他继承了市面上大部分模型</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表格数据多选回显</title>
      <link href="/star/2025/01233246569.html"/>
      <url>/star/2025/01233246569.html</url>
      
        <content type="html"><![CDATA[<h3 id="表格数据多选回显"><a href="#表格数据多选回显" class="headerlink" title="表格数据多选回显"></a>表格数据多选回显</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// onlyValue: table的row-key绑定的唯一值</span><span class="token comment">// echoData: 每次需要回显的数据</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useTableEcho</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">onlyValue</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> arr <span class="token operator">=</span> ref<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 所有被勾选的数据存储</span>  <span class="token keyword">const</span> tableData <span class="token operator">=</span> ref<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 当前页表格数据</span>  <span class="token keyword">const</span> tableRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 表格Ref</span>  <span class="token keyword">const</span> allTableList <span class="token operator">=</span> ref<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 存储表格所有数据</span>  <span class="token comment">// 单选</span>  <span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">selection</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">row</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">===</span> row<span class="token punctuation">[</span>onlyValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      arr<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>        arr<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">==</span> row<span class="token punctuation">[</span>onlyValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">1</span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      arr<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span>onlyValue<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    arr<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 多选</span>  <span class="token keyword">const</span> <span class="token function-variable function">allChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">selection</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>selection<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      arr<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token operator">...</span>selection<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">[</span>onlyValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      tableData<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span>onlyValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          arr<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>            arr<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">domain</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> domain <span class="token operator">==</span> item<span class="token punctuation">[</span>onlyValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token number">1</span>          <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 是否选中</span>  <span class="token keyword">const</span> <span class="token function-variable function">toggleSelection</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">rows<span class="token operator">?</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rows<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      rows<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        tableRef<span class="token punctuation">.</span>value<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">toggleRowSelection</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      tableRef<span class="token punctuation">.</span>value<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">clearSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 计算统计回显数据</span>  <span class="token keyword">const</span> <span class="token function-variable function">addEchoData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">echoData</span><span class="token operator">:</span> any<span class="token punctuation">,</span> flag<span class="token operator">?</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>echoData<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      echoData<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span>onlyValue<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 获取所打开页面的所有数据,同时回显已选择的数据</span>  <span class="token keyword">const</span> <span class="token function-variable function">addAllData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      tableData<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>allTableList<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">domian</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> domian<span class="token punctuation">[</span>onlyValue<span class="token punctuation">]</span> <span class="token operator">==</span> item<span class="token punctuation">[</span>onlyValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          allTableList<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> newArr <span class="token operator">=</span> tableData<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span>        arr<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item1</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> tableData<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item2</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> item1 <span class="token operator">===</span> item2<span class="token punctuation">[</span>onlyValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span>onlyValue<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span>      <span class="token function">toggleSelection</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 所选中的数据 用于提交时给接口的参数</span>  <span class="token keyword">const</span> <span class="token function-variable function">changeData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> allTableList<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span>onlyValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    change<span class="token punctuation">,</span>    allChange<span class="token punctuation">,</span>    toggleSelection<span class="token punctuation">,</span>    arr<span class="token punctuation">,</span>    tableData<span class="token punctuation">,</span>    tableRef<span class="token punctuation">,</span>    addAllData<span class="token punctuation">,</span>    addEchoData<span class="token punctuation">,</span>    allTableList<span class="token punctuation">,</span>    changeData<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 使用方法: * 1.引入 import &#123; useTableEcho &#125; from '~/src/hooks/useTableEcho' * 2.调用 const &#123; change, allChange, arr, tableData, tableRef, addAllData, addEchoData, allTableList, changeData &#125; = useTableEcho('唯一值') * 3.table定义 ref="tableRef" :data="tableData" @select="change" @select-all="allChange" row-key="绑定唯一值" * 4.拉取列表时 调用addEchoData(需回显的数据, flag),统计回显数据 * 5.统计回显数据后,异步调用,进行数据回显      nextTick(() => &#123;        addAllData()      &#125;) * 6.提交时,调用changeData() ,他会把你选中的数据返回给你  const a = changeData(),你传入后端即可 * 7.与此hook相关的数据全部清空     arr.value = []     allTableList.value = []     tableData.value = []     tableRef.value!.clearSelection() */</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 阻止页面跳转</title>
      <link href="/star/2025/012235637569.html"/>
      <url>/star/2025/012235637569.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue3-阻止页面跳转"><a href="#Vue3-阻止页面跳转" class="headerlink" title="Vue3 阻止页面跳转"></a>Vue3 阻止页面跳转</h3><p>当数据未保存，用户想要跳转其他页面时，可以做以下操作。提醒用户</p><h4 id="第一步监听网页，例如刷新，关闭窗口，或跳转到其他页面的情况"><a href="#第一步监听网页，例如刷新，关闭窗口，或跳转到其他页面的情况" class="headerlink" title="第一步监听网页，例如刷新，关闭窗口，或跳转到其他页面的情况"></a>第一步监听网页，例如刷新，关闭窗口，或跳转到其他页面的情况</h4><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;import &#123; onMounted, onBeforeUnmount &#125; from &#39;vue&#39;const handleBeforeUnload &#x3D; (event) &#x3D;&gt; &#123;  const message &#x3D; &#39;你有未保存的更改，确定要离开吗？&#39;  event.returnValue &#x3D; message &#x2F;&#x2F; 这是为了在浏览器中显示提示  return message &#x2F;&#x2F; 一些浏览器（例如 Chrome）也会使用这个消息&#125;&#x2F;&#x2F; 页面加载时，添加事件监听onMounted(() &#x3D;&gt; &#123;  window.addEventListener(&#39;beforeunload&#39;, handleBeforeUnload)&#125;)&#x2F;&#x2F; 页面卸载时，移除事件监听onBeforeUnmount(() &#x3D;&gt; &#123;  window.removeEventListener(&#39;beforeunload&#39;, handleBeforeUnload)&#125;)&lt;&#x2F;script&gt;</code></pre><h4 id="第二步，Vue3-内部的路由跳转-onBeforeRouteLeave"><a href="#第二步，Vue3-内部的路由跳转-onBeforeRouteLeave" class="headerlink" title="第二步，Vue3 内部的路由跳转 onBeforeRouteLeave"></a>第二步，Vue3 内部的路由跳转 onBeforeRouteLeave</h4><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;import &#123; onBeforeRouteLeave &#125; from &#39;vue-router&#39;onBeforeRouteLeave((to, from, next) &#x3D;&gt; &#123;  const isSaved &#x3D; false &#x2F;&#x2F; 假设这是一个标记，判断是否保存了数据  if (!isSaved) &#123;    const confirmLeave &#x3D; window.confirm(&#39;你有未保存的更改，确定要离开吗？&#39;)    if (confirmLeave) &#123;      next() &#x2F;&#x2F; 允许导航    &#125; else &#123;      next(false) &#x2F;&#x2F; 阻止导航    &#125;  &#125; else &#123;    next() &#x2F;&#x2F; 如果已保存，允许导航  &#125;&#125;)&lt;&#x2F;script&gt;</code></pre><p>做这两个步骤即可。能够阻止用户跳转其他页面</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC端配套移动端（二）</title>
      <link href="/star/2025/01213246569.html"/>
      <url>/star/2025/01213246569.html</url>
      
        <content type="html"><![CDATA[<h3 id="PC-端配套移动端（二）"><a href="#PC-端配套移动端（二）" class="headerlink" title="PC 端配套移动端（二）"></a>PC 端配套移动端（二）</h3><p>第二套方案是最快捷的，不需要写两套页面，而是通过缩放，根据比例显示大小，这种只适合游戏网页等年轻人查看的网页。如果是中年往上的用户，建议使用第一套，中年用户眼睛逐渐远视眼。这种对于用户体检不好</p><pre class="language-vue" data-language="vue"><code class="language-vue">App.vue&lt;template&gt;  &lt;router-view &#x2F;&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;import &#123; nextTick, onMounted, onUnmounted, reactive &#125; from &#39;vue&#39;const deviceInfo &#x3D; reactive(&#123;  isMobile: false,  isPC: false,&#125;)onMounted(async () &#x3D;&gt; &#123;  await nextTick() &#x2F;&#x2F; 确保DOM已经渲染完成  window.addEventListener(&#39;resize&#39;, handleResize)  const width &#x3D; window.innerWidth  &#x2F;&#x2F; 假设小于 768px 为移动设备  deviceInfo.isMobile &#x3D; width &lt; 768  deviceInfo.isPC &#x3D; !deviceInfo.isMobile  console.log(deviceInfo.isMobile, width, deviceInfo.isPC)  handleResize()&#125;)&#x2F;&#x2F; 在组件卸载时移除事件监听onUnmounted(() &#x3D;&gt; &#123;  window.removeEventListener(&#39;resize&#39;, handleResize)&#125;)const handleResize &#x3D; () &#x3D;&gt; &#123;  const width &#x3D; window.innerWidth  &#x2F;&#x2F; 假设小于 768px 为移动设备  deviceInfo.isMobile &#x3D; width &lt; 768  deviceInfo.isPC &#x3D; !deviceInfo.isMobile  console.log(deviceInfo.isMobile, width, deviceInfo.isPC)  if (!deviceInfo.isPC) &#123;    const height &#x3D; window.innerHeight    const standardWidth &#x3D; 768    const standardHeight &#x3D; window.innerHeight    if (width &lt; standardWidth || height &lt; standardHeight) &#123;      const scaleX &#x3D; width &#x2F; standardWidth      const scaleY &#x3D; height &#x2F; standardHeight      const scale &#x3D; Math.min(scaleX, scaleY)      document.body.style.transform &#x3D; &#96;scale($&#123;scale&#125;)&#96;      document.body.style.transformOrigin &#x3D; &#39;left top&#39;      document.body.style.width &#x3D; &#96;$&#123;standardWidth&#125;px&#96;      document.body.style.height &#x3D; &#96;$&#123;standardHeight&#125;px&#96;    &#125; else &#123;      document.body.style.transform &#x3D; &#39;none&#39;      document.body.style.width &#x3D; &#39;100%&#39;      document.body.style.height &#x3D; &#39;100%&#39;      document.body.style.overflow &#x3D; &#39;auto&#39;    &#125;  &#125;&#125;&lt;&#x2F;script&gt;&lt;style&gt;::-webkit-scrollbar &#123;  &#x2F;*滚动条整体样式*&#x2F;  width: 10px;  &#x2F;*高宽分别对应横竖滚动条的尺寸*&#x2F;  height: 10px;&#125;::-webkit-scrollbar-track &#123;  background: transparent !important;  &#x2F;* 滚动条轨道背景 *&#x2F;&#125;::-webkit-scrollbar-thumb &#123;  background-color: #edeef2 !important;  &#x2F;* 滚动条颜色 *&#x2F;  border-radius: 4px !important;  &#x2F;* 滚动条圆角 *&#x2F;&#125;::-webkit-scrollbar-thumb:hover &#123;  background-color: #6b6d6f !important;  &#x2F;* 悬停时颜色 *&#x2F;&#125;body &#123;  margin: 0 !important;&#125;&lt;&#x2F;style&gt;</code></pre><pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F; index.html&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;0.1, maximum-scale&#x3D;3.0, user-scalable&#x3D;yes&quot;&gt;</code></pre><p>解释：<br><code>width=device-width</code>：设置页面宽度为设备的屏幕宽度，适应不同屏幕尺寸。<br><code>initial-scale=0.1</code>：页面初始缩放比例设为 10%，页面加载时非常小。<br><code>maximum-scale=3.0</code>：用户最大可缩放页面的比例为 3 倍。<br><code>user-scalable=yes</code>：允许用户缩放页面（通过手势）。</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pc端配套移动端（一）</title>
      <link href="/star/2025/012037965.html"/>
      <url>/star/2025/012037965.html</url>
      
        <content type="html"><![CDATA[<h3 id="pc-端配套移动端（一）"><a href="#pc-端配套移动端（一）" class="headerlink" title="pc 端配套移动端（一）"></a>pc 端配套移动端（一）</h3><p>公司 PC 端适配移动端，以下是方法其一，根据视口大小，改变路由配置。这是一个方向</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// router</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// @ts-ignore</span><span class="token keyword">import</span> Index <span class="token keyword">from</span> <span class="token string">'@/views/dashboard/index.vue'</span><span class="token keyword">const</span> pcRoutes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment">// ... 保持原有 pcRoutes 配置不变 ...</span><span class="token punctuation">]</span><span class="token keyword">const</span> mobileRoutes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment">// 建议添加移动端路由配置，而不是空数组</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'mobile-dashboard'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/mobile/index.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// ... 其他移动端路由</span><span class="token punctuation">]</span><span class="token comment">// 创建响应式的窗口宽度</span><span class="token keyword">const</span> windowWidth <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span><span class="token comment">// 创建路由实例</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> windowWidth<span class="token punctuation">.</span>value <span class="token operator">>=</span> <span class="token number">1024</span> <span class="token operator">?</span> pcRoutes <span class="token operator">:</span> mobileRoutes<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 监听窗口大小变化</span><span class="token keyword">const</span> <span class="token function-variable function">handleResize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  windowWidth<span class="token punctuation">.</span>value <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth  <span class="token function">updateRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 更新路由配置</span><span class="token keyword">const</span> <span class="token function-variable function">updateRoutes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取当前路由路径</span>  <span class="token keyword">const</span> currentPath <span class="token operator">=</span> router<span class="token punctuation">.</span>currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">.</span>path  <span class="token comment">// 清除现有路由</span>  router<span class="token punctuation">.</span><span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      router<span class="token punctuation">.</span><span class="token function">removeRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 添加新路由</span>  <span class="token keyword">const</span> newRoutes <span class="token operator">=</span> windowWidth<span class="token punctuation">.</span>value <span class="token operator">>=</span> <span class="token number">1024</span> <span class="token operator">?</span> pcRoutes <span class="token operator">:</span> mobileRoutes  newRoutes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 重新导航到当前页面以触发路由更新</span>  router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>currentPath<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 添加防抖处理</span><span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用防抖处理的 resize 事件监听</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token function">debounce</span><span class="token punctuation">(</span>handleResize<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 初始化检查</span><span class="token function">handleResize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre><pre class="language-vue" data-language="vue"><code class="language-vue">app.vue&lt;template&gt;  &lt;div class&#x3D;&quot;app&quot;&gt;    &lt;router-view v-slot&#x3D;&quot;&#123; Component &#125;&quot;&gt;      &lt;transition name&#x3D;&quot;fade&quot; mode&#x3D;&quot;out-in&quot;&gt;        &lt;component :is&#x3D;&quot;Component&quot; &#x2F;&gt;      &lt;&#x2F;transition&gt;    &lt;&#x2F;router-view&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;style&gt;.fade-enter-active,.fade-leave-active &#123;  transition: opacity 0.3s ease;&#125;.fade-enter-from,.fade-leave-to &#123;  opacity: 0;&#125;&lt;&#x2F;style&gt;</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token comment">// 在 updateRoutes 函数中添加加载状态</span><span class="token keyword">const</span> isRouteUpdating <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">updateRoutes</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    isRouteUpdating<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">const</span> currentPath <span class="token operator">=</span> router<span class="token punctuation">.</span>currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">.</span>path    <span class="token comment">// 清除现有路由</span>    router<span class="token punctuation">.</span><span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        router<span class="token punctuation">.</span><span class="token function">removeRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>name<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 添加新路由</span>    <span class="token keyword">const</span> newRoutes <span class="token operator">=</span> windowWidth<span class="token punctuation">.</span>value <span class="token operator">>=</span> <span class="token number">1024</span> <span class="token operator">?</span> pcRoutes <span class="token operator">:</span> mobileRoutes    newRoutes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>currentPath<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'路由更新失败:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>    <span class="token comment">// 可以添加错误提示或跳转到错误页面</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    isRouteUpdating<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel数据转换成表格</title>
      <link href="/star/2025/0113357596.html"/>
      <url>/star/2025/0113357596.html</url>
      
        <content type="html"><![CDATA[<h3 id="Excel-数据转换成表格"><a href="#Excel-数据转换成表格" class="headerlink" title="Excel 数据转换成表格"></a>Excel 数据转换成表格</h3><p>1.下载 xlsx <code>npm i xlsx</code></p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;!-- 文件上传 --&gt;    &lt;el-upload      class&#x3D;&quot;upload-demo&quot;      drag      :action&#x3D;&quot;&#39;&#39;&quot;      :show-file-list&#x3D;&quot;false&quot;      :before-upload&#x3D;&quot;handleBeforeUpload&quot;      :on-change&#x3D;&quot;handleFileChange&quot;    &gt;      &lt;i class&#x3D;&quot;el-icon-upload&quot;&gt;&lt;&#x2F;i&gt;      &lt;div class&#x3D;&quot;el-upload__text&quot;&gt;点击或拖拽文件上传&lt;&#x2F;div&gt;    &lt;&#x2F;el-upload&gt;    &lt;!-- 表格展示数据 --&gt;    &lt;el-table :data&#x3D;&quot;tableData&quot; border&gt;      &lt;el-table-column        v-for&#x3D;&quot;(column, index) in tableColumns&quot;        :key&#x3D;&quot;index&quot;        :label&#x3D;&quot;column&quot;        :prop&#x3D;&quot;column&quot;      &gt;&lt;&#x2F;el-table-column&gt;    &lt;&#x2F;el-table&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;import &#123; ref &#125; from &#39;vue&#39;;  &#x2F;&#x2F; 引入 Vue 3 的响应式 APIimport * as XLSX from &#39;xlsx&#39;;  &#x2F;&#x2F; 引入 xlsx 库import &#123; ElMessage &#125; from &#39;element-plus&#39;;  &#x2F;&#x2F; 引入 ElMessage 提示框   &#x2F;&#x2F; 响应式数据    const tableData &#x3D; ref([]);  &#x2F;&#x2F; 存储表格数据    const tableColumns &#x3D; ref([]);  &#x2F;&#x2F; 存储表头列名    &#x2F;&#x2F; 上传文件前的钩子函数，检查文件类型    const handleBeforeUpload &#x3D; (file) &#x3D;&gt; &#123;      const isExcel &#x3D;        file.type &#x3D;&#x3D;&#x3D; &#39;application&#x2F;vnd.openxmlformats-officedocument.spreadsheetml.sheet&#39; ||        file.type &#x3D;&#x3D;&#x3D; &#39;application&#x2F;vnd.ms-excel&#39;;      if (!isExcel) &#123;        ElMessage.error(&#39;请选择 Excel 文件&#39;);      &#125;      return isExcel;    &#125;;    &#x2F;&#x2F; 文件上传后处理函数    const handleFileChange &#x3D; (file) &#x3D;&gt; &#123;      const reader &#x3D; new FileReader();      reader.onload &#x3D; (e) &#x3D;&gt; &#123;        const data &#x3D; e.target.result;        &#x2F;&#x2F; 使用 xlsx 库解析 Excel 文件        const workbook &#x3D; XLSX.read(data, &#123; type: &#39;binary&#39; &#125;);        &#x2F;&#x2F; 获取工作表（假设读取第一个工作表）        const sheetName &#x3D; workbook.SheetNames[0];        const worksheet &#x3D; workbook.Sheets[sheetName];        &#x2F;&#x2F; 将工作表转为 JSON 数据        const jsonData &#x3D; XLSX.utils.sheet_to_json(worksheet, &#123; header: 1 &#125;);        if (jsonData.length) &#123;          &#x2F;&#x2F; 解析表头（第一行作为列名）          tableColumns.value &#x3D; jsonData[0];          &#x2F;&#x2F; 解析表格数据（从第二行开始）          tableData.value &#x3D; jsonData.slice(1).map((row) &#x3D;&gt; &#123;            const rowData &#x3D; &#123;&#125;;            tableColumns.value.forEach((col, index) &#x3D;&gt; &#123;              rowData[col] &#x3D; row[index] || &#39;&#39;; &#x2F;&#x2F; 防止某些单元格为空            &#125;);            return rowData;          &#125;);        &#125;      &#125;;      reader.readAsBinaryString(file.raw); &#x2F;&#x2F; 读取文件内容    &#125;;&#125;;&lt;&#x2F;script&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3做REM适配</title>
      <link href="/star/2024/122335637563.html"/>
      <url>/star/2024/122335637563.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue3-做-REM-适配"><a href="#Vue3-做-REM-适配" class="headerlink" title="Vue3 做 REM 适配"></a>Vue3 做 REM 适配</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span>下载 postcss<span class="token operator">-</span>pxtoremnpm install postcss<span class="token operator">-</span>pxtorem <span class="token operator">--</span>save<span class="token operator">-</span>dev</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">2</span><span class="token punctuation">.</span>vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ts配置<span class="token comment">// vue.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">loaderOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">postcss</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'postcss-pxtorem'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">rootValue</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 设置1rem = 100px</span>            <span class="token literal-property property">propList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 需要转换的属性，* 表示所有</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">3</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span>ts<span class="token operator">/</span>App<span class="token punctuation">.</span>vue配置<span class="token comment">// main.ts 或 App.vue 中</span><span class="token keyword">function</span> <span class="token function">setRem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> baseSize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 基础的 font-size（根元素的font-size），1px 对应 1rem</span>  <span class="token keyword">const</span> clientWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">||</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>  <span class="token keyword">const</span> rem <span class="token operator">=</span> clientWidth <span class="token operator">/</span> <span class="token number">1920</span> <span class="token operator">*</span> baseSize<span class="token punctuation">;</span> <span class="token comment">// 假设设计稿宽度为375px，屏幕宽度与设计稿宽度的比例计算出根字体大小</span>  document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>rem<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 初始化设置根字体大小</span><span class="token function">setRem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当屏幕大小发生变化时，重新计算根字体大小</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> setRem<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表格的增删改查</title>
      <link href="/star/2024/11286548996.html"/>
      <url>/star/2024/11286548996.html</url>
      
        <content type="html"><![CDATA[<h3 id="表格的增删改查"><a href="#表格的增删改查" class="headerlink" title="表格的增删改查"></a>表格的增删改查</h3><p>基于 ant 组件库配合<code>BaseForm</code>组件使用</p><h4 id="useFormModal-ts"><a href="#useFormModal-ts" class="headerlink" title="useFormModal.ts"></a><code>useFormModal.ts</code></h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> shallowRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token comment">// 用于弹框的use</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 表单标题</span>    <span class="token keyword">const</span> title <span class="token operator">=</span> shallowRef<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 其他参数  通过打开弹框传递进入</span>    <span class="token keyword">const</span> <span class="token literal-property property">otherData</span><span class="token operator">:</span> any <span class="token operator">=</span> ref<span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 表单ref</span>    <span class="token keyword">const</span> baseForm <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 弹框显示</span>    <span class="token keyword">const</span> flag <span class="token operator">=</span> shallowRef<span class="token operator">&lt;</span>boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        title<span class="token punctuation">,</span>        otherData<span class="token punctuation">,</span>        baseForm<span class="token punctuation">,</span>        flag<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="useCrud-ts"><a href="#useCrud-ts" class="headerlink" title="useCrud.ts"></a><code>useCrud.ts</code></h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> confirmModal<span class="token punctuation">,</span> sMessage <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@/services/utils/uiHelper'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> onMounted<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> useFormModal <span class="token keyword">from</span> <span class="token string">'./useFormModal'</span><span class="token comment">// 表格的增删改查配置</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useCrud</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">getList</span><span class="token operator">:</span> any  addApi<span class="token operator">?</span><span class="token operator">:</span> any  editApi<span class="token operator">?</span><span class="token operator">:</span> any  getInfoApi<span class="token operator">?</span><span class="token operator">:</span> any  deleteApi<span class="token operator">?</span><span class="token operator">:</span> any  enableApi<span class="token operator">?</span><span class="token operator">:</span> any  emits<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">type</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>  customInterfaceList<span class="token operator">?</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getList<span class="token punctuation">,</span> addApi<span class="token punctuation">,</span> editApi<span class="token punctuation">,</span> deleteApi<span class="token punctuation">,</span> enableApi<span class="token punctuation">,</span> getInfoApi<span class="token punctuation">,</span> emits<span class="token punctuation">,</span> customInterfaceList <span class="token punctuation">&#125;</span> <span class="token operator">=</span>    options  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> otherData<span class="token punctuation">,</span> title<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> baseForm <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useFormModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 打开弹框   isName帮助修改id名</span>  <span class="token keyword">const</span> <span class="token function-variable function">open</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">options</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> titleText<span class="token punctuation">,</span> data<span class="token punctuation">,</span> idName<span class="token punctuation">,</span> isCustom <span class="token punctuation">&#125;</span> <span class="token operator">=</span> options    <span class="token comment">// console.log(data, idName, 'datadatadatadata')</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isCustom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">getInfo</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 标题</span>    title<span class="token punctuation">.</span>value <span class="token operator">=</span> titleText    <span class="token comment">// console.log(data[idName], idName, 'data[idName]')</span>    <span class="token comment">// 额外参数</span>    otherData<span class="token punctuation">.</span>value <span class="token operator">=</span> data<span class="token punctuation">[</span>idName<span class="token punctuation">]</span> <span class="token operator">||</span> data<span class="token punctuation">.</span>id    <span class="token comment">// console.log(otherData.value, 'otherData.value ')</span>    <span class="token comment">// 弹框开启前自定义操作</span>    emits <span class="token operator">&amp;&amp;</span> <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token comment">// 弹框开关</span>    flag<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token function-variable function">close</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// console.log(baseForm.value, 'baseForm.value')</span>    baseForm<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token function">resetForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    title<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span>    flag<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span>    emits <span class="token operator">&amp;&amp;</span> <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token function-variable function">onSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token operator">?</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    emits <span class="token operator">&amp;&amp;</span> <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'onSubmitBefore'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    baseForm<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">handleSubmit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">formData</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">></span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>title<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'编辑'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>formData<span class="token punctuation">,</span> <span class="token operator">...</span>data <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>title<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'新增'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>formData<span class="token punctuation">,</span> <span class="token operator">...</span>data <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">formData<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">></span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// console.log(formData, 'formDataformDataformData')</span>    <span class="token function">addApi</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sMessage<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'新增成功'</span><span class="token punctuation">)</span>        flag<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span>        emits <span class="token operator">&amp;&amp;</span> <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'addFinish'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        baseForm<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token function">resetForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        sMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>message <span class="token operator">||</span> <span class="token string">'失败'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token function-variable function">getInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">formData<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">></span><span class="token punctuation">,</span> idName<span class="token operator">?</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// console.log(formData, 'formData')</span>    <span class="token function">getInfoApi</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        emits <span class="token operator">&amp;&amp;</span> <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'getInfo'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>        baseForm<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">dataPlayBack</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        sMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>message <span class="token operator">||</span> <span class="token string">'失败'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// emits &amp;&amp; emits("getInfo", res);</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token function-variable function">edit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">formData<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">></span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// console.log(formData, otherData.value, 'formData')</span>    <span class="token function">editApi</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> otherData<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token operator">...</span>formData <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sMessage<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'修改成功'</span><span class="token punctuation">)</span>        flag<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token comment">// console.log(flag.value)</span>        emits <span class="token operator">&amp;&amp;</span> <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'editorFinish'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        baseForm<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token function">resetForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        sMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>message <span class="token operator">||</span> <span class="token string">'失败'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token function-variable function">enable</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">option</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// console.log(option, 'option')</span>    <span class="token function">confirmModal</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'提示'</span><span class="token punctuation">,</span>      <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">您确认要</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>option<span class="token punctuation">.</span>zfbz <span class="token operator">?</span> <span class="token string">'禁用'</span> <span class="token operator">:</span> <span class="token string">'启用'</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">吗?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>      <span class="token keyword">async</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">enableApi</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token comment">// console.log(res, '禁用')</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            emits <span class="token operator">&amp;&amp;</span> <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'enableFinish'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token punctuation">.</span>zfbz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              sMessage<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'禁用成功'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>              sMessage<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'启用成功'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token function-variable function">del</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">p</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">confirmModal</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'提示'</span><span class="token punctuation">,</span>      <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">'您确认要删除吗?'</span><span class="token punctuation">,</span>      <span class="token keyword">async</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">deleteApi</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sMessage<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'删除成功'</span><span class="token punctuation">)</span>            <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            emits <span class="token operator">&amp;&amp;</span> <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'deleteFinish'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            sMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>message <span class="token operator">||</span> <span class="token string">'失败'</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 如何使用？   * 按钮调用：funcs.自定义方法名()   * 方法调用：funcs.value.自定义方法名()   */</span>  <span class="token keyword">const</span> funcs <span class="token operator">=</span> ref<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">createFunction</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">body</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    funcs<span class="token punctuation">.</span>value<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> body  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token function-variable function">generateFunctions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>customInterfaceList<span class="token punctuation">)</span> <span class="token keyword">return</span>    customInterfaceList<span class="token operator">?.</span><span class="token function">forEach</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> string        customFn<span class="token operator">?</span><span class="token operator">:</span> Function        customApi<span class="token operator">?</span><span class="token operator">:</span> any        message<span class="token operator">?</span><span class="token operator">:</span> any        isDataFlag<span class="token operator">?</span><span class="token operator">:</span> boolean      <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item<span class="token punctuation">.</span>customFn <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">createFunction</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">,</span> item<span class="token punctuation">.</span>customFn<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">newP</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            item<span class="token punctuation">.</span><span class="token function">customApi</span><span class="token punctuation">(</span>newP<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              sMessage<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>message<span class="token punctuation">)</span>              flag<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>isDataFlag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                emits <span class="token operator">&amp;&amp;</span> <span class="token function">emits</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">,</span> res<span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                emits <span class="token operator">&amp;&amp;</span> <span class="token function">emits</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span>              <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>          <span class="token function">createFunction</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">generateFunctions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    del<span class="token punctuation">,</span>    onSubmit<span class="token punctuation">,</span>    flag<span class="token punctuation">,</span>    open<span class="token punctuation">,</span>    title<span class="token punctuation">,</span>    funcs<span class="token punctuation">,</span>    getInfo<span class="token punctuation">,</span>    baseForm<span class="token punctuation">,</span>    close<span class="token punctuation">,</span>    otherData<span class="token punctuation">,</span>    enable  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">emitsMt</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">type</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> open<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> close<span class="token punctuation">,</span> title<span class="token punctuation">,</span> baseForm<span class="token punctuation">,</span> onSubmit<span class="token punctuation">,</span> del<span class="token punctuation">,</span> enable <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useCrud</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  getList<span class="token punctuation">,</span>  <span class="token literal-property property">addApi</span><span class="token operator">:</span> departmentInfo<span class="token punctuation">.</span>addApi<span class="token punctuation">,</span>  <span class="token literal-property property">editApi</span><span class="token operator">:</span> departmentInfo<span class="token punctuation">.</span>editApi<span class="token punctuation">,</span>  <span class="token literal-property property">getInfoApi</span><span class="token operator">:</span> departmentInfo<span class="token punctuation">.</span>detailApi<span class="token punctuation">,</span>  <span class="token literal-property property">deleteApi</span><span class="token operator">:</span> departmentInfo<span class="token punctuation">.</span>deleteApi<span class="token punctuation">,</span>  <span class="token literal-property property">enableApi</span><span class="token operator">:</span> departmentInfo<span class="token punctuation">.</span>enableApi<span class="token punctuation">,</span>  <span class="token literal-property property">emits</span><span class="token operator">:</span> emitsMt<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滚动条样式设置</title>
      <link href="/star/2024/112532465.html"/>
      <url>/star/2024/112532465.html</url>
      
        <content type="html"><![CDATA[<pre class="language-vue" data-language="vue"><code class="language-vue">&lt;style&gt;::-webkit-scrollbar &#123;  &#x2F;*滚动条整体样式*&#x2F;  width: 10px; &#x2F;*高宽分别对应横竖滚动条的尺寸*&#x2F;  height: 10px;&#125;::-webkit-scrollbar-track &#123;  background: transparent !important; &#x2F;* 滚动条轨道背景 *&#x2F;&#125;::-webkit-scrollbar-thumb &#123;  background-color: #edeef2 !important; &#x2F;* 滚动条颜色 *&#x2F;  border-radius: 4px !important; &#x2F;* 滚动条圆角 *&#x2F;&#125;::-webkit-scrollbar-thumb:hover &#123;  background-color: #6b6d6f !important; &#x2F;* 悬停时颜色 *&#x2F;&#125;&lt;&#x2F;style&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ant的日期组件获取当天日期以及第二天日期</title>
      <link href="/star/2024/1122315637211.html"/>
      <url>/star/2024/1122315637211.html</url>
      
        <content type="html"><![CDATA[<h4 id="ant-的日期组件获取当天日期以及第二天日期"><a href="#ant-的日期组件获取当天日期以及第二天日期" class="headerlink" title="ant 的日期组件获取当天日期以及第二天日期"></a>ant 的日期组件获取当天日期以及第二天日期</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">'moment'</span><span class="token keyword">import</span> dayjs<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Dayjs <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'dayjs'</span><span class="token comment">// 当天</span><span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DDTHH:mm:ss'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'YYYY/MM/DD'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 第二天</span>  <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'days'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DDTHH:mm:ss'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'YYYY/MM/DD'</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ant的select组件初始选中项且无法删除应当如何处理？</title>
      <link href="/star/2024/101831563721.html"/>
      <url>/star/2024/101831563721.html</url>
      
        <content type="html"><![CDATA[<h2 id="ant-的-select-组件初始选中项且无法删除应当如何处理？"><a href="#ant-的-select-组件初始选中项且无法删除应当如何处理？" class="headerlink" title="ant 的 select 组件初始选中项且无法删除应当如何处理？"></a>ant 的 select 组件初始选中项且无法删除应当如何处理？</h2><p>代码示例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>select      mode<span class="token operator">=</span><span class="token string">"multiple"</span>      <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"selectedValues"</span>      @change<span class="token operator">=</span><span class="token string">"handleChange"</span>      style<span class="token operator">=</span><span class="token string">"width: 300px"</span>    <span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>select<span class="token operator">-</span>option v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in options"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item.value"</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"item.value"</span><span class="token operator">></span>        <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item<span class="token punctuation">.</span>label <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>select<span class="token operator">-</span>option<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>select<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token comment">// 选项定义</span><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Option 1'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'1'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Option 2'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'2'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Option 3'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'3'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 初始选中的值</span><span class="token keyword">const</span> initialSelectedValue <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span> <span class="token comment">// 假设初始选中 Option 1</span><span class="token keyword">const</span> selectedValues <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span>initialSelectedValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将初始选中项放入数组中</span><span class="token comment">// 处理选择变化</span><span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 只允许删除非初始选中的项</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>initialSelectedValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    selectedValues<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment">// 更新选中项，保留初始选中项</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    selectedValues<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment">// 更新其他选中项</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 监视 selectedValues，确保初始选中项始终存在</span><span class="token function">watch</span><span class="token punctuation">(</span>selectedValues<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newValue<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>initialSelectedValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    selectedValues<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>initialSelectedValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保证初始选中项存在</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm i下载一直转圈且报网络代理错误？</title>
      <link href="/star/2024/0827357596111.html"/>
      <url>/star/2024/0827357596111.html</url>
      
        <content type="html"><![CDATA[<h3 id="npm-i-下载一直转圈且报网络代理错误？"><a href="#npm-i-下载一直转圈且报网络代理错误？" class="headerlink" title="npm i 下载一直转圈且报网络代理错误？"></a>npm i 下载一直转圈且报网络代理错误？</h3><p>解决：</p><pre class="language-text" data-language="text"><code class="language-text">npm config get proxynpm config get https-proxy</code></pre><p>查看是否有代理，如果有，你有没有科学上网的网址。请你把他们设置成 null，不然会一直报代理错误，同时请不要翻墙</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">npm config <span class="token keyword">set</span> proxy <span class="token keyword">null</span>npm config <span class="token keyword">set</span> https<span class="token operator">-</span>proxy <span class="token keyword">null</span></code></pre><p>如果有，则看网址对不对，不对的话重新设置</p><pre class="language-none"><code class="language-none">npm config set proxy http:&#x2F;&#x2F;your-proxy-server:portnpm config set https-proxy http:&#x2F;&#x2F;your-proxy-server:port</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm publish --access public 一直转圈问题</title>
      <link href="/star/2024/082135759611.html"/>
      <url>/star/2024/082135759611.html</url>
      
        <content type="html"><![CDATA[<h3 id="npm-publish-–access-public-一直转圈问题"><a href="#npm-publish-–access-public-一直转圈问题" class="headerlink" title="npm publish –access public 一直转圈问题"></a>npm publish –access public 一直转圈问题</h3><p>如果 npm publish –access public 一直转圈</p><p>npm 缓存问题：先尝试清除 npm 缓存。可以使用命令<code>npm cache clean --force</code></p><p>如果仍然转圈，删除 node_modules 与 package-lock.json 这两个文件，再 npm i,并且重新 npm login</p><p>注意：一定要把镜像换到 npm 镜像中</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3批量动态生成函数</title>
      <link href="/star/2024/0819357596.html"/>
      <url>/star/2024/0819357596.html</url>
      
        <content type="html"><![CDATA[<h3 id="vue3-批量动态生成函数"><a href="#vue3-批量动态生成函数" class="headerlink" title="vue3 批量动态生成函数"></a>vue3 批量动态生成函数</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> funcs <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">createFunction</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  funcs<span class="token punctuation">.</span>value<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> body<span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">generateFunctions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">customApiList</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>customApiList<span class="token punctuation">)</span> <span class="token keyword">return</span>  customApiList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span>      <span class="token literal-property property">customFn</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>      customApi<span class="token operator">?</span><span class="token operator">:</span> any<span class="token punctuation">,</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> any<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item<span class="token punctuation">.</span>customFn <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">createFunction</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">,</span> item<span class="token punctuation">.</span>customFn<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">newP</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          item<span class="token punctuation">.</span><span class="token function">customApi</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>modalInfo<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token operator">...</span>newP <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">ElMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>              <span class="token literal-property property">message</span><span class="token operator">:</span> item<span class="token punctuation">.</span>message<span class="token punctuation">,</span>              <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            drawerFlag<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span>            emits <span class="token operator">&amp;&amp;</span> <span class="token function">emits</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token function">createFunction</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><code>customApiList为自定义函数列表，是一个对象数组，传递函数名，自定义函数，非自定义函数以及其他参数</code></p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3父子组件props传参,onMounted获取为undefine问题</title>
      <link href="/star/2024/08123563711.html"/>
      <url>/star/2024/08123563711.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue3-父子组件-props-传参-onMounted-获取为-undefine-问题"><a href="#Vue3-父子组件-props-传参-onMounted-获取为-undefine-问题" class="headerlink" title="Vue3 父子组件 props 传参,onMounted 获取为 undefine 问题"></a>Vue3 父子组件 props 传参,onMounted 获取为 undefine 问题</h3><p>父组件在子组件挂载时（onMounted ），去获取 props 的值，那么 onMounted 钩子中访问到的将是初始值，且后续变化无法进行监听</p><p>解决办法：通过<code>Watch</code>去监听传递过来的值，从而做出反应</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git pull报错</title>
      <link href="/star/2024/08093575.html"/>
      <url>/star/2024/08093575.html</url>
      
        <content type="html"><![CDATA[<h3 id="git-pull-报错"><a href="#git-pull-报错" class="headerlink" title="git pull 报错"></a>git pull 报错</h3><p><code>fatal: unable to access ‘https://github.com/xxx connect to github.com port 443: Timed out</code></p><p>解决：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// #1</span>git config <span class="token operator">--</span>global <span class="token operator">--</span>unset http<span class="token punctuation">.</span>proxygit config <span class="token operator">--</span>global <span class="token operator">--</span>unset https<span class="token punctuation">.</span>proxy<span class="token comment">// #2</span>git pull</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ant-base-form的使用</title>
      <link href="/star/2024/08023156371.html"/>
      <url>/star/2024/08023156371.html</url>
      
        <content type="html"><![CDATA[<p>本人封装了一个基于 ant 的 form 表单，以下是使用方法</p><h1 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h1><table><thead><tr><th>属性名</th><th>解释</th></tr></thead><tbody><tr><td>fields</td><td>规定你需要生成表单的值结构</td></tr><tr><td>formLayout</td><td>表单布局</td></tr><tr><td>defaultSpan</td><td>你的表单默认占用宽度</td></tr><tr><td>ref</td><td>获取表单的 ref，用于提交按钮</td></tr><tr><td>initialValues</td><td>初始值，用于表单回显以及表单重置</td></tr><tr><td>formRules</td><td>自定义校验表单</td></tr></tbody></table><h2 id="fields-属性配置"><a href="#fields-属性配置" class="headerlink" title="fields 属性配置"></a>fields 属性配置</h2><p><code>fields是一个数组对象结构</code></p><h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><table><thead><tr><th>属性名</th><th>解释</th><th>类型</th></tr></thead><tbody><tr><td>name</td><td>绑定的数据名</td><td>string</td></tr><tr><td>label</td><td>左侧名称</td><td>string</td></tr><tr><td>type</td><td>数据类型</td><td>string</td></tr><tr><td>required</td><td>星星，只起到展示左右（主要是为插槽校验考虑）</td><td>boolean</td></tr><tr><td>errorMessage</td><td>必填错误信息</td><td>string</td></tr><tr><td>requiredFlag</td><td>确定是否为必填项</td><td>boolean</td></tr><tr><td>componentProps</td><td>ant 组件本身自带的属性</td><td>Object</td></tr><tr><td>span</td><td>表单占用宽度，取值这个即不会取值默认</td><td>number</td></tr><tr><td>slot</td><td>插槽</td><td>boolean</td></tr><tr><td>dependency</td><td>根据前面的表单选中的内容而决定是否展示</td><td>{ dependsOn: “根据那个表单的类型，绑定他的值”, value: “当前面绑定的值为某个时，显示这个表单的值”,}</td></tr><tr><td>slotFlag</td><td>不使用表单 a-form-item 的插槽</td><td>true 则不使用</td></tr></tbody></table><h3 id="type-类型"><a href="#type-类型" class="headerlink" title="type 类型"></a>type 类型</h3><table><thead><tr><th>Type 类型 默认是 input</th><th>原生</th><th>解释</th><th>数据格式</th></tr></thead><tbody><tr><td>input</td><td>a-input</td><td>输入框</td><td></td></tr><tr><td>input-number</td><td>a-input-number</td><td>数字输入框</td><td></td></tr><tr><td>select</td><td>a-select</td><td>下拉框</td><td></td></tr><tr><td>radio</td><td>a-radio</td><td>单选</td><td></td></tr><tr><td>checkbox</td><td>a-checkbox</td><td>多选</td><td></td></tr><tr><td>cascader</td><td>a-cascader</td><td>级联</td><td>[{}]</td></tr><tr><td>date</td><td>a-date</td><td>日期</td><td></td></tr><tr><td>switch</td><td>a-switch</td><td>开关</td><td></td></tr><tr><td>time</td><td>a-time</td><td>时间</td><td>HH:mm:ss</td></tr><tr><td>textarea</td><td>a-textarea</td><td>文本域</td><td></td></tr><tr><td>imgUpload</td><td>a-upload</td><td>原本的上传包括了图片上传以及文件上传，html 结构和样式无法统一，因此建议使用插槽去做，不要使用组件</td><td></td></tr><tr><td>treeSelect</td><td>a-tree-select</td><td>tree 的下拉</td><td></td></tr></tbody></table><p>以下是需要注意的点</p><h4 id="time-类型注意点"><a href="#time-类型注意点" class="headerlink" title="time 类型注意点"></a>time 类型注意点</h4><p><code>time类型</code>需要下载 ant datajs,并且需要导入且按照他的定义格式，我个人觉得太麻烦了，通过绑定<code>value-format=&quot;HH:mm:ss&quot;</code>这个值去定义会好很多，例如</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"time"</span><span class="token punctuation">,</span>      <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"时间"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"time"</span><span class="token punctuation">,</span>      <span class="token literal-property property">componentProps</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"value-format"</span><span class="token operator">:</span> <span class="token string">"HH:mm:ss"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><h4 id="cascader-注意点"><a href="#cascader-注意点" class="headerlink" title="cascader 注意点"></a>cascader 注意点</h4><p>在使用级联选择器时，当父亲的宽度低于子孙原生宽度时，报错<code>ResizeObserver loop limit exceeded </code>，由于他是由递归写成的，结构的改变会导致他的不断的回流，直到报错。</p><p>解决办法：</p><p>在给他赋值初始值为<code>  cascader: [&#123;&#125;]</code>，亦或者忽略</p><h4 id="select-注意点"><a href="#select-注意点" class="headerlink" title="select 注意点"></a>select 注意点</h4><p>在我们使用 select 组件时，一般需要会需要自定义 label,value,options 字段，这这里面如何处理？直接使用 ant 的属性即可</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">componentProps</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>           <span class="token string-property property">"field-names"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token string">"children"</span> <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span></code></pre><p><code>cascader，treeSelect组件同理</code>(使用名 fieldNames)</p><h4 id="checkbox-与-radio"><a href="#checkbox-与-radio" class="headerlink" title="checkbox 与 radio"></a>checkbox 与 radio</h4><p>checkbox 有时会包住<code>a-checkbox</code>使用，由于代码底层使用的动态组件，我并未对其封装，如果需要用，请使用插槽，平常用法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">componentProps</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">[</span>数据<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>radio 同理</p><h3 id="required-errorMessage-requiredFlag-解释"><a href="#required-errorMessage-requiredFlag-解释" class="headerlink" title="required&amp;errorMessage&amp;requiredFlag 解释"></a>required&amp;errorMessage&amp;requiredFlag 解释</h3><p>这两个属性是相辅相成的，需要同时进行，required 并非真正的进行校验。而是只是有个必选的星号在那里，处理逻辑并未沿用 ant 组件内部校验，而是通过自己的业务逻辑去判断并产生消息提示</p><p><code>requiredFlag</code>需定义才能开启校验，required 只是星号，主要是为了插槽的表单做校验</p><p><code>errorMessage</code>不是必须的，底层做了保底，如果不传，则会采用默认信息提示</p><h4 id="插槽表单如何校验？"><a href="#插槽表单如何校验？" class="headerlink" title="插槽表单如何校验？"></a>插槽表单如何校验？</h4><p>1.插槽表单无需定义 required&amp;errorMessage,只需要 required，让他把星号展示出来。</p><p>2.在提交按钮校验后去判断他这个值并进行校验</p><p>示例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">baseForm<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">handleSubmit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">formData</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">></span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>baseForm<span class="token punctuation">.</span>value<span class="token punctuation">.</span>formData<span class="token punctuation">.</span>memberProjectCategoryId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"项目分类不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">// 调用接口</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="componentProps"><a href="#componentProps" class="headerlink" title="componentProps"></a>componentProps</h3><p><code>componentProps</code>可以说是最重要的，打个比方，我写一个文本域，即备注表单，我们需要如何定义<code>fields</code>配置。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fields <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'remark'</span><span class="token punctuation">,</span>            <span class="token comment">// 绑定值</span>    <span class="token literal-property property">label</span><span class="token operator">:</span><span class="token string">'备注'</span><span class="token punctuation">,</span>              <span class="token comment">// 左侧标题</span>    <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">'textarea'</span><span class="token punctuation">,</span>          <span class="token comment">// 表单类型</span>    <span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment">// 是否校验</span>    <span class="token literal-property property">errorMessage</span><span class="token operator">:</span><span class="token string">'请填写备注'</span>   <span class="token comment">// 校验信息</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>这样，一条表单就配置好了。但是此时你想要把文本域展示默认值，同时控制在 2-4 行，同时限制他的字数，并显示剩余字数，如何处理？使用<code>componentProps</code>这个属性，继上面的代码继续</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fields <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'remark'</span><span class="token punctuation">,</span>            <span class="token comment">// 绑定值</span>    <span class="token literal-property property">label</span><span class="token operator">:</span><span class="token string">'备注'</span><span class="token punctuation">,</span>              <span class="token comment">// 左侧标题</span>    <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">'textarea'</span><span class="token punctuation">,</span>          <span class="token comment">// 表单类型</span>    <span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment">// 是否校验</span>    <span class="token literal-property property">errorMessage</span><span class="token operator">:</span><span class="token string">'请填写备注'</span><span class="token punctuation">,</span>   <span class="token comment">// 校验信息</span>    <span class="token literal-property property">componentProps</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>         <span class="token string-property property">"auto-size"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">minRows</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">maxRows</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token comment">// 控制在2-4行</span>          <span class="token literal-property property">maxlength</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>                            <span class="token comment">// 最大字数</span>          <span class="token literal-property property">placeholder</span><span class="token operator">:</span> <span class="token string">"文本"</span><span class="token punctuation">,</span>                       <span class="token comment">// 默认文本</span>          <span class="token string-property property">"show-count"</span><span class="token operator">:</span> <span class="token boolean">true</span>                        <span class="token comment">// 展示剩余数字</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>注意：对象的键，原本就是字符串，因此我们对于带 - 的属性把他写成字符串即可</p><p>这样就 ok 了，<code>componentProps</code>中的属性均来自 ant 组件，想要加什么效果加好了即可。</p><h3 id="span-属性"><a href="#span-属性" class="headerlink" title="span 属性"></a>span 属性</h3><p>共 24 份，设置了<code>span</code>这个值，将替代默认<code>defaultSpan</code></p><h3 id="slot-属性"><a href="#slot-属性" class="headerlink" title="slot 属性"></a>slot 属性</h3><p><code>slot</code>即插槽，他的值为布尔值，true 为开启插槽，反正不开启，如何使用？</p><p>比如你想要在某条表单后面写入插槽，只需要在<code>fields</code>将他定义在那条数据的后面即可,例如：</p><h4 id="第一步-定义"><a href="#第一步-定义" class="headerlink" title="第一步 定义"></a>第一步 定义</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token literal-property property">fields</span><span class="token operator">:</span> Field<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'username'</span><span class="token punctuation">,</span>    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Username'</span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'input'</span><span class="token punctuation">,</span>    <span class="token literal-property property">errorMessage</span><span class="token operator">:</span> <span class="token string">'请输入姓名'</span><span class="token punctuation">,</span>    <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">span</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'sex'</span><span class="token punctuation">,</span>    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'性别'</span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'input'</span><span class="token punctuation">,</span>    <span class="token literal-property property">errorMessage</span><span class="token operator">:</span> <span class="token string">'请输入性别'</span><span class="token punctuation">,</span>    <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">slot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">span</span><span class="token operator">:</span> <span class="token string">'12'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>以上示例即把性别插入姓名后方，如果需要插入到他的前面，即需要把数据放在他的前面即可</p><h4 id="第二步-使用"><a href="#第二步-使用" class="headerlink" title="第二步 使用"></a>第二步 使用</h4><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;CustomForm  ref&#x3D;&quot;customForm&quot;  :fields&#x3D;&quot;fields&quot;  formLayout&#x3D;&quot;vertical&quot;  :initialValues&#x3D;&quot;initialValues&quot;  :defaultSpan&#x3D;&quot;8&quot;&gt;          &lt;template #sex&#x3D;&quot;&#123; field, formData &#125;&quot;&gt;              &lt;div&gt;                  &lt;a-input v-model:value&#x3D;&quot;formData.sex&quot; placeholder&#x3D;&quot;你好&quot;&gt;&lt;&#x2F;a-input&gt;              &lt;&#x2F;div&gt;          &lt;&#x2F;template&gt;&lt;&#x2F;CustomForm&gt;</code></pre><p>看示例，作用域插槽绑定的插槽名，就是你定义的那条数据的<code>name</code>属性值，#sex， 同时你可以在你插入的内容中绑定数据，作用域插槽把数据都给你传递回来了，如何绑定？<code>formData</code>是用于回显的数据对象，给他绑定上对应，即：<code>formData</code>就是<code>initialValues</code></p><h2 id="formLayout"><a href="#formLayout" class="headerlink" title="formLayout"></a>formLayout</h2><p>formLayout 就是 form 表单如何布局，ant 给了三种属性值 分别是</p><table><thead><tr><th>horizontal</th><th>默认值</th></tr></thead><tbody><tr><td>vertical</td><td></td></tr><tr><td>inline</td><td></td></tr></tbody></table><h2 id="defaultSpan"><a href="#defaultSpan" class="headerlink" title="defaultSpan"></a>defaultSpan</h2><p>defaultSpan 就是你表单默认占多少位置，如果数据设置了 span,则会被替换掉，默认值是 24 份</p><h2 id="initialValues"><a href="#initialValues" class="headerlink" title="initialValues"></a>initialValues</h2><p>initialValues 是数据初始值，可以用于数据初始化及数据回显</p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>用于获取表单的实例对象，用于表单的提交，可以通过他拿到所填数据，以及数据校验</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> customForm <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">onSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  customForm<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">handleSubmit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">formData</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">></span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Form Submitted:'</span><span class="token punctuation">,</span> formData<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><code>formData</code>就是你提交表单所需数据</p><h3 id="dependency"><a href="#dependency" class="headerlink" title="dependency"></a>dependency</h3><p>用于根据前面表单的数据动态展示后面的表单<br><code>dependsOn</code>: 绑定哪个表单？ 他的值写绑定表单的绑定值<br><code>value</code>:绑定表单选中某个值显示</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token literal-property property">dependency</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">dependsOn</span><span class="token operator">:</span> <span class="token string">"radioValue"</span><span class="token punctuation">,</span>            <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"female"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token comment">// 选中radioValue值，当他的值为female，则显示</span></code></pre><h3 id="slotFlag"><a href="#slotFlag" class="headerlink" title="slotFlag"></a>slotFlag</h3><p>这个主要是作用域表单的隐藏与显示，可以作为动态表单，slot 插槽隐藏时，会有一块占地区域，如果不想要，则使用 slotFlag,且自己在外部套用一层 a-form-item</p><pre class="language-vue" data-language="vue"><code class="language-vue">&#x2F;&#x2F; 使用slot的插槽 隐藏占用位置&lt;template #associationProjectCode&#x3D;&quot;&#123; field, formData &#125;&quot;&gt;  &lt;a-select    v-model:value&#x3D;&quot;formData.associationProjectCode&quot;    optionLabelProp&#x3D;&quot;label&quot;    show-search    placeholder&#x3D;&quot;请选择诊疗项目&quot;    :default-active-first-option&#x3D;&quot;false&quot;    :show-arrow&#x3D;&quot;false&quot;    :filter-option&#x3D;&quot;false&quot;    :not-found-content&#x3D;&quot;null&quot;    :options&#x3D;&quot;option&quot;    @search&#x3D;&quot;handleSearch&quot;    @change&#x3D;&quot;handleChange&quot;  &gt;&lt;&#x2F;a-select&gt;&lt;&#x2F;template&gt;&#x2F;&#x2F; 使用slotFlag的插槽 隐藏不占位置 建议在使用表单的事件时使用&lt;template v-if&#x3D;&quot;treeId &#x3D;&#x3D; 0&quot; #memberProjectCategoryId&#x3D;&quot;&#123; field, formData &#125;&quot;&gt;  &lt;a-form-item    :label&#x3D;&quot;field.label&quot;    :required&#x3D;&quot;field.required&quot;    :name&#x3D;&quot;field.formName&quot;  &gt;    &lt;a-select      v-model:value&#x3D;&quot;formData.memberProjectCategoryId&quot;      optionLabelProp&#x3D;&quot;label&quot;      show-search      placeholder&#x3D;&quot;请选择诊疗项目&quot;      :default-active-first-option&#x3D;&quot;false&quot;      :show-arrow&#x3D;&quot;false&quot;      :filter-option&#x3D;&quot;false&quot;      :not-found-content&#x3D;&quot;null&quot;      :options&#x3D;&quot;options&quot;      @search&#x3D;&quot;handleSearch&quot;      @change&#x3D;&quot;handleChange&quot;    &gt;&lt;&#x2F;a-select&gt;  &lt;&#x2F;a-form-item&gt;&lt;&#x2F;template&gt;</code></pre><p>动态表单建议使用 dependency，而不是使用 slotFlag,如果需要触发表单的某个事件时，使用 slotFlag.</p><h3 id="formRules"><a href="#formRules" class="headerlink" title="formRules"></a>formRules</h3><p>用于自定义表单，需要配合 formName 使用</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"username"</span><span class="token punctuation">,</span>    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>    <span class="token literal-property property">span</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    <span class="token literal-property property">formName</span><span class="token operator">:</span> <span class="token string">"username"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> formRules <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Please input Activity name'</span><span class="token punctuation">,</span>      <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'change'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Length should be 3 to 5'</span><span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h2 id="5-下载使用"><a href="#5-下载使用" class="headerlink" title="5.下载使用"></a>5.下载使用</h2><h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript">npm i ant<span class="token operator">-</span>base<span class="token operator">-</span>form   <span class="token comment">//下载</span></code></pre><h4 id="2-在-main-ts-引入"><a href="#2-在-main-ts-引入" class="headerlink" title="2.在 main.ts 引入"></a>2.在 main.ts 引入</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> BaseForm <span class="token keyword">from</span> <span class="token string">'ant-base-form'</span><span class="token keyword">import</span> <span class="token string">'ant-base-form/dist/style.css'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>BaseForm<span class="token punctuation">)</span></code></pre><p>注意，如若样式结构出现问题，则需要将 ant 组件库及样式先引入，再引入这个，同时使用是也放在 ant 后，如若未出现，则正常使用</p><h4 id="3-在需要使用的组件中使用"><a href="#3-在需要使用的组件中使用" class="headerlink" title="3.在需要使用的组件中使用"></a>3.在需要使用的组件中使用</h4><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;BaseForm    ref&#x3D;&quot;baseForm&quot;    :fields&#x3D;&quot;fields&quot;    formLayout&#x3D;&quot;vertical&quot;    :initialValues&#x3D;&quot;initialValues&quot;    :defaultSpan&#x3D;&quot;8&quot;  &gt;    &#x2F;&#x2F; 插槽    &lt;template #sex&#x3D;&quot;&#123; field, formData &#125;&quot;&gt;      &lt;div&gt;        &lt;a-input v-model:value&#x3D;&quot;formData.sex&quot; placeholder&#x3D;&quot;你好&quot;&gt;&lt;&#x2F;a-input&gt;      &lt;&#x2F;div&gt;    &lt;&#x2F;template&gt;  &lt;&#x2F;BaseForm&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot; setup&gt;&#x2F;&#x2F; 初始值const initialValues &#x3D; &#123;  username: &#39;&#39;,  sex: &#39;&#39;,  aaaa: &#39;&#39;,&#125;&#x2F;&#x2F; 生成表单类型const fields &#x3D; [  &#123;    name: &#39;username&#39;,    label: &#39;Username&#39;,    type: &#39;input&#39;,    errorMessage: &#39;请输入姓名&#39;,    required: true,    span: 12,  &#125;,  &#123;    name: &#39;sex&#39;,    label: &#39;性别&#39;,    type: &#39;input&#39;,    errorMessage: &#39;请输入性别&#39;,    required: true,    slot: true,    span: &#39;24&#39;,  &#125;,  &#123;    name: &#39;aaaa&#39;,    label: &#39;aaaaa&#39;,    type: &#39;textarea&#39;,    componentProps: &#123;      &#39;auto-size&#39;: &#123; minRows: 5, maxRows: 5 &#125;,      maxlength: 10,      placeholder: &#39;文本&#39;,      &#39;show-count&#39;: true,    &#125;,  &#125;,]&#x2F;&#x2F; 点击提交  拿到表单数据const baseForm &#x3D; ref()&#x2F;&#x2F; 绑定表单的按钮，用于数据校验以及拿到数据const onSubmit &#x3D; () &#x3D;&gt; &#123;  baseForm.value.handleSubmit((formData: Record&lt;string, any&gt;) &#x3D;&gt; &#123;    console.log(&#39;Form Submitted:&#39;, formData)  &#125;)&#125;&lt;&#x2F;script&gt;</code></pre><h2 id="6-示例"><a href="#6-示例" class="headerlink" title="6.示例"></a>6.示例</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 初始值</span><span class="token keyword">const</span> initialValues <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token literal-property property">area</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>  <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">checkbox</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">radio</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token literal-property property">remark</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 生成表单类型</span><span class="token keyword">const</span> <span class="token literal-property property">fields</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'username'</span><span class="token punctuation">,</span>    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'input'</span><span class="token punctuation">,</span>    <span class="token literal-property property">span</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    <span class="token literal-property property">formName</span><span class="token operator">:</span> <span class="token string">'username'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'area'</span><span class="token punctuation">,</span>    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'地区'</span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'select'</span><span class="token punctuation">,</span>    <span class="token literal-property property">span</span><span class="token operator">:</span> <span class="token string">'12'</span><span class="token punctuation">,</span>    <span class="token literal-property property">formName</span><span class="token operator">:</span> <span class="token string">'area'</span><span class="token punctuation">,</span>    <span class="token literal-property property">componentProps</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'苹果'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'Apple'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'梨'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'Pear'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'橘子'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'Orange'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'date'</span><span class="token punctuation">,</span>    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'时间'</span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'date'</span><span class="token punctuation">,</span>    <span class="token literal-property property">span</span><span class="token operator">:</span> <span class="token string">'12'</span><span class="token punctuation">,</span>    <span class="token literal-property property">formName</span><span class="token operator">:</span> <span class="token string">'date'</span><span class="token punctuation">,</span>    <span class="token literal-property property">componentProps</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">'YYYY/MM/DD'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">forName</span><span class="token operator">:</span> <span class="token string">'date'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'flag'</span><span class="token punctuation">,</span>    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'开关'</span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'switch'</span><span class="token punctuation">,</span>    <span class="token literal-property property">span</span><span class="token operator">:</span> <span class="token string">'12'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'checkbox'</span><span class="token punctuation">,</span>    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'多选'</span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'checkbox'</span><span class="token punctuation">,</span>    <span class="token literal-property property">span</span><span class="token operator">:</span> <span class="token string">'12'</span><span class="token punctuation">,</span>    <span class="token literal-property property">componentProps</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'苹果'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'Apple'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'梨'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'Pear'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'橘子'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'Orange'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'radio'</span><span class="token punctuation">,</span>    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'单选'</span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'radio'</span><span class="token punctuation">,</span>    <span class="token literal-property property">span</span><span class="token operator">:</span> <span class="token string">'12'</span><span class="token punctuation">,</span>    <span class="token literal-property property">componentProps</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'苹果'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'Apple'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'梨'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'Pear'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'橘子'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'Orange'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'remark'</span><span class="token punctuation">,</span>    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'备注'</span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'textarea'</span><span class="token punctuation">,</span>    <span class="token literal-property property">span</span><span class="token operator">:</span> <span class="token string">'12'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">const</span> formRules <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Please input Activity name'</span><span class="token punctuation">,</span>      <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'change'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Length should be 3 to 5'</span><span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">area</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Please select Activity zone'</span><span class="token punctuation">,</span>      <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'change'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Please pick a date'</span><span class="token punctuation">,</span>      <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'change'</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'object'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 点击提交  拿到表单数据</span><span class="token keyword">const</span> baseForm <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 表单自定义校验</span><span class="token keyword">const</span> <span class="token function-variable function">onSubmit1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  baseForm<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">customRuleSubmit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">formData</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">></span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Form Submitted:'</span><span class="token punctuation">,</span> formData<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="7-数据重置"><a href="#7-数据重置" class="headerlink" title="7.数据重置"></a>7.数据重置</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript">baseForm<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">resetForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="8-数据回显"><a href="#8-数据回显" class="headerlink" title="8.数据回显"></a>8.数据回显</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript">baseForm<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">dataPlayBack</span><span class="token punctuation">(</span>回显数据对象<span class="token punctuation">)</span></code></pre><h2 id="9-数据回显定义某一个数据或更改某一个数据"><a href="#9-数据回显定义某一个数据或更改某一个数据" class="headerlink" title="9.数据回显定义某一个数据或更改某一个数据"></a>9.数据回显定义某一个数据或更改某一个数据</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript">baseForm<span class="token punctuation">.</span>value<span class="token punctuation">.</span>formData<span class="token punctuation">.</span>属性值 <span class="token operator">=</span> 数据</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件上传到npm</title>
      <link href="/star/2024/0801654421.html"/>
      <url>/star/2024/0801654421.html</url>
      
        <content type="html"><![CDATA[<p>先要去 npm 官网去注册一个账号</p><h2 id="1-创建并配置项目"><a href="#1-创建并配置项目" class="headerlink" title="1.创建并配置项目"></a>1.创建并配置项目</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript">npm init vue@latest    <span class="token comment">// 创建新的 Vue 3 项目</span></code></pre><p>这里如果创建不成功，看自己的 node 版本，vue3 好像只支持要 18 以上，没有的话重装 node</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Project name<span class="token operator">:</span> your<span class="token operator">-</span>project<span class="token operator">-</span>nameAdd TypeScript<span class="token operator">?</span> YesAdd <span class="token constant">JSX</span> Support<span class="token operator">?</span> NoAdd Vue Router <span class="token keyword">for</span> Single Page Application development<span class="token operator">?</span> NoAdd Pinia <span class="token keyword">for</span> state management<span class="token operator">?</span> NoAdd Vitest <span class="token keyword">for</span> Unit Testing<span class="token operator">?</span> NoAdd Cypress <span class="token keyword">for</span> both Unit and End<span class="token operator">-</span>to<span class="token operator">-</span>End testing<span class="token operator">?</span> NoAdd ESLint <span class="token keyword">for</span> code quality<span class="token operator">?</span> YesAdd Prettier <span class="token keyword">for</span> code formatting<span class="token operator">?</span> Yes这一项                              No</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 切换到你项目的文件下，安装依赖</span>cd your<span class="token operator">-</span>project<span class="token operator">-</span>namenpm install</code></pre><h2 id="2-安装组件库"><a href="#2-安装组件库" class="headerlink" title="2.安装组件库"></a>2.安装组件库</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript">npm install ant<span class="token operator">-</span>design<span class="token operator">-</span>vue                 <span class="token comment">// 我这使用的ant</span></code></pre><h3 id="3-main-ts"><a href="#3-main-ts" class="headerlink" title="3.main.ts"></a>3.main.ts</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> Antd <span class="token keyword">from</span> <span class="token string">'ant-design-vue'</span><span class="token keyword">import</span> <span class="token string">'ant-design-vue/dist/antd.css'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Antd<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><p>这里写了，则在你的新项目中则不需要去导入 ant，而我们这个就成了独立的了</p><h3 id="4-封装组件"><a href="#4-封装组件" class="headerlink" title="4.封装组件"></a>4.封装组件</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 建议格式   这样可以导出多个组件</span>components组件名hooktypesindex<span class="token punctuation">.</span>vue组件名hooktypesindex<span class="token punctuation">.</span>vue</code></pre><h3 id="5-创建入口文件-index-ts"><a href="#5-创建入口文件-index-ts" class="headerlink" title="5.创建入口文件 index.ts"></a>5.创建入口文件 index.ts</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> App <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> 组件名 <span class="token keyword">from</span> <span class="token string">'./components/组件名'</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> 组件名 <span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">app</span><span class="token operator">:</span> App</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'组件名'</span><span class="token punctuation">,</span> 组件名<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h2 id="3-配置打包工具"><a href="#3-配置打包工具" class="headerlink" title="3.配置打包工具"></a>3.配置打包工具</h2><h3 id="1-vite-config-ts"><a href="#1-vite-config-ts" class="headerlink" title="1.vite.config.ts"></a>1.vite.config.ts</h3><pre class="language-json" data-language="json"><code class="language-json">import <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> from 'vite';import vue from '@vitejs/plugin-vue';import dts from 'vite-plugin-dts';<span class="token comment">// https://vitejs.dev/config/</span>export default defineConfig(<span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>vue()<span class="token punctuation">,</span> dts()<span class="token punctuation">]</span><span class="token punctuation">,</span>  build<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    lib<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      entry<span class="token operator">:</span> './src/index.ts'<span class="token punctuation">,</span>      name<span class="token operator">:</span> '组件名（大驼峰）'<span class="token punctuation">,</span>      fileName<span class="token operator">:</span> (format) => `组件名(小写-连接).$<span class="token punctuation">&#123;</span>format<span class="token punctuation">&#125;</span>.js`<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    rollupOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      external<span class="token operator">:</span> <span class="token punctuation">[</span>'vue'<span class="token punctuation">,</span> 'ant-design-vue'<span class="token punctuation">]</span><span class="token punctuation">,</span>      output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        globals<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          vue<span class="token operator">:</span> 'Vue'<span class="token punctuation">,</span>          'ant-design-vue'<span class="token operator">:</span> 'AntDesignVue'        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>);</code></pre><h3 id="2-安装-vite-插件"><a href="#2-安装-vite-插件" class="headerlink" title="2.安装 vite 插件"></a>2.安装 vite 插件</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript">npm install @vitejs<span class="token operator">/</span>plugin<span class="token operator">-</span>vue vite<span class="token operator">-</span>plugin<span class="token operator">-</span>dts</code></pre><h2 id="4-package-json"><a href="#4-package-json" class="headerlink" title="4. package.json"></a>4. package.json</h2><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"your-package-name"</span><span class="token punctuation">,</span> <span class="token comment">// 包唯一的名称，因为npm是根据包名搜搜的</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Your package description"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"dist/组件名(小写-连接).umd.js"</span><span class="token punctuation">,</span>  <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"dist/组件名(小写-连接).es.js"</span><span class="token punctuation">,</span>  <span class="token property">"types"</span><span class="token operator">:</span> <span class="token string">"dist/index.d.ts"</span><span class="token punctuation">,</span>  <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"dist"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vite build"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"peerDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"ant-design-vue"</span><span class="token operator">:</span> <span class="token string">"*"</span> <span class="token comment">// 适用于任何版本，怕与项目框架版本冲突</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"Your Name"</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">&#125;</span></code></pre><h2 id="5-打包，上传"><a href="#5-打包，上传" class="headerlink" title="5.打包，上传"></a>5.打包，上传</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript">npm login   <span class="token comment">// 登录</span>npm build   <span class="token comment">// 打包</span>npm publish <span class="token operator">--</span>access <span class="token keyword">public</span>  <span class="token comment">// 上传且公共可见</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何向npm上传你封装的js工具代码？</title>
      <link href="/star/2024/073165442.html"/>
      <url>/star/2024/073165442.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-注册-npm-账号"><a href="#1-注册-npm-账号" class="headerlink" title="1.注册 npm 账号"></a>1.注册 npm 账号</h3><p><a href="https://www.npmjs.com/">npm 官网</a></p><h3 id="2-检查你的-node，npm，没装的去装"><a href="#2-检查你的-node，npm，没装的去装" class="headerlink" title="2.检查你的 node，npm，没装的去装"></a>2.检查你的 node，npm，没装的去装</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript">node <span class="token operator">-</span> vnpm <span class="token operator">-</span> v</code></pre><p><a href="https://nodejs.org/zh-cn">node 官网</a></p><p>下载后面带 LTS 的，这是长期支持的</p><h3 id="3-开始创建"><a href="#3-开始创建" class="headerlink" title="3.开始创建"></a>3.开始创建</h3><p>先创建一个文件夹，通过 cmd 或者在 vscode 中运行<code>npm init</code>，他会让你填写一些包名，包版本，包介绍等等，等你填完了他会生成一个<code>package.json</code>文件，里面主要是存储你的这个包信息，</p><p>不想填的话可以使用 <code>npm init -y</code> 来自动创建一个默认的 <code>package.json</code> 文件。&#96;</p><h3 id="4-创建入口文件-index-ts"><a href="#4-创建入口文件-index-ts" class="headerlink" title="4.创建入口文件 index.ts"></a>4.创建入口文件 index.ts</h3><p>你可以将你在其他文件写的代码导入到 index.ts 中，再从 index.ts 导入出去，代码少的话可以直接在 index.ts 中写</p><h3 id="5-编写-page-json-文件"><a href="#5-编写-page-json-文件" class="headerlink" title="5.编写 page.json 文件"></a>5.编写 page.json 文件</h3><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"vue-directive-throttle"</span><span class="token punctuation">,</span> <span class="token comment">// 包名，唯一的，因为需要在npm搜索</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.9.0"</span><span class="token punctuation">,</span> <span class="token comment">// 版本号 ，每次更新，版本号都需要不一样</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Vue3通用事件节流自定义指令"</span><span class="token punctuation">,</span> <span class="token comment">// 包介绍</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 关键字</span>    <span class="token string">"vue"</span><span class="token punctuation">,</span>    <span class="token string">"vue3"</span><span class="token punctuation">,</span>    <span class="token string">"directive"</span><span class="token punctuation">,</span>    <span class="token string">"throttle"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"lengyangwei"</span><span class="token punctuation">,</span> <span class="token comment">// 作者</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span> <span class="token comment">// 包遵循什么样的开源协议</span><span class="token punctuation">&#125;</span></code></pre><h3 id="6-README-md"><a href="#6-README-md" class="headerlink" title="6.README.md"></a>6.README.md</h3><p>一般是这个包如何使用的描述</p><h3 id="7-发布到-npm"><a href="#7-发布到-npm" class="headerlink" title="7.发布到 npm"></a>7.发布到 npm</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript">npm login  <span class="token comment">// 登录npm账号</span></code></pre><p>注意：不要使用 taobao 镜像</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">npm install <span class="token operator">-</span>g nrm   <span class="token comment">// 安装</span>nrm ls <span class="token comment">// 查看镜像列表</span>nrm use npm  <span class="token comment">// 使用npm镜像</span><span class="token comment">// 如果使用nrm报错。则试一下</span>npx nrm lsnpx nrm use npm</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript">npm publish <span class="token operator">--</span>access <span class="token keyword">public</span></code></pre><p>**<code>--access public</code>**：</p><p><code>--access</code> 选项用于指定包的访问级别。它可以是</p><ul><li><code>public</code>：任何人都可以安装和使用这个包。这是默认选项，但需要显式指定它以避免默认行为改变的风险。</li><li><code>restricted</code>：只有你（以及你授权的其他用户）可以访问和安装这个包，通常用于私有包。</li></ul><p>如果 npm publish –access public 一直转圈</p><p>npm 缓存问题：尝试清除 npm 缓存。可以使用命令<code>npm cache clean --force</code></p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS查找对象中为空的值，返回第一个空值</title>
      <link href="/star/2024/062665489.html"/>
      <url>/star/2024/062665489.html</url>
      
        <content type="html"><![CDATA[<h3 id="JS-查找对象中为空的值，返回第一个空值"><a href="#JS-查找对象中为空的值，返回第一个空值" class="headerlink" title="JS 查找对象中为空的值，返回第一个空值"></a>JS 查找对象中为空的值，返回第一个空值</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">findFirstEmptyValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      value <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>      value <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span>      value <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">||</span>      <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span>      <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span>        <span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> key    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span> <span class="token comment">// 如果没有找到空值，返回 null</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3+TS 封装所有事件通用的节流自定义指令</title>
      <link href="/star/2024/06256544.html"/>
      <url>/star/2024/06256544.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue3-TS-封装所有事件通用的节流自定义指令"><a href="#Vue3-TS-封装所有事件通用的节流自定义指令" class="headerlink" title="Vue3+TS 封装所有事件通用的节流自定义指令"></a>Vue3+TS 封装所有事件通用的节流自定义指令</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// src/utils/throttle.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> lastCall <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> lastCall <span class="token operator">>=</span> delay<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      lastCall <span class="token operator">=</span> now      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// directives/vThrottle.ts</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Directive<span class="token punctuation">,</span> DirectiveBinding <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> throttle <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@/services/utils/throttle"</span><span class="token punctuation">;</span>declare global <span class="token punctuation">&#123;</span>    <span class="token keyword">interface</span> <span class="token class-name">HTMLElement</span> <span class="token punctuation">&#123;</span>        __throttleHandlers__<span class="token operator">?</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">event</span><span class="token operator">:</span> string<span class="token punctuation">;</span> <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">event</span><span class="token operator">:</span> Event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token literal-property property">vThrottle</span><span class="token operator">:</span> Directive <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> <span class="token literal-property property">binding</span><span class="token operator">:</span> DirectiveBinding</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> binding<span class="token punctuation">.</span>value <span class="token operator">!==</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">v-throttle不是一个函数</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> delay <span class="token operator">=</span> binding<span class="token punctuation">.</span>arg <span class="token operator">?</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>arg<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> eventTypes<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>modifiers<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            eventTypes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"click"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            eventTypes <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> throttledFunction <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>        el<span class="token punctuation">.</span>__throttleHandlers__ <span class="token operator">=</span> eventTypes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">eventType</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">event</span><span class="token operator">:</span> eventType<span class="token punctuation">,</span>            <span class="token literal-property property">handler</span><span class="token operator">:</span> throttledFunction<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        el<span class="token punctuation">.</span>__throttleHandlers__<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> event<span class="token punctuation">,</span> handler <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> HTMLElement</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>__throttleHandlers__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            el<span class="token punctuation">.</span>__throttleHandlers__<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> event<span class="token punctuation">,</span> handler <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                el<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">delete</span> el<span class="token punctuation">.</span>__throttleHandlers__<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> vThrottle<span class="token punctuation">;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.ts</span><span class="token keyword">import</span> vThrottle <span class="token keyword">from</span> <span class="token string">'@/directives/vThrottle'</span>app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'throttle'</span><span class="token punctuation">,</span> vThrottle<span class="token punctuation">)</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 使用</span>v<span class="token operator">-</span>throttle<span class="token operator">:</span>时间<span class="token punctuation">.</span>事件<span class="token operator">=</span><span class="token string">"函数"</span>默认事件clickv<span class="token operator">-</span>throttle<span class="token operator">:</span><span class="token number">5000</span><span class="token operator">=</span>"      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>" v<span class="token operator">-</span>throttle<span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">.</span>scroll<span class="token operator">=</span>"       <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">777</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>"  v<span class="token operator">-</span>throttle<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">.</span>mousemove<span class="token operator">=</span>"        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>"</code></pre><p><strong>事件节流自定义指令</strong><br><code>v-throttle:时间.事件=&quot;函数 || 函数名&quot;</code><br><code>v-throttle:时间.事件=&quot;() =&gt; 函数名(形参)&quot;</code><br>默认事件：<code>click</code></p><p><strong>节流函数使用</strong><br>1.import { throttle } from “@&#x2F;services&#x2F;utils&#x2F;throttle”;<br>2.const 函数名 &#x3D; throttle(()&#x3D;&gt;{函数逻辑}，500)</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5单页面如何去做适配？</title>
      <link href="/star/2024/061965451.html"/>
      <url>/star/2024/061965451.html</url>
      
        <content type="html"><![CDATA[<h2 id="H5-单页面如何去做适配？"><a href="#H5-单页面如何去做适配？" class="headerlink" title="H5 单页面如何去做适配？"></a>H5 单页面如何去做适配？</h2><p>共分五个主要文件</p><table><thead><tr><th>主要文件</th><th>解释</th></tr></thead><tbody><tr><td>font</td><td>存放字体文件</td></tr><tr><td>images</td><td>存放图片</td></tr><tr><td>js</td><td>存放适配 rem 的 js 文件，命名为 flexible.js—我上篇文章是源代码</td></tr><tr><td>less</td><td>存放样式文件，分为初始化样式文件，移动端兼容性文件，自己写的样式文件</td></tr><tr><td>index.html</td><td></td></tr></tbody></table><h3 id="一-index-html"><a href="#一-index-html" class="headerlink" title="一.index.html"></a><code>一.index.html</code></h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 改网站为中文 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 引入首页的css --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./less/index.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- html结构 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 引入flexible.js进行rem适配 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/flexible.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="二-样式文件"><a href="#二-样式文件" class="headerlink" title="二.样式文件"></a>二.样式文件</h3><h4 id="1-初始化样式文件"><a href="#1-初始化样式文件" class="headerlink" title="1.初始化样式文件"></a><code>1.初始化样式文件</code></h4><pre class="language-less" data-language="less"><code class="language-less"><span class="token comment">// out:false</span><span class="token variable">@charset</span> <span class="token string">'UTF-8'</span><span class="token punctuation">;</span><span class="token selector">*</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border<span class="token operator">-</span>box<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> sans<span class="token operator">-</span>serif<span class="token punctuation">;</span>  <span class="token property">-webkit-text-size-adjust</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">text-size-adjust</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">-webkit-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">img</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">ul</span> <span class="token punctuation">&#123;</span>  <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a</span> <span class="token punctuation">&#123;</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-移动端兼容性文件"><a href="#2-移动端兼容性文件" class="headerlink" title="2.移动端兼容性文件"></a><code>2.移动端兼容性文件</code></h4><pre class="language-less" data-language="less"><code class="language-less"><span class="token comment">// out:false</span><span class="token comment">/*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */</span><span class="token comment">/** * 1. Change the default font family in all browsers (opinionated). * 2. Correct the line height in all browsers. * 3. Prevent adjustments of font size after orientation changes in *    IE on Windows Phone and in iOS. */</span><span class="token comment">/* Document   ========================================================================== */</span><span class="token variable">@charset</span> <span class="token string">'UTF-8'</span><span class="token punctuation">;</span><span class="token selector">html</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> sans<span class="token operator">-</span>serif<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 1.15<span class="token punctuation">;</span> <span class="token comment">/* 2 */</span>  <span class="token property">-ms-text-size-adjust</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token comment">/* 3 */</span>  <span class="token property">-webkit-text-size-adjust</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token comment">/* 3 */</span><span class="token punctuation">&#125;</span><span class="token comment">/* Sections   ========================================================================== */</span><span class="token comment">/** * Remove the margin in all browsers (opinionated). */</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Add the correct display in IE 9-. */</span><span class="token selector">article,aside,footer,header,nav,section</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Correct the font size and margin on `h1` elements within `section` and * `article` contexts in Chrome, Firefox, and Safari. */</span><span class="token selector">h1</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0.67em 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Grouping content   ========================================================================== */</span><span class="token comment">/** * Add the correct display in IE 9-. * 1. Add the correct display in IE. */</span><span class="token selector">figcaption,figure,main</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* 1 */</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Add the correct margin in IE 8. */</span><span class="token selector">figure</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 1em 40px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 1. Add the correct box sizing in Firefox. * 2. Show the overflow in Edge and IE. */</span><span class="token selector">hr</span> <span class="token punctuation">&#123;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> content<span class="token operator">-</span>box<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span> <span class="token comment">/* 2 */</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 1. Correct the inheritance and scaling of font size in all browsers. * 2. Correct the odd `em` font sizing in all browsers. */</span><span class="token selector">pre</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> monospace<span class="token punctuation">,</span> monospace<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span> <span class="token comment">/* 2 */</span><span class="token punctuation">&#125;</span><span class="token comment">/* Text-level semantics   ========================================================================== */</span><span class="token comment">/** * 1. Remove the gray background on active links in IE 10. * 2. Remove gaps in links underline in iOS 8+ and Safari 8+. */</span><span class="token selector">a</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span>  <span class="token property">-webkit-text-decoration-skip</span><span class="token punctuation">:</span> objects<span class="token punctuation">;</span> <span class="token comment">/* 2 */</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Remove the outline on focused links when they are also active or hovered * in all browsers (opinionated). */</span><span class="token selector">a:active,a:hover</span> <span class="token punctuation">&#123;</span>  <span class="token property">outline-width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 1. Remove the bottom border in Firefox 39-. * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari. */</span><span class="token selector">abbr[title]</span> <span class="token punctuation">&#123;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span> <span class="token comment">/* 2 */</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline dotted<span class="token punctuation">;</span> <span class="token comment">/* 2 */</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Prevent the duplicate application of `bolder` by the next rule in Safari 6. */</span><span class="token selector">b,strong</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Add the correct font weight in Chrome, Edge, and Safari. */</span><span class="token selector">b,strong</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bolder<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 1. Correct the inheritance and scaling of font size in all browsers. * 2. Correct the odd `em` font sizing in all browsers. */</span><span class="token selector">code,kbd,samp</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> monospace<span class="token punctuation">,</span> monospace<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span> <span class="token comment">/* 2 */</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Add the correct font style in Android 4.3-. */</span><span class="token selector">dfn</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Add the correct background and color in IE 9-. */</span><span class="token selector">mark</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ff0<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Add the correct font size in all browsers. */</span><span class="token selector">small</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Prevent `sub` and `sup` elements from affecting the line height in * all browsers. */</span><span class="token selector">sub,sup</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 75%<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> baseline<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">sub</span> <span class="token punctuation">&#123;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token operator">-</span>0.25em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">sup</span> <span class="token punctuation">&#123;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token operator">-</span>0.5em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Embedded content   ========================================================================== */</span><span class="token comment">/** * Add the correct display in IE 9-. */</span><span class="token selector">audio,video</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token operator">-</span>block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Add the correct display in iOS 4-7. */</span><span class="token selector">audio:not([controls])</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Remove the border on images inside links in IE 10-. */</span><span class="token selector">img</span> <span class="token punctuation">&#123;</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Hide the overflow in IE. */</span><span class="token selector">svg:not(:root)</span> <span class="token punctuation">&#123;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Forms   ========================================================================== */</span><span class="token comment">/** * 1. Change the font styles in all browsers (opinionated). * 2. Remove the margin in Firefox and Safari. */</span><span class="token selector">button,input,optgroup,select,textarea</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> sans<span class="token operator">-</span>serif<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 1.15<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token comment">/* 2 */</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Show the overflow in IE. * 1. Show the overflow in Edge. */</span><span class="token selector">button,input</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* 1 */</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Remove the inheritance of text transform in Edge, Firefox, and IE. * 1. Remove the inheritance of text transform in Firefox. */</span><span class="token selector">button,select</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* 1 */</span>  <span class="token property">text-transform</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video` *    controls in Android 4. * 2. Correct the inability to style clickable types in iOS and Safari. */</span>button<span class="token punctuation">,</span>html [type=<span class="token string">"button"</span>]<span class="token punctuation">,</span> <span class="token comment">/* 1 */</span><span class="token selector">[type="reset"],[type="submit"]</span> <span class="token punctuation">&#123;</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> button<span class="token punctuation">;</span> <span class="token comment">/* 2 */</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Remove the inner border and padding in Firefox. */</span><span class="token selector">button::-moz-focus-inner,[type='button']::-moz-focus-inner,[type='reset']::-moz-focus-inner,[type='submit']::-moz-focus-inner</span> <span class="token punctuation">&#123;</span>  <span class="token property">border-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Restore the focus styles unset by the previous rule. */</span><span class="token selector">button:-moz-focusring,[type='button']:-moz-focusring,[type='reset']:-moz-focusring,[type='submit']:-moz-focusring</span> <span class="token punctuation">&#123;</span>  <span class="token property">outline</span><span class="token punctuation">:</span> 1px dotted ButtonText<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Change the border, margin, and padding in all browsers (opinionated). */</span><span class="token selector">fieldset</span> <span class="token punctuation">&#123;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #c0c0c0<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 2px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0.35em 0.625em 0.75em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 1. Correct the text wrapping in Edge and IE. * 2. Correct the color inheritance from `fieldset` elements in IE. * 3. Remove the padding so developers are not caught out when they zero out *    `fieldset` elements in all browsers. */</span><span class="token selector">legend</span> <span class="token punctuation">&#123;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border<span class="token operator">-</span>box<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span>  <span class="token property">color</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span> <span class="token comment">/* 2 */</span>  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token comment">/* 3 */</span>  <span class="token property">white-space</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 1. Add the correct display in IE 9-. * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera. */</span><span class="token selector">progress</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token operator">-</span>block<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> baseline<span class="token punctuation">;</span> <span class="token comment">/* 2 */</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Remove the default vertical scrollbar in IE. */</span><span class="token selector">textarea</span> <span class="token punctuation">&#123;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 1. Add the correct box sizing in IE 10-. * 2. Remove the padding in IE 10-. */</span><span class="token selector">[type='checkbox'],[type='radio']</span> <span class="token punctuation">&#123;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border<span class="token operator">-</span>box<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token comment">/* 2 */</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Correct the cursor style of increment and decrement buttons in Chrome. */</span><span class="token selector">[type='number']::-webkit-inner-spin-button,[type='number']::-webkit-outer-spin-button</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 1. Correct the odd appearance in Chrome and Safari. * 2. Correct the outline style in Safari. */</span><span class="token selector">[type='search']</span> <span class="token punctuation">&#123;</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> textfield<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span>  <span class="token property">outline-offset</span><span class="token punctuation">:</span> <span class="token operator">-</span>2px<span class="token punctuation">;</span> <span class="token comment">/* 2 */</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Remove the inner padding and cancel buttons in Chrome and Safari on macOS. */</span><span class="token selector">[type='search']::-webkit-search-cancel-button,[type='search']::-webkit-search-decoration</span> <span class="token punctuation">&#123;</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 1. Correct the inability to style clickable types in iOS and Safari. * 2. Change font properties to `inherit` in Safari. */</span><span class="token selector">::-webkit-file-upload-button</span> <span class="token punctuation">&#123;</span>  <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> button<span class="token punctuation">;</span> <span class="token comment">/* 1 */</span>  <span class="token property">font</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span> <span class="token comment">/* 2 */</span><span class="token punctuation">&#125;</span><span class="token comment">/* Interactive   ========================================================================== */</span><span class="token comment">/* * Add the correct display in IE 9-. * 1. Add the correct display in Edge, IE, and Firefox. */</span>details<span class="token punctuation">,</span> <span class="token comment">/* 1 */</span><span class="token selector">menu</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * Add the correct display in all browsers. */</span><span class="token selector">summary</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> list<span class="token operator">-</span>item<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Scripting   ========================================================================== */</span><span class="token comment">/** * Add the correct display in IE 9-. */</span><span class="token selector">canvas</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token operator">-</span>block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Add the correct display in IE. */</span><span class="token selector">template</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Hidden   ========================================================================== */</span><span class="token comment">/** * Add the correct display in IE 10-. */</span><span class="token selector">[hidden]</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-index-less-自己的样式文件"><a href="#3-index-less-自己的样式文件" class="headerlink" title="3.index.less(自己的样式文件)"></a>3.index.less(自己的样式文件)</h4><p>VScode 下<code>Easy LESS</code></p><p>这里需要将前两个 less 文件导入进来，保存后插件会自动的转换成 css 文件，同时初始化 px 转 rem 定义基准值，后续的宽高根据定义的大小改变</p><pre class="language-less" data-language="less"><code class="language-less"><span class="token comment">// 字体设置 ，需下载字体放入font文件夹中</span><span class="token atrule">@font-face</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'CKTKingKong'</span><span class="token punctuation">;</span>  <span class="token comment">/* 定义字体名称 */</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/HuXiaoBoNanShenTi-2.otf'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>  <span class="token comment">/* IE9 Compat Modes */</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/HuXiaoBoNanShenTi-2.otf?#iefix'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* IE6-IE8 */</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #dfe1e6<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'CKTKingKong'</span><span class="token punctuation">,</span> sans<span class="token operator">-</span>serif<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 导入初始化的base.less</span><span class="token variable">@import</span> <span class="token string">'./base.less'</span><span class="token punctuation">;</span><span class="token comment">// 导入移动端兼容性normalize.less</span><span class="token variable">@import</span> <span class="token string">'./normalize.less'</span><span class="token punctuation">;</span><span class="token comment">// px转rem定义基准值</span><span class="token variable">@baseSize<span class="token punctuation">:</span></span> 37.5rem<span class="token punctuation">;</span><span class="token comment">// 示例</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>200 <span class="token operator">/</span> <span class="token variable">@baseSize</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="三-js文件"><a href="#三-js文件" class="headerlink" title="三.js文件"></a><code>三.js文件</code></h3><p>去查看我上篇适配代码</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rem适配</title>
      <link href="/star/2024/06186545.html"/>
      <url>/star/2024/06186545.html</url>
      
        <content type="html"><![CDATA[<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">flexible</span><span class="token punctuation">(</span><span class="token parameter">window<span class="token punctuation">,</span> document</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> docEl <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement  <span class="token keyword">var</span> dpr <span class="token operator">=</span> window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">||</span> <span class="token number">1</span>  <span class="token comment">// adjust body font size</span>  <span class="token keyword">function</span> <span class="token function">setBodyFontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">*</span> dpr <span class="token operator">+</span> <span class="token string">'px'</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> setBodyFontSize<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setBodyFontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// set 1rem = viewWidth / 10</span>  <span class="token keyword">function</span> <span class="token function">setRemUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> rem <span class="token operator">=</span> docEl<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> <span class="token number">10</span>    docEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> rem <span class="token operator">+</span> <span class="token string">'px'</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setRemUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// reset rem unit on page resize</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> setRemUnit<span class="token punctuation">)</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pageshow'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>persisted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">setRemUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// detect 0.5px supports</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dpr <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> fakeBody <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> testElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>    testElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">'.5px solid transparent'</span>    fakeBody<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>testElement<span class="token punctuation">)</span>    docEl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fakeBody<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>testElement<span class="token punctuation">.</span>offsetHeight <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      docEl<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hairlines'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    docEl<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>fakeBody<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3批量注册全局组件</title>
      <link href="/star/2024/061766512348.html"/>
      <url>/star/2024/061766512348.html</url>
      
        <content type="html"><![CDATA[<h3 id="vue3-批量注册全局组件"><a href="#vue3-批量注册全局组件" class="headerlink" title="vue3 批量注册全局组件"></a>vue3 批量注册全局组件</h3><p>第一步，在入口文件引入批量注册全局组件的文件并使用</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.ts</span><span class="token keyword">import</span> gloablComponent <span class="token keyword">from</span> <span class="token string">'@/components/index.ts'</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>gloablComponent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><p>第二步，在 components 中创建一个 index.ts 文件用于批量注册的逻辑</p><p>第三步，编写相关逻辑</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 提前准备了几个svg，button,table自定义组件</span><span class="token keyword">import</span> SvgIcon <span class="token keyword">from</span> <span class="token string">'@/components/SvgIcon/index.vue'</span><span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">'@/components/Button/index.vue'</span><span class="token keyword">import</span> Table <span class="token keyword">from</span> <span class="token string">'@/components/Table/index.vue'</span><span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> App<span class="token punctuation">,</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 把他们放进一个对象</span><span class="token keyword">const</span> <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>name<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> Component <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> SvgIcon<span class="token punctuation">,</span> Button<span class="token punctuation">,</span> Table <span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 暴露即调用这个函数，形参能拿到app实例</span>  <span class="token comment">// vue提供install可供我们开发新的插件及全局注册组件等</span>  <span class="token comment">// install方法第一个参数是vue的构造器，第二个参数是可选的选项对象</span>  <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">app</span><span class="token operator">:</span> App</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//  通过Object.keys将他们分为由key值组成的数组，再通过forEach拿到每一个key,拿到后则一一注册</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>components<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">key</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> components<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法 2"></a>方法 2</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> SvgIcon <span class="token keyword">from</span> <span class="token string">'@/components/SvgIcon/index.vue'</span><span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">'@/components/Button/index.vue'</span><span class="token keyword">import</span> Table <span class="token keyword">from</span> <span class="token string">'@/components/Table/index.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'SvgIcon'</span><span class="token punctuation">,</span> PageTools<span class="token punctuation">)</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'Button'</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'Table'</span><span class="token punctuation">,</span> ImageUpload<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>这样也可以，只不过麻烦点，同样是第一，第二步要做</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC端横向滚动之回到指定位置---Vue3</title>
      <link href="/star/2024/0612665123.html"/>
      <url>/star/2024/0612665123.html</url>
      
        <content type="html"><![CDATA[<h3 id="PC端横向滚动之回到指定位置—Vue3"><a href="#PC端横向滚动之回到指定位置—Vue3" class="headerlink" title="PC端横向滚动之回到指定位置—Vue3"></a>PC端横向滚动之回到指定位置—Vue3</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>1.页面加载就需要指定到指定的位置   </p><p><code>大盒子的ref.value.scrollLeft = 小盒子ref数组.value[指定位置的索引].offsetLeft - 小盒子ref数组.value[第0项].offsetLeft;</code><br>因为第<code>0</code>项一般都会距离左侧还有一部分需要剪掉，不要把减去的写死了，因为在不同分辨率的电脑下的距离也是不一样的</p><p>2.绑定回到某个位置的按钮，这个自己绑定一个点击事件，触发第一点即可</p><p>3.监听与销毁视图变化，视图变大或变小，都会影响你指定的位置变化，因为你的没位置未能跟着一起变化，记得销毁</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>第一点<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//缩放即会将原有的位置出现偏移，因此监听视图变化</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">onBeforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            第一点    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//销毁事件</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;    &lt;div class&#x3D;&quot;UserHome box-border&quot;&gt;        &lt;a-row :gutter&#x3D;&quot;[0, 20]&quot;&gt;            &lt;a-col :span&#x3D;&quot;24&quot; :order&#x3D;&quot;1&quot;&gt;                &lt;div class&#x3D;&quot;BoxBorder px-[20rem] pt-[20rem] pb-[10rem] min-h-[272rem] box-border&quot;&gt;                    &lt;div style&#x3D;&quot;display: flex;justify-content: space-between;&quot;&gt;                      &lt;div class&#x3D;&quot;FontBlack pb-[13rem]&quot;&gt;糖尿病服务方案&lt;&#x2F;div&gt;                      &lt;app-button @click&#x3D;&quot;goToday&quot;&gt;回到今日&lt;&#x2F;app-button&gt;                    &lt;&#x2F;div&gt;                    &lt;div class&#x3D;&quot;flex box&quot; @mousedown&#x3D;&quot;startDrag&quot; @mousemove&#x3D;&quot;onDrag&quot; @mouseup&#x3D;&quot;mouseup&quot; @mouseleave&#x3D;&quot;stopDrag&quot;&gt;                        &lt;div class&#x3D;&quot;flex scrollBox&quot; ref&#x3D;&quot;scrollContent&quot; v-show&#x3D;&quot;newData?.length&quot;&gt;                            &lt;div class&#x3D;&quot;flex mr-[30px]&quot; v-for&#x3D;&quot;(item, index) in newData&quot; :ref&#x3D;&quot;(item:any) &#x3D;&gt; setItemRef(item,index)&quot; :key&#x3D;&quot;index&quot;&gt;                             &lt;!--......每一项--&gt;                            &lt;&#x2F;div&gt;                        &lt;&#x2F;div&gt;                        &lt;div class&#x3D;&quot;flex justify-center flex-1&quot; v-if&#x3D;&quot;!newData?.length&quot;&gt;                            &lt;a-empty description&#x3D;&quot;暂无数据&quot; &#x2F;&gt;                        &lt;&#x2F;div&gt;                    &lt;&#x2F;div&gt;                &lt;&#x2F;div&gt;            &lt;&#x2F;a-col&gt;        &lt;&#x2F;a-row&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot; setup&gt;import &#123; ref, onMounted, watch, shallowRef, computed, nextTick, onBeforeUnmount &#125; from &quot;vue&quot;;import &#123; defineComponent &#125; from &quot;vue&quot;;import diseaseLable from &quot;.&#x2F;disease-lable.vue&quot;;import &#123; throttle &#125; from &quot;lodash&quot;;import &#123; getNewUserHealthPathExecuteList, getHistoryUserHealthPathExecuteList &#125; from &quot;@&#x2F;services&#x2F;api&#x2F;360&quot;;import &#123; useRoute &#125; from &quot;vue-router&quot;;const route &#x3D; useRoute();onMounted(async function () &#123;    await getNewList(true);    await getOldList(true);    tableList();    window.addEventListener(&#39;resize&#39;, onSizeMt);  &#x2F;&#x2F;缩放即会将原有的位置出现偏移，因此监听视图变化&#125;);onBeforeUnmount(() &#x3D;&gt; &#123;    window.removeEventListener(&#39;resize&#39;, onSizeMt)  &#x2F;&#x2F;销毁事件&#125;)    defineComponent(&#123;    components: &#123;        diseaseLable,    &#125;,    props: &#123;        data: &#123;            type: Object,            default: () &#x3D;&gt; new Object(),        &#125;,    &#125;,&#125;);&#x2F;&#x2F; 整个大盒子的ref初始化const scrollContent &#x3D; ref();&#x2F;&#x2F; 判断是否松开鼠标按键let isDragging &#x3D; false;&#x2F;&#x2F; 事件对象的x轴距离减去大盒子距离左部的距离let startX &#x3D; 0;&#x2F;&#x2F; 距离左边let scrollLeft &#x3D; 0;&#x2F;&#x2F; 左滑右滑let startZY &#x3D; ref(0);let startSX &#x3D; ref(0);&#x2F;&#x2F; 判断是否左滑还是右滑let swipeDirection &#x3D; ref();    const dataFlag &#x3D; ref(true);const oldPageIndex &#x3D; ref(1);const oldPageSize &#x3D; ref(1000);const dataOldFlag &#x3D; ref(true);&#x2F;&#x2F; 定位数据长度const nowIndex &#x3D; ref(0)&#x2F;&#x2F; 新数据const newData &#x3D; shallowRef&lt;any[]&gt;([]);const pageIndex &#x3D; ref(1);const pageSize &#x3D; ref(1000);&#x2F;&#x2F; 鼠标按下const startDrag &#x3D; (e: any) &#x3D;&gt; &#123;    &#x2F;&#x2F;console.dir(scrollContent.value.offsetLeft);    &#x2F;&#x2F;console.log(e);    isDragging &#x3D; true;    startX &#x3D; e.pageX - scrollContent.value.offsetLeft;    scrollLeft &#x3D; scrollContent.value.scrollLeft;    &#x2F;&#x2F; startZY.value &#x3D; e.clientX;    &#x2F;&#x2F; startSX.value &#x3D; e.clientY;&#125;;&#x2F;&#x2F; 定位到指定的位置const onSizeMt &#x3D; () &#x3D;&gt; &#123;    scrollContent.value.scrollLeft &#x3D; itemRefs.value[nowIndex.value]?.offsetLeft - itemRefs.value[0]?.offsetLeft;&#125;&#x2F;&#x2F; 鼠标移动const onDrag &#x3D; (e: any) &#x3D;&gt; &#123;    if (!isDragging) return;  &#x2F;&#x2F;如果没按下鼠标就移动，则失效    e.preventDefault();    const x &#x3D; e.pageX - scrollContent.value.offsetLeft;    const walk &#x3D; (x - startX) * 3; &#x2F;&#x2F; Scroll-fast    scrollContent.value.scrollLeft &#x3D; scrollLeft - walk;       &#x2F;*    const currentX &#x3D; e.clientX;    const currentY &#x3D; e.clientY;    const diffX &#x3D; startZY.value - currentX;    const diffY &#x3D; startSX.value - currentY;   if (Math.abs(diffX) &gt; Math.abs(diffY)) &#123;        swipeDirection.value &#x3D; diffX &gt; 0 ? &quot;Right&quot; : &quot;Left&quot;;    &#125; 这里是监听左滑右滑，不用管*&#x2F; &#125;;    &#x2F;&#x2F; 鼠标抬起const mouseup &#x3D; throttle(() &#x3D;&gt; &#123;    if (!isDragging) return;    nextTick(() &#x3D;&gt; &#123;        isDragging &#x3D; false;    &#125;);&#125;, 500);&#x2F;&#x2F; 鼠标离开const stopDrag &#x3D; () &#x3D;&gt; &#123;    isDragging &#x3D; false;&#125;;&#x2F;&#x2F; 新列表const getNewList &#x3D; (flag?: boolean) &#x3D;&gt; &#123;    getNewUserHealthPathExecuteList(&#123;        pageIndex: pageIndex.value,        pageSize: pageSize.value,        userIdentityId: route.query.userIdentityId as string,    &#125;).then((res: any) &#x3D;&gt; &#123;        if (!res.data) return;        if (res.data?.data.length &#x3D;&#x3D;&#x3D; 0) &#123;            dataFlag.value &#x3D; false;        &#125;        res.data?.data.forEach((item: any) &#x3D;&gt; &#123;            item.items.forEach((row: any) &#x3D;&gt; &#123;                if (row.status &#x3D;&#x3D;&#x3D; 0 || row.status &#x3D;&#x3D;&#x3D; 1) &#123;                    row.img &#x3D; require(&quot;..&#x2F;images&#x2F;img3.png&quot;);                &#125; else if (row.status &#x3D;&#x3D;&#x3D; 2) &#123;                    row.img &#x3D; require(&quot;..&#x2F;images&#x2F;img4.png&quot;);                &#125;            &#125;);        &#125;);        if (flag) &#123;            newData.value &#x3D; [...newData.value, ...res.data?.data];        &#125;    &#125;);&#125;;const itemRefs &#x3D; ref&lt;any[]&gt;([]); &#x2F;&#x2F; ref数组&#x2F;&#x2F; 动态绑定refconst setItemRef &#x3D; (item: any, index: number) &#x3D;&gt; &#123;    if (item) &#123;        itemRefs.value[index] &#x3D; item;    &#125;&#125;;&#x2F;&#x2F; 历史数据接口const getOldList &#x3D; (flag?: boolean) &#x3D;&gt; &#123;    getHistoryUserHealthPathExecuteList(&#123;        pageIndex: oldPageIndex.value,        pageSize: oldPageSize.value,        userIdentityId: route.query.userIdentityId as string,    &#125;).then((res: any) &#x3D;&gt; &#123;        if (!res?.data || res.data?.data.length &#x3D;&#x3D;&#x3D; 0) &#123;            dataOldFlag.value &#x3D; false;            return        &#125;        res.data?.data.forEach((item: any) &#x3D;&gt; &#123;            item.items.forEach((row: any) &#x3D;&gt; &#123;                if (row.status &#x3D;&#x3D;&#x3D; 99) &#123;                    row.img &#x3D; require(&quot;..&#x2F;images&#x2F;img2.png&quot;);                &#125;            &#125;);        &#125;);        newData.value &#x3D; [...res.data?.data, ...newData.value];  &#x2F;&#x2F; 合并新老数据        nowIndex.value &#x3D; res.data?.data.length   &#x2F;&#x2F;拿到回到新数据的第一条，即老数据的长度        if (flag &amp;&amp; itemRefs.value.length) &#123;            nextTick(() &#x3D;&gt; &#123;                scrollContent.value.scrollLeft &#x3D; itemRefs.value[res.data?.data.length].offsetLeft - itemRefs.value[0].offsetLeft;                            &#125;);            console.log(itemRefs.value[0].offsetLeft)        &#125;    &#125;);&#125;;&#x2F;&#x2F;  回到指定位置const goToday &#x3D; ()&#x3D;&gt;&#123;  scrollContent.value.scrollLeft &#x3D; itemRefs.value[nowIndex.value].offsetLeft - itemRefs.value[0].offsetLeft;&#125;&lt;&#x2F;script&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5页面如何跳转小程序</title>
      <link href="/star/2024/0611665161.html"/>
      <url>/star/2024/0611665161.html</url>
      
        <content type="html"><![CDATA[<h3 id="H5页面如何跳转小程序"><a href="#H5页面如何跳转小程序" class="headerlink" title="H5页面如何跳转小程序"></a>H5页面如何跳转小程序</h3><p><a href="%5Bhttps://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/url-scheme.html%5D(https://cloud.tencent.com/developer/tools/blog-entry?target=https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/url-scheme.html&source=article&objectId=2389076)">官方地址</a></p><p>想要简单，直接用<code>明文 URL Scheme</code></p><h4 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h4><p>微信登陆后，需要指定跳转的小程序登录，根据以下步骤配置：<code>设置-隐私与安全-明文scheme拉起此小程序-配置你要跳转的页面-这里需要使用管理员扫码才能配置成功</code></p><h4 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h4><p>在配置成功后，利用<code>a标签跳转</code></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>weixin://dl/business/appid=填写AppId&amp;path=这里填步骤一配置的路径&amp;query=随便填<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><ol><li>【必填】APPID：通过明文 URL Scheme 打开小程序的 appid ；</li><li>【必填】PATH：通过明文 URL Scheme 打开小程序的页面 path ，必须是已经发布的小程序存在的页面，不可携带 query；</li><li>【选填】QUERY：通过明文 URL Scheme 打开小程序的 query ，最大512个字符，只支持数字，大小写英文以及部分特殊字符：!#$&amp;’()*+,&#x2F;:;&#x3D;?@-._~%&#96;，需要url_encode；</li><li>【选填】ENV_VERSION：要打开的小程序版本,正式版为release，体验版为trial，开发版为develop，仅在微信外打开时生效。注意：若不填写，则默认打开正式版小程序。</li></ol><p>共有两种方法，这是其中一种，比较简单，另一种比较复杂。<a href="https://developers.weixin.qq.com/minigame/dev/wxcloud/guide/staticstorage/jump-miniprogram.html">另一种的官网</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何利用el-table的selection多选框实现单选的效果</title>
      <link href="/star/2024/052866516.html"/>
      <url>/star/2024/052866516.html</url>
      
        <content type="html"><![CDATA[<h3 id="如何利用el-table的selection多选框实现单选的效果"><a href="#如何利用el-table的selection多选框实现单选的效果" class="headerlink" title="如何利用el-table的selection多选框实现单选的效果"></a>如何利用el-table的selection多选框实现单选的效果</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><pre class="language-vue" data-language="vue"><code class="language-vue">  &lt;app-table ref&#x3D;&quot;tableSF&quot; height&#x3D;&quot;500px&quot; header-row-class-name&#x3D;&quot;only&quot; :data&#x3D;&quot;addSuiFangData&quot; @select&#x3D;&quot;handleSelectionChange&quot;&gt;            &lt;app-table-column type&#x3D;&quot;selection&quot; width&#x3D;&quot;55&quot;&gt;&lt;&#x2F;el-table-column&gt;            &lt;app-table-column label&#x3D;&quot;随访包名称&quot; prop&#x3D;&quot;planName&quot;&gt;&lt;&#x2F;app-table-column&gt;&lt;&#x2F;app-table&gt;</code></pre><p><code>data：数据绑定</code></p><p><code>selection-change：选择改变，拿到的参数是选择的那项，不要用这个，他这个数据好像底层做了处理，无法立即拿到</code></p><p><code>select：选中触发</code></p><h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><pre class="language-vue" data-language="vue"><code class="language-vue">const selectionSF &#x3D; ref() &#x2F;&#x2F; 存储选中，后续调接口用const tableSF &#x3D; ref()  &#x2F;&#x2F; 拿到实例const handleSelectionChange &#x3D; (arr: any, row: any) &#x3D;&gt; &#123;    &#x2F;&#x2F; arr是你选中的组成的数组，row是你选中的当前项    selectionSF.value &#x3D; row;  &#x2F;&#x2F; 存储，后续调接口要    if (arr.length &gt; 1) &#123;  &#x2F;&#x2F; 如果选中的长度大于1        tableSF.value.clearSelection();  &#x2F;&#x2F; 清空全部选中        tableSF.value.toggleRowSelection(row);  &#x2F;&#x2F; 选中当前    &#125;&#125;;</code></pre><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style scoped>::v-deep .only .el-table-column--selection</span> <span class="token punctuation">&#123;</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden <span class="token important">!important</span><span class="token punctuation">;</span>  // 隐藏但占用原有位置<span class="token punctuation">&#125;</span>&lt;/style></code></pre><p><code>注意：如果一个页面有两个表格，一个不需要全选框，一个需要全选框。这样css的样式会混淆！</code><br><code>第一种方法就是封装成两个组件，通过scoped把两套代码的样式隔离。</code><br><code>第二种方法就是利用table组件提供的header-row-class-name这个api</code></p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将对象中的每个值转换为number</title>
      <link href="/star/2024/052866512.html"/>
      <url>/star/2024/052866512.html</url>
      
        <content type="html"><![CDATA[<h3 id="如何将对象中的每个值转换为number？"><a href="#如何将对象中的每个值转换为number？" class="headerlink" title="如何将对象中的每个值转换为number？"></a>如何将对象中的每个值转换为number？</h3> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> 接收属性 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> <span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Object.entries() 方法返回一个给定对象自身可枚举属性的键值对数组。</code></p><p><code> Object.fromEntries() 把键值对列表转换为一个对象</code></p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC端横向滚动---Vue3</title>
      <link href="/star/2024/05153563711.html"/>
      <url>/star/2024/05153563711.html</url>
      
        <content type="html"><![CDATA[<h3 id="PC端横向滚动—Vue3-md"><a href="#PC端横向滚动—Vue3-md" class="headerlink" title="PC端横向滚动—Vue3.md"></a>PC端横向滚动—Vue3.md</h3><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;scroll-container&quot; @mousedown&#x3D;&quot;startDrag&quot; @mousemove&#x3D;&quot;onDrag&quot; @mouseup&#x3D;&quot;stopDrag&quot; @mouseleave&#x3D;&quot;stopDrag&quot;&gt;    &lt;div class&#x3D;&quot;scroll-content&quot; ref&#x3D;&quot;scrollContent&quot;&gt;     &lt;1--不一定要这样，放入需要滚动的列表即可，外部一定要套两层，第一层是确定他的框架，超过了就隐藏，第二层则是设置他的滚动以及他的滚动距离--&gt;      &lt;div class&#x3D;&quot;scroll-item&quot; v-for&#x3D;&quot;item in items&quot; :key&#x3D;&quot;item.id&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;import &#123; ref &#125; from &#39;vue&#39;;const scrollContent &#x3D; ref(null);const items &#x3D; ref([      &#123; id: 1, name: &#39;Item 1&#39; &#125;,      &#123; id: 2, name: &#39;Item 2&#39; &#125;,      &#123; id: 3, name: &#39;Item 3&#39; &#125;,      &#123; id: 4, name: &#39;Item 4&#39; &#125;,      &#123; id: 5, name: &#39;Item 5&#39; &#125;,      &#123; id: 6, name: &#39;Item 6&#39; &#125;]);let isDragging &#x3D; false;let startX &#x3D; 0;let scrollLeft &#x3D; 0;&#x2F;&#x2F; isDragging 当用户鼠标按下，isDragging设置为真，为后面鼠标移动事件做铺垫const startDrag &#x3D; (e) &#x3D;&gt; &#123;     isDragging &#x3D; true;     startX &#x3D; e.pageX - scrollContent.value.offsetLeft;     scrollLeft &#x3D; scrollContent.value.scrollLeft;  &#x2F;&#x2F;可见内容与实际内容距离&#125;; const onDrag &#x3D; (e) &#x3D;&gt; &#123;    if (!isDragging) return;      e.preventDefault();      const x &#x3D; e.pageX - scrollContent.value.offsetLeft;      const walk &#x3D; (x - startX) * 2; &#x2F;&#x2F; 滚动速度      scrollContent.value.scrollLeft &#x3D; scrollLeft - walk; &#125;;&#x2F;&#x2F; 鼠标事件抬起 isDragging设为false,让鼠标移动事件失效const stopDrag &#x3D; () &#x3D;&gt; &#123;      isDragging &#x3D; false;&#125;;&lt;&#x2F;script&gt;&lt;style scoped&gt;.scroll-container &#123;  display: flex;  align-items: center;  overflow: hidden;  user-select: none; &#x2F;* 防止拖动时选择文本 *&#x2F;&#125;.scroll-content &#123;  display: flex;  overflow-x: auto;  scroll-behavior: smooth;&#x2F;* scroll-behavior属性包括： smooth | auto; *&#x2F;&#x2F;* auto: 默认值，表示滚动框立即滚动到指定位置。 smooth 表示允许滚动时采用平滑过渡，而不知直接滚动到相应位置，最常见的比如回到顶部按钮和锚点。 *&#x2F;  cursor: grab;  width: 100%; &#x2F;* 根据需要调整宽度*&#x2F;&#125;.scroll-content:active &#123;  cursor: grabbing;  &#x2F;&#x2F; 爪子&#125;.scroll-item &#123;  min-width: 100px;  margin: 0 10px;  padding: 10px;  background-color: #f0f0f0;  border: 1px solid #ccc;  text-align: center;  white-space: nowrap;&#125;&#x2F;* 隐藏滚动条 这样用户体验更好 *&#x2F;::-webkit-scrollbar &#123;  width: 0;  height: 0;  color: transparent;&#125;&lt;&#x2F;style&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp跳转页面传对象类型的数据问题</title>
      <link href="/star/2024/0510356371.html"/>
      <url>/star/2024/0510356371.html</url>
      
        <content type="html"><![CDATA[<h3 id="uniapp跳转页面传对象类型的数据问题"><a href="#uniapp跳转页面传对象类型的数据问题" class="headerlink" title="uniapp跳转页面传对象类型的数据问题"></a>uniapp跳转页面传对象类型的数据问题</h3><p>你跳转页面传对象类型，第二个页面拿到的数据会是<code>[object,object]</code>,这是你会想着转<code>JSON</code>之后传过去，你这样传过去能获取到为字符串的数据，此时你会想着使用<code>JSON.parse()</code>去给他反序列化回来，此时会报一个<code>JOSN.parse()报错Unexpected end of JSON input at JSON.parse (＜anonymous＞)</code>错误，但是你不反序列化又不行，因为你需要这组数据。</p><h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><p>1.先对数据进行序列化，再编码，进行传递</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">uni<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/pages/doctor/healthServiceobj=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2.接收数据后，先解码，再反序列化即可</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>obj<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    infoObj<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何中途关闭axios请求？</title>
      <link href="/star/2024/0430315637.html"/>
      <url>/star/2024/0430315637.html</url>
      
        <content type="html"><![CDATA[<h3 id="如何中途关闭axios请求"><a href="#如何中途关闭axios请求" class="headerlink" title="如何中途关闭axios请求"></a>如何中途关闭axios请求</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./node_modules/axios/dist/axios.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token comment">// #0. 原生的 AJAX 有取消请求的方法，xhr.abort()</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>  <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"oCancel"</span><span class="token operator">></span>取消请求<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"oBtn"</span><span class="token operator">></span>发请求<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">// #1 创建全局变量，目的是为了存储取消请求的那个函数</span>    <span class="token keyword">let</span> cancel <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    oBtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'https://api-hmugo-web.itheima.net/api/public/v1/home/swiperdata'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// #2 配置 cancelToken 参数</span>        <span class="token literal-property property">cancelToken</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">axios<span class="token punctuation">.</span>CancelToken</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// c => 就是关闭当前请求的函数</span>          cancel <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    oCancel<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// #3</span>      <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3数据过度嵌套问题</title>
      <link href="/star/2024/0410356375.html"/>
      <url>/star/2024/0410356375.html</url>
      
        <content type="html"><![CDATA[<h3 id="报错-Unhandled-error-during-execution-of-render-function"><a href="#报错-Unhandled-error-during-execution-of-render-function" class="headerlink" title="报错 Unhandled error during execution of render function"></a>报错 Unhandled error during execution of render function</h3><p>场景：在我定义一个form表单数据，由于后端接口给我的数据是过度嵌套，我根据后端格式定义在页面表单时，发生<code>Unhandled error during execution of render function </code>报错。</p><p>原因：过度嵌套，表格嵌套使用没问题，但是新增这种表单嵌套会出现这种问题</p><p>解决：要么结构，要么让后端别嵌套那么多层</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp中，scroll-x为true失效问题</title>
      <link href="/star/2024/011235637.html"/>
      <url>/star/2024/011235637.html</url>
      
        <content type="html"><![CDATA[<h3 id="uniapp中，scroll-x为true失效问题"><a href="#uniapp中，scroll-x为true失效问题" class="headerlink" title="uniapp中，scroll-x为true失效问题"></a>uniapp中，scroll-x为true失效问题</h3><p>1.scroll-view中的子元素，不能使用浮动float</p><p>2.scroll-view中外层容器使用display：flex是无效的</p><p>3.若想实现flex横向效果，请将需要滑动的子元素设置为display:inline-block并为其设置宽高</p><p>4.外层容器添加属性 overflow:hidden;white-space:nowrap;</p><p>5.子元素的每一项不能使用flex布局，否则会失效</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp顶部颜色如何设置成渐变色？</title>
      <link href="/star/2024/010935637.html"/>
      <url>/star/2024/010935637.html</url>
      
        <content type="html"><![CDATA[<p><code>第一步：在pages.json中</code></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"pages"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span><span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"pages/index/index"</span><span class="token punctuation">,</span><span class="token property">"style"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"navigationBarTitleText"</span><span class="token operator">:</span> <span class="token string">"工作台"</span><span class="token punctuation">,</span><span class="token property">"navigationBarBackgroundColor"</span><span class="token operator">:</span> <span class="token string">"#ecfffc"</span><span class="token punctuation">,</span> <span class="token comment">// 背景</span><span class="token property">"navigationStyle"</span><span class="token operator">:</span> <span class="token string">"custom"</span>                  <span class="token comment">// 当设置 "navigationStyle":"custom" 取消原生导航栏后，由于窗体为沉浸式，占据了状态栏位置</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p><code>第二步：找到你所需要设置的页面,设置渐变即可</code></p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;   &lt;view class&#x3D;&quot;top&quot; ref&#x3D;&quot;top&quot;&gt;&lt;&#x2F;view&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;&lt;&#x2F;script&gt;&lt;style scoped lang&#x3D;&quot;scss&quot;&gt;    .top &#123;width: 100%;height: 88rpx;background: linear-gradient(90deg,rgb(207, 241, 223) 0%,rgb(242, 251, 236) 100%);&#125;&lt;&#x2F;style&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp scroll-view 隐藏滚动条</title>
      <link href="/star/2023/122735631.html"/>
      <url>/star/2023/122735631.html</url>
      
        <content type="html"><![CDATA[<h2 id="uniapp-scroll-view-隐藏滚动条"><a href="#uniapp-scroll-view-隐藏滚动条" class="headerlink" title="uniapp scroll-view 隐藏滚动条"></a>uniapp scroll-view 隐藏滚动条</h2><p><strong>方式1：</strong></p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">/deep/ ::-webkit-scrollbar</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>方式2：</strong></p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">::-webkit-scrollbar</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>注意：</strong><br>如果在样式中加入了<code>scoped</code>属性，即是对局部进行样式私有化，此时以上两种均不生效。</p><p>解决：在外部再写一个style,放非私有化样式，将已死代码放入其中，让他们进行样式穿透即可</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element-ui中table组件拖拽</title>
      <link href="/star/2023/12146653.html"/>
      <url>/star/2023/12146653.html</url>
      
        <content type="html"><![CDATA[<h2 id="element-ui中table组件拖拽"><a href="#element-ui中table组件拖拽" class="headerlink" title="element-ui中table组件拖拽"></a>element-ui中table组件拖拽</h2><h3 id="HTML结构"><a href="#HTML结构" class="headerlink" title="HTML结构"></a>HTML结构</h3><pre class="language-markup" data-language="markup"><code class="language-markup">&lt;el-table           ref="dragRef"           :data="tableData"   // 绑定的数组          v-loading="loading"  // 加载动画          width="100%"           :default-sort="&#123;                         prop: tableSearchParam.sortField,                          order:tableSearchParam.sortType                         &#125;"   // 默认排列顺序          @sort-change="tableSortChange"  // 当表格的排序条件发生变化的时候会触发该事件          :header-cell-style="&#123;textAlign:'center',&#125;"  // 标头样式          :cell-style="&#123;textAlign:'center',&#125;"    // 表单样式          highlight-current-row     // 选中高亮          :row-key="(row) => row.kid"   // 行的key值，一定要绑定唯一值          @select-all="selectFreeAll"   // 选中全部  这里我是做批量免费，批量删除的，与拖拽无关          @select="selectFree"          // 多选，同上          >    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selection<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>  // 复选框    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>kid<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sort<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>排序<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span></code></pre><h3 id="Vue逻辑"><a href="#Vue逻辑" class="headerlink" title="Vue逻辑"></a>Vue逻辑</h3><p><a href="https://www.itxst.com/vue-draggable/tutorial.html">vue-draggable中文文档</a></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// #1 引入sortable.js,你们也可以npm下载</span><span class="token comment">//&lt;script src="https://www.itxst.com/package/sortable/Sortable.min.js">&lt;/script></span><span class="token comment">// npm install sortablejs --save    npm下载</span><span class="token comment">// import Sortable from "sortablejs";   导入</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tableData：<span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token function">tableSortChange</span><span class="token punctuation">(</span><span class="token parameter">column<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> order</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>column<span class="token punctuation">.</span>order<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'warning'</span><span class="token punctuation">,</span>                <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'请重试'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//偶尔会为null，估计是框架bug</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>tableSearchParam<span class="token punctuation">.</span>sortField <span class="token operator">=</span> column<span class="token punctuation">.</span>prop            <span class="token keyword">this</span><span class="token punctuation">.</span>tableSearchParam<span class="token punctuation">.</span>sortType <span class="token operator">=</span> column<span class="token punctuation">.</span>order            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tableUpdateData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用接口更新</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">initSortable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment">// 存储Vue实例，后面创建的实例会指向window</span>            <span class="token comment">// 获取表格row的父节点</span>            <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span><span class="token string">'dragRef'</span><span class="token punctuation">]</span><span class="token operator">?.</span>$el<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>                <span class="token string">".el-table__body > tbody"</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建拖拽实例,实例中的this指向window，因此需要借用that</span>            <span class="token keyword">new</span> <span class="token class-name">Sortable</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">animation</span><span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token comment">//动画</span>                <span class="token literal-property property">disabled</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// false 启用拖拽</span>                <span class="token comment">// 开始拖动事件</span>                <span class="token function-variable function">onStart</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"开始拖动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token comment">// 结束拖动事件</span>                <span class="token function-variable function">onEnd</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>                    newIndex<span class="token punctuation">,</span>                    oldIndex                <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//oldIndex为拖动前索引，newIndex为拖动后索引</span>                    <span class="token comment">// currRow为你删除的那一项，splice返回值是你删除的一个数组</span>                    <span class="token keyword">const</span> currRow <span class="token operator">=</span> that<span class="token punctuation">.</span>tableData<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>oldIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment">// 拿到你删除的给他放入到你拖动后的位置</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>newIndex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> currRow<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token keyword">let</span> tableIdList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 将拖拽后的数组id进行重新排序</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                      tableIdList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>alivid<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                                        <span class="token comment">// 请求排序接口。这个赋值是，所需参数</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>addItemList <span class="token operator">=</span> tableIdList                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sumAddVideo</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>以上就是table拖拽的全部逻辑</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element-ui中tree组件的同级拖拽</title>
      <link href="/star/2023/12026651.html"/>
      <url>/star/2023/12026651.html</url>
      
        <content type="html"><![CDATA[<h2 id="element-ui中tree组件的同级拖拽"><a href="#element-ui中tree组件的同级拖拽" class="headerlink" title="element-ui中tree组件的同级拖拽"></a>element-ui中tree组件的同级拖拽</h2><h3 id="HTML结构"><a href="#HTML结构" class="headerlink" title="HTML结构"></a>HTML结构</h3><pre class="language-markup" data-language="markup"><code class="language-markup"> &lt;el-tree           style="margin-top: 20px;"  // 样式          :data="treeList"           // 绑定的tree数组          node-key="id"              // 每个节点的标识，绑定data后，你要根据每一项的唯一值去绑定          :highlight-current="true"  // 选中高亮          @node-click="doChoose"     // 某个项被点击时的回调，能拿到该项的所有数据          :default-expand-all="false"   // 不展开所有树节点          :expand-on-click-node="true"  // 点击节点打开          :default-expanded-keys="expandedKeys" // 默认展开节点的数组          draggable // 开启可拖拽          :allow-drop="allowDrop"  // 拖拽时判定目标节点能否被放置          @node-drop="handleDrop"  // 拖拽成功完成时触发的事件 在这里发送请求，调用刷新列表接口          >     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>custom-tree-node<span class="token punctuation">"</span></span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; node, data &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span> &#123;[data.title || data.name]&#125;(章节)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>custom-tree-node-button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>()=>doDrawer('修改')<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 修改             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delData('删除')<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 删除             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>() => videoCourse(node, data)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 视频课程             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>() => LiveCourse(node, data)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 直播课程             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tree</span><span class="token punctuation">></span></span></code></pre><h3 id="Vue逻辑"><a href="#Vue逻辑" class="headerlink" title="Vue逻辑"></a>Vue逻辑</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">treeList</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token keyword">async</span> <span class="token function">handleDrop</span><span class="token punctuation">(</span><span class="token parameter">draggingNode<span class="token punctuation">,</span> dropNode<span class="token punctuation">,</span> dropType<span class="token punctuation">,</span> ev</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>treeList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token comment">// 由于接口参数需要顺序调整的Id，存放在arr中</span>            <span class="token comment">// 调用顺序调整接口</span>            <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">admin_jquery_ajax</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">'/api/xxx'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">ids</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>ret <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                    <span class="token comment">// 请求成功后，调用刷新列表接口</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSectionTree</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sectionData<span class="token punctuation">.</span>course_id<span class="token punctuation">)</span>                 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token comment">// 由于拖动的频率比较高，这里就不打印成功提示信息了</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 失败提示信息</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 拖拽时判定目标节点能否被放置</span>        <span class="token comment">// 'prev'、'inner' 和 'next'，分前、插入、后</span>        <span class="token function">allowDrop</span><span class="token punctuation">(</span><span class="token parameter">draggingNode<span class="token punctuation">,</span> dropNode<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>draggingNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>level <span class="token operator">===</span> dropNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>level<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>draggingNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>parentId <span class="token operator">===</span> dropNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>parentId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//inner类型为插入，不进入判断</span>                    <span class="token comment">// 只有prev和next则返回true</span>                    <span class="token keyword">return</span> type <span class="token operator">===</span> <span class="token string">"prev"</span> <span class="token operator">||</span> type <span class="token operator">===</span> <span class="token string">"next"</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 不同级进行处理</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>以上就是element-ui中tree组件的同级拖拽</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element-ui 时间日期选择器datetimerange类型限制类型到当前时分</title>
      <link href="/star/2023/11303299.html"/>
      <url>/star/2023/11303299.html</url>
      
        <content type="html"><![CDATA[<h2 id="element-ui-时间日期选择器限制类型到当前时分"><a href="#element-ui-时间日期选择器限制类型到当前时分" class="headerlink" title="element-ui 时间日期选择器限制类型到当前时分"></a>element-ui 时间日期选择器限制类型到当前时分</h2><p>​     以前做的主要是<code>datatime</code>类型的时间日期选择器去限制到过去的日期（精确到时分），而现在做的是<code>datetimerange</code>类型的，它支持<code>disabledDate（专门限制日期的属性）</code>属性，但是对于<code>selectableRange（专门限制时分的属性）</code>属性并不生效。在网上看了篇文章，任然无法解决<code>datetimerange</code>类型<code>selectableRange</code>失效问题。网络上全是提出<code>datetimerange</code>类型<code>selectableRange</code>失效问题，并没有看见人怎么解决，解决的都是些<code>datatime</code>类型的，但是这种类型本来就支持。因此我在这里记录一下本篇。</p><p>我们这里使用的是滚动模式，有人在滚动模式中不仅仅想要限制时分，也要想限制秒数，但是我翻看<code>element-ui</code>源码发现并不支持秒的限制，箭头模式也只支持时的限制</p><p><strong>以下是滚动模式源码</strong></p><p><a href="https://img-blog.csdnimg.cn/direct/3c9890e03daa46b7a45e71b0ee282218.jpeg">图片视图</a></p><h3 id="那我们如何去禁言时分？"><a href="#那我们如何去禁言时分？" class="headerlink" title="那我们如何去禁言时分？"></a>那我们如何去禁言时分？</h3><h4 id="HTML结构"><a href="#HTML结构" class="headerlink" title="HTML结构"></a>HTML结构</h4><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>timeValue<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>直播时间<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;el-date-picker                    align="right"         //对齐方式                    @change="dateChange"  //当你选择日期后，点击确认触发，这个可以控制你给后端的日期                    v-model="insertData.timeValue"  // 绑定值                    type="datetimerange"  // datetimerange类型                    range-separator="至"                     start-placeholder="开始日期"                     end-placeholder="结束日期"                    :picker-options="pickerOption()"                    format="yyyy-MM-dd HH:mm:ss"   // 选择后显示的格式                    :default-time="defaultTime"    // 默认时间                    >     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-date-picker</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span></code></pre><p>限制时间主要是通过<code>picker-options</code>属性去控制，配合<code>default-time</code>跳转到规定时间</p><p><code>picker-options</code>中主要用到两个配置项，<code>disabledDate</code>和<code>onClick</code>，第一个是限制日期，第二个是选中后回调，我们可以通过这个回调，拿到你选择的两个时间点，再通过拿到他的实例去限制时分，不多说，上代码</p><p>注意：<code>网上很多人都是把picker-options定义在data中的，我这里是定义在methods中，你也可以将他定义在data</code></p><h3 id="VUE代码"><a href="#VUE代码" class="headerlink" title="VUE代码"></a>VUE代码</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token function">pickerOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                <span class="token function-variable function">disabledDate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">></span> time<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function">onPick</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> maxDate<span class="token punctuation">,</span>minDate<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>                        minTimePicker<span class="token punctuation">,</span>                        maxTimePicker                    <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs  <span class="token comment">// 点击时，他只会拿到这个组件的实例，通过这个实例拿到两个时间对象，去这两个事件对象中禁用时间</span>                    <span class="token comment">// 封装时间格式函数，当然你也可以使用第三方库</span>                    <span class="token keyword">function</span> <span class="token function">timeConversion</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">const</span> inputDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">const</span> year <span class="token operator">=</span> inputDate<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">const</span> month <span class="token operator">=</span> inputDate<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 月份从0开始，需要加1</span>                        <span class="token keyword">const</span> date <span class="token operator">=</span> inputDate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">let</span> hours <span class="token operator">=</span> inputDate<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        hours <span class="token operator">=</span> hours <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> hours <span class="token operator">:</span> hours                        <span class="token keyword">let</span> minutes <span class="token operator">=</span> inputDate<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        minutes <span class="token operator">=</span> minutes <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> minutes <span class="token operator">:</span> minutes                        <span class="token keyword">let</span> seconds <span class="token operator">=</span> inputDate<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        seconds <span class="token operator">=</span> seconds <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> seconds <span class="token operator">:</span> seconds                        <span class="token keyword">const</span> formattedDate <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>year<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>month<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>date<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>hours<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>minutes<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>seconds<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> formattedDate<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// 如果是选择的小日期与当天相等，则设置当天的时分作为限制，否则不做限制</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">timeConversion</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">timeConversion</span><span class="token punctuation">(</span>minDate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//设置当天的时分作为限制</span>                        minTimePicker<span class="token punctuation">.</span>selectableRange <span class="token operator">=</span> <span class="token punctuation">[</span>                            <span class="token comment">// 这里一定要看清楚格式</span>                            <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token function">timeConversion</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'9999-12-01 23:59:59'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 不做限制</span>                        minTimePicker<span class="token punctuation">.</span>selectableRange <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// 如果是选择的大日期与当天相等，则设置当天的时分作为限制，否则不做限制</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">timeConversion</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">timeConversion</span><span class="token punctuation">(</span>maxDate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//设置当天的时分作为限制</span>                        maxTimePicker<span class="token punctuation">.</span>selectableRange <span class="token operator">=</span> <span class="token punctuation">[</span>                            <span class="token comment">// 这里一定要看清楚格式</span>                            <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token function">timeConversion</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2999-12-01 23:59:59'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 不做限制</span>                        maxTimePicker<span class="token punctuation">.</span>selectableRange <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// 这里是判断默认时间。如果都是当天，默认时间则是当天时分到23.59.59，否则就是00.00.00 到 23.59.59</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>maxDate <span class="token operator">&amp;&amp;</span> minDate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">timeConversion</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">timeConversion</span><span class="token punctuation">(</span>minDate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">timeConversion</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">timeConversion</span><span class="token punctuation">(</span>maxDate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultTime<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">timeConversion</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultTime<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'23:59:59'</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultTime<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'00:00:00'</span><span class="token punctuation">)</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultTime<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'23:59:59'</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>以上就是<code>datetimerange</code>类型的逻辑代码，一定要去他的实例中去拿<code>selectableRange</code>去限制时间，这些代码主要就是这个核心</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于阿里云的直播聊天（web主播端）</title>
      <link href="/star/2023/11292646.html"/>
      <url>/star/2023/11292646.html</url>
      
        <content type="html"><![CDATA[<h2 id="基于阿里云的直播聊天（web主播端）"><a href="#基于阿里云的直播聊天（web主播端）" class="headerlink" title="基于阿里云的直播聊天（web主播端）"></a>基于阿里云的直播聊天（web主播端）</h2><p>这篇是基于阿里云的聊天，某个用户进入直播间，指定某个用户的禁言和解除禁言，全体禁言和全体解除禁言，弥补网上缺乏此类文章，以此记录</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><pre class="language-HTML" data-language="HTML"><code class="language-HTML">&lt;!--这里使用的tab组件进行聊天与用户列表的切换--&gt;&lt;div class&#x3D;&quot;aside&quot;&gt;    &lt;el-tabs v-model&#x3D;&quot;activeName&quot; @tab-click&#x3D;&quot;handleClick&quot;&gt;        &lt;el-tab-pane label&#x3D;&quot;消息&quot; name&#x3D;&quot;first&quot;&gt;            &lt;div class&#x3D;&quot;info&quot;&gt;                &lt;!--消息列表模块--&gt;                &lt;div class&#x3D;&quot;chat&quot;&gt;                    &lt;p class&#x3D;&quot;infoTitle&quot;&gt;童鞋，欢迎来到直播间！为营造良好的学习交流氛围和健康的网络环境，请您在发言时文明用语。&lt;&#x2F;p&gt;                    &lt;div class&#x3D;&quot;list-wrap&quot; style&#x3D;&quot;overflow:auto&quot; ref&#x3D;&quot;listWrap&quot;&gt;                        &lt;!-- 虚拟列表所有项的高度 --&gt;                        &lt;div class&#x3D;&quot;scroll-bar&quot; ref&#x3D;&quot;scrollBar&quot; style&#x3D;&quot;top: 20px;position: relative;&quot;&gt;&lt;&#x2F;div&gt;                        &lt;!-- 虚拟列表项 --&gt;                        &lt;ul class&#x3D;&quot;list&quot; ref&#x3D;&quot;list&quot; v-if&#x3D;&quot;titleInfo?.live_status&#x3D;&#x3D;&#x3D;1&quot;&gt;                            &lt;li v-for&#x3D;&quot;item,index in showList&quot; :key&#x3D;&quot;index&quot;&gt;                                &lt;template v-if&#x3D;&quot;item?.userName&quot;&gt;                                    &lt;span class&#x3D;&quot;who&quot; style&#x3D;&quot;overflow:auto&quot;&gt;&#123;[item?.userName]&#125; :                                        &lt;span class&#x3D;&quot;what&quot; v-text&#x3D;&quot;item.Data&quot;&gt;&lt;&#x2F;span&gt;                                    &lt;&#x2F;span&gt;                                &lt;&#x2F;template&gt;                                &lt;template v-else style&#x3D;&quot;text-align: center;&quot;&gt;                                    &lt;p id&#x3D;&quot;userJoin&quot;&gt;&#123;[item.content]&#125;&lt;&#x2F;p&gt;                                &lt;&#x2F;template&gt;                            &lt;&#x2F;li&gt;                        &lt;&#x2F;ul&gt;                    &lt;&#x2F;div&gt;                &lt;&#x2F;div&gt;                &lt;!--发送消息模块--&gt;                &lt;div class&#x3D;&quot;sendInfo&quot;&gt;                    &lt;el-input v-model&#x3D;&quot;teacherMessage&quot; class&#x3D;&quot;srInfo&quot; type&#x3D;&quot;textarea&quot; :autosize&#x3D;&quot;&#123; minRows: 6, maxRows: 6&#125;&quot; placeholder&#x3D;&quot;请输入...&quot;&gt; &lt;&#x2F;el-input&gt;                    &lt;div style&#x3D;&quot;position: absolute;left: 13px;bottom: 5px;cursor: pointer;display: flex;&quot; v-if&#x3D;&quot;!allJy&quot; @click&#x3D;&quot;doChangeJy1&quot;&gt;                        &lt;img src&#x3D;&quot;&#x2F;static&#x2F;img&#x2F;index&#x2F;noChat.png&quot; alt&#x3D;&quot;&quot; style&#x3D;&quot;width: 18px;&quot;&gt;                        &lt;span style&#x3D;&quot;color:#fff;font-size:12px;&quot;&gt;解除禁言&lt;&#x2F;span&gt;                    &lt;&#x2F;div&gt;                    &lt;div style&#x3D;&quot;position: absolute;left: 13px;bottom: 5px;cursor: pointer;display: flex;&quot; v-if&#x3D;&quot;allJy&quot; @click&#x3D;&quot;doChangeJy&quot;&gt;                        &lt;img src&#x3D;&quot;&#x2F;static&#x2F;img&#x2F;index&#x2F;Chat.png&quot; alt&#x3D;&quot;&quot; style&#x3D;&quot;width: 18px;&quot;&gt;                        &lt;span style&#x3D;&quot;color:#fff;font-size:12px;&quot;&gt;全体禁言&lt;&#x2F;span&gt;                    &lt;&#x2F;div&gt;                    &lt;el-button v-if&#x3D;&quot;teacherMessage?.trim().length&quot; id&#x3D;&quot;sendInfoOk&quot; type&#x3D;&quot;primary&quot; :loading&#x3D;&quot;btnFlagz&quot; @click&#x3D;&quot;teacherSendInfo&quot; v-text&#x3D;&quot;btnFlagz ? &#39;发送中&#39; : &#39;发送&#39;&quot;&gt;&lt;&#x2F;el-button&gt;                &lt;&#x2F;div&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;el-tab-pane&gt;        &lt;el-tab-pane label&#x3D;&quot;学生&quot; name&#x3D;&quot;second&quot;&gt;            &lt;div class&#x3D;&quot;infinite-list-wrapper&quot; style&#x3D;&quot;overflow:auto&quot;&gt;                &lt;div class&#x3D;&quot;nowSum&quot; v-text&#x3D;&quot;&#39;当前在线人数：&#39;+userSum&quot;&gt;&lt;&#x2F;div&gt;                &lt;ul v-infinite-scroll&#x3D;&quot;load&quot; style&#x3D;&quot;overflow:auto&quot;&gt;                    &lt;li v-for&#x3D;&quot;item,index in userList&quot; style&#x3D;&quot;position: relative;&quot; :key&#x3D;&quot;index&quot;&gt;                        &lt;span class&#x3D;&quot;who&quot; style&#x3D;&quot;overflow:auto&quot; v-text&#x3D;&quot;item?.userId&quot;&gt;&lt;&#x2F;span&gt;                        &lt;span @click&#x3D;&quot;doHidden1(item,index)&quot; style&#x3D;&quot;position: absolute;right: 10px;top: 5px;cursor: pointer;&quot; v-if&#x3D;&quot;!item?.jy&quot;&gt;&lt;img src&#x3D;&quot;&#x2F;static&#x2F;img&#x2F;index&#x2F;noChat.png&quot; style&#x3D;&quot;width: 18px;&quot;&gt;&lt;&#x2F;span&gt;                        &lt;span @click&#x3D;&quot;doHidden2(item,index)&quot; style&#x3D;&quot;position: absolute;right: 10px;top: 5px;cursor: pointer;&quot; v-else&gt;&lt;img src&#x3D;&quot;&#x2F;static&#x2F;img&#x2F;index&#x2F;chat.png&quot; style&#x3D;&quot;width: 18px;&quot;&gt;&lt;&#x2F;span&gt;                    &lt;&#x2F;li&gt;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;el-tab-pane&gt;    &lt;&#x2F;el-tabs&gt;&lt;&#x2F;div&gt;</code></pre><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">// 用户进入,离开直播间样式#userJoin</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 310px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 28px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #333B47<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 17px 17px 17px 17px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>0.6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 27px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token selector">.aside</span> <span class="token punctuation">&#123;</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0 0 0 16px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 360px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #1B2128<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.info</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 336px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 546px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #262D37<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>.... 以下的样式就不写了，主要是看Vue代码</code></pre><p>以上两点，结构与样式不要过于关注，主要是看下面的<code>Vue</code>代码</p><h3 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h3><h4 id="1-引入SDK"><a href="#1-引入SDK" class="headerlink" title="1.引入SDK"></a>1.引入SDK</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">'https://g.alicdn.com/video-cloud-fe/aliyun-interaction-sdk/1.0.3/aliyun-interaction-sdk.web.min.js'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="2-开始代码"><a href="#2-开始代码" class="headerlink" title="2.开始代码"></a>2.开始代码</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 阿里云长连接初始化</span>        <span class="token literal-property property">InteractionEngine</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token literal-property property">InteractionInstance</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token literal-property property">deviceId</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token comment">// 推流所有参数对象</span>        <span class="token literal-property property">pushObj</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token comment">// 所有列表消息</span>        <span class="token literal-property property">showList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">// 消息传输</span>        <span class="token literal-property property">InteractionEventNames</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token literal-property property">InteractionMessageTypes</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token comment">// 人员列表</span>        <span class="token literal-property property">userSum</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 在线人数</span>        <span class="token literal-property property">userList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//人员列表</span>        <span class="token comment">// 禁言指定人员</span>        <span class="token literal-property property">muteUserList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">// 解除禁言</span>        <span class="token literal-property property">noMuteUserList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">// id消息组</span>        <span class="token literal-property property">groupId</span><span class="token operator">:</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 长连接初始化</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionEngine <span class="token operator">=</span> window<span class="token punctuation">.</span>AliyunInteraction<span class="token punctuation">.</span>InteractionEngine        <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionInstance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionEngine<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 判断是否为JSON</span>        <span class="token function">isJSON</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> str <span class="token operator">==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 消息滑到底部</span>        <span class="token function">scrollToBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span><span class="token string">'listWrap'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span><span class="token string">'listWrap'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scrollHeight            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 可以在进入时调用，或者在点击某个按钮时调用，但是，一旦调用，即聊天，禁言，用户进入与离开开始</span>        <span class="token function">aliyunSdk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* 1.获取sdk 所需 token            #1 踩坑1 阿里云官方说是调用 const tokenObj = await Appservices.getToken()去获取SDK所需的token，            不是，他根本没给你提供Appservices这个实例，很容易在这里让你的代码就夭折，这里是去掉后端的接口拿所需的token。            这里需要后端去看阿里云指定的代码            */</span>            <span class="token keyword">const</span> resToken <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">syhtAjaxGet</span><span class="token punctuation">(</span><span class="token string">'/api/live/getMessageToken'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">kid</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>openObj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'kid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//这个是我们后端需要知道在哪里聊天，这里看你们后端需要什么，每个都不一样</span>                <span class="token literal-property property">deviceId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionEngine<span class="token punctuation">.</span>getDeviceId<span class="token punctuation">,</span>  <span class="token comment">// 这里的deviceId，官方提供了，必传</span>                <span class="token literal-property property">deviceType</span><span class="token operator">:</span> <span class="token string">'web'</span>  <span class="token comment">// 我们是web端，传入web，必传</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token comment">// 2.根据token建立长连接</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionInstance<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span>resToken<span class="token punctuation">.</span>data<span class="token punctuation">.</span>AccessToken<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token comment">//这里不用管</span>                <span class="token keyword">const</span> params2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">extension</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'自定义'</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token comment">/* 3.创建消息组                必须我们这边发起人创建消息组，不能让后端创建，后端创建的无法进行用户禁言，                且安卓，IOS都需要我们传入给后端，用我们的groupId                */</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionInstance<span class="token punctuation">.</span><span class="token function">createGroup</span><span class="token punctuation">(</span>params2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 创建消息组成功</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>groupId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新创建的 groupId</span>                    <span class="token comment">// 将新创建的 groupId发送给后端，让后端记录给安卓与IOS使用</span>                   <span class="token keyword">await</span> <span class="token function">syhtAjaxPost</span><span class="token punctuation">(</span><span class="token string">'/api/live/addLiveGroup'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">kid</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>openObj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'kid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token literal-property property">group_id</span><span class="token operator">:</span> res<span class="token punctuation">.</span>groupId                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>groupId <span class="token operator">=</span> res<span class="token punctuation">.</span>groupId  <span class="token comment">// 存入data中，后续使用</span>                                        <span class="token comment">// 获取用户列表函数</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">groupId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>groupId<span class="token punctuation">,</span> <span class="token comment">// 消息组id</span>                        <span class="token literal-property property">userNick</span><span class="token operator">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'teacher_name'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 用户昵称</span>                        <span class="token literal-property property">userAvatar</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment">// 非必填，传入头像图片地址</span>                        <span class="token literal-property property">userExtension</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment">// 非必填，可传入额外的 JSONString 文本</span>                        <span class="token literal-property property">broadCastType</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 系统消息扩散类型，0： 不扩散；1：扩散到指定人; 2：扩散到群组</span>                        <span class="token literal-property property">broadCastStatistics</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否扩散统计类消息</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                    <span class="token comment">// 这里加入的人员与离开的，在第四步的监听中都能监听到</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionInstance<span class="token punctuation">.</span><span class="token function">joinGroup</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"加入消息组"</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 加入消息组失败</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                    <span class="token keyword">const</span> params1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">groupId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>groupId<span class="token punctuation">,</span> <span class="token comment">// 消息组id，传入我们开始存的</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionInstance<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span>params1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 获取消息组信息成功, res 为消息组信息对象</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">"消息组信息对象"</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 获取消息组信息失败</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 4.监听新来的消息，进入的人员，离开的人员</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionEventNames <span class="token operator">=</span> window<span class="token punctuation">.</span>AliyunInteraction<span class="token punctuation">.</span>InteractionEventNames                    <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionMessageTypes <span class="token operator">=</span> window<span class="token punctuation">.</span>AliyunInteraction<span class="token punctuation">.</span>InteractionMessageTypes                    <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionInstance<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>InteractionEventNames<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">eventData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到信息啦'</span><span class="token punctuation">,</span> eventData<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>                            type<span class="token punctuation">,</span>                          data<span class="token punctuation">,</span>                          messageId<span class="token punctuation">,</span>                          senderId<span class="token punctuation">,</span>                          senderInfo                        <span class="token punctuation">&#125;</span> <span class="token operator">=</span> eventData<span class="token punctuation">;</span>                        <span class="token comment">// 这里由于安卓和IOS给我的数据结构不同做些调整，你们根据自己的调整，this.isJSON()是否为JSON的函数封装</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isJSON</span><span class="token punctuation">(</span>senderInfo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            post <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>senderInfo<span class="token punctuation">)</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>showList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                                <span class="token literal-property property">userName</span><span class="token operator">:</span> post<span class="token punctuation">.</span>userNick<span class="token punctuation">,</span>                                <span class="token literal-property property">Data</span><span class="token operator">:</span> data                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>teacherMessage <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment">// 清空发言</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scrollToBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// 有新消息自动滑到底部</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isJSON</span><span class="token punctuation">(</span>senderInfo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isJSON</span><span class="token punctuation">(</span>senderInfo<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>showList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                                <span class="token literal-property property">userName</span><span class="token operator">:</span> senderInfo<span class="token punctuation">.</span>userNick<span class="token punctuation">,</span>                                <span class="token literal-property property">Data</span><span class="token operator">:</span> data                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>teacherMessage <span class="token operator">=</span> <span class="token string">''</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scrollToBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>showList<span class="token punctuation">,</span> <span class="token string">"接受信息2"</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token comment">// 由于聊天没有点赞，这里不用管</span>                            <span class="token keyword">case</span> <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionMessageTypes<span class="token punctuation">.</span>PaaSLikeInfo<span class="token operator">:</span>                                <span class="token comment">// 点赞事件 1001，data 为点赞数据</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token keyword">case</span> <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionMessageTypes<span class="token punctuation">.</span>PaaSUserJoin<span class="token operator">:</span>                                <span class="token comment">// 用户加入事件 1002，data 为直播间统计数据</span>                                <span class="token comment">// 如果说是老师本人则是您，如果是其他人进入这是用户名 + 进入直播间</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>senderInfo<span class="token punctuation">.</span>userNick <span class="token operator">===</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'teacher_name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token keyword">this</span><span class="token punctuation">.</span>showList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                                        <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">"您已进入直播间"</span>                                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                    <span class="token keyword">this</span><span class="token punctuation">.</span>showList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                                        <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>senderInfo<span class="token punctuation">.</span>userNick<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">已进入直播间</span><span class="token template-punctuation string">`</span></span>                                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                                <span class="token punctuation">&#125;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token keyword">case</span> <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionMessageTypes<span class="token punctuation">.</span>PaaSUserLeave<span class="token operator">:</span>                                <span class="token comment">// 用户离开事件 1003，与用户进入一样</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>senderInfo<span class="token punctuation">.</span>userNick <span class="token operator">===</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'teacher_name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token keyword">this</span><span class="token punctuation">.</span>showList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                                        <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">"您已离开直播间"</span>                                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                    <span class="token keyword">this</span><span class="token punctuation">.</span>showList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                                        <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>senderInfo<span class="token punctuation">.</span>userNick<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">已离开直播间</span><span class="token template-punctuation string">`</span></span>                                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                                <span class="token punctuation">&#125;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                               <span class="token comment">// 以下的禁言可以在监听这里处理，也可以在禁言的同时处理</span>                              <span class="token keyword">case</span> <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionMessageTypes<span class="token punctuation">.</span>PaaSMuteGroup<span class="token operator">:</span>                                <span class="token comment">// 互动消息组被禁言 1004</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                              <span class="token keyword">case</span> <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionMessageTypes<span class="token punctuation">.</span>PaaSCancelMuteGroup<span class="token operator">:</span>                                <span class="token comment">// 互动消息组取消禁言 1005</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                              <span class="token keyword">case</span> <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionMessageTypes<span class="token punctuation">.</span>PaaSMuteUser<span class="token operator">:</span>                                <span class="token comment">// 某个用户被禁言 1006，data 为用户信息</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                              <span class="token keyword">case</span> <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionMessageTypes<span class="token punctuation">.</span>PaaSCancelMuteUser<span class="token operator">:</span>                                <span class="token comment">// 某个用户被取消禁言 1007，data 为用户信息</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                              <span class="token keyword">default</span><span class="token operator">:</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 创建消息组失败</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 禁言全体</span>        <span class="token keyword">async</span> <span class="token function">doChangeJy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">groupId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>groupId<span class="token punctuation">,</span> <span class="token comment">// 消息组id</span>                <span class="token literal-property property">broadCastType</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 系统消息扩散类型，0： 不扩散；1：扩散到指定人; 2：扩散到群组</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionInstance<span class="token punctuation">.</span><span class="token function">muteAll</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 注意：muteAll</span>                <span class="token comment">// 消息组禁言成功</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>allJy <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>allJy                <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"全体禁言成功"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 消息组禁言失败</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"全体禁言失败"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 解除全体禁言</span>        <span class="token keyword">async</span> <span class="token function">doChangeJy1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">groupId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>groupId<span class="token punctuation">,</span> <span class="token comment">// 消息组id</span>                <span class="token literal-property property">broadCastType</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 系统消息扩散类型，0： 不扩散；1：扩散到指定人; 2：扩散到群组</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionInstance<span class="token punctuation">.</span><span class="token function">cancelMuteAll</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 注意：cancelMuteAll</span>                <span class="token comment">// 消息组禁言成功</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>allJy <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>allJy                <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"全体解除禁言成功"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 消息组禁言失败 </span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"全体解除禁言失败"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 指定单个禁言</span>        <span class="token keyword">async</span> <span class="token function">doHidden1</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> ind</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>muteUserList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>muteUserList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>userId<span class="token punctuation">)</span>            <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">groupId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>groupId<span class="token punctuation">,</span> <span class="token comment">// 消息组id</span>              <span class="token literal-property property">muteUserList</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>muteUserList<span class="token punctuation">,</span> <span class="token comment">// 需要禁言的用户列表，最大200个</span>              <span class="token comment">// 取消禁言的用户列表字段名为 cancelMuteUserList</span>              <span class="token literal-property property">muteTime</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 非必填，禁言的时间，单位为s，如果不传或者传0则采用默认禁言时间</span>              <span class="token literal-property property">broadCastType</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 系统消息扩散类型，0： 不扩散；1：扩散到指定人; 2：扩散到群组</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionInstance<span class="token punctuation">.</span><span class="token function">muteUser</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    item<span class="token punctuation">.</span>jy <span class="token operator">=</span> <span class="token operator">!</span>item<span class="token punctuation">.</span>jy                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token string">"禁言"</span><span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"禁言成功"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 禁言用户失败</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 解除单个禁言，特别注意，调用的是cancelMuteUser这个，文档写的是cancelMuteAll，妈的，害我一致没搞清楚，网上找了也没有遇到过这种问题的</span>        <span class="token comment">// 我当时在想是不是他单词写错了，结果他妈的还真是</span>        <span class="token function">doHidden2</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> ind</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>noMuteUserList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>noMuteUserList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>userId<span class="token punctuation">)</span>            <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">groupId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>groupId<span class="token punctuation">,</span> <span class="token comment">// 消息组id</span>              <span class="token literal-property property">cancelMuteUserList</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>noMuteUserList<span class="token punctuation">,</span> <span class="token comment">// 需要禁言的用户列表，最大200个</span>              <span class="token comment">// 取消禁言的用户列表字段名为 cancelMuteUserList</span>              <span class="token literal-property property">muteTime</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 非必填，禁言的时间，单位为s，如果不传或者传0则采用默认禁言时间</span>              <span class="token literal-property property">broadCastType</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 系统消息扩散类型，0： 不扩散；1：扩散到指定人; 2：扩散到群组</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionInstance<span class="token punctuation">.</span><span class="token function">cancelMuteUser</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              item<span class="token punctuation">.</span>jy <span class="token operator">=</span> <span class="token operator">!</span>item<span class="token punctuation">.</span>jy            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"解除禁言成功"</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 禁言用户失败</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 获取用户列表</span>        <span class="token keyword">async</span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">groupId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>groupId<span class="token punctuation">,</span> <span class="token comment">// 消息组id</span>              <span class="token literal-property property">sortType</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 排序方式,0-时间递增顺序，1-时间递减顺序</span>              <span class="token literal-property property">pageNum</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 分页拉取的索引下标,第一次调用传1，后续调用+1</span>              <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token comment">// 分页拉取的大小,默认20条，最大50条</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionInstance<span class="token punctuation">.</span><span class="token function">listGroupUser</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 获取消息组成员列表成功</span>                <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>                  total<span class="token punctuation">,</span> <span class="token comment">// 总数</span>                  userList<span class="token punctuation">,</span> <span class="token comment">// 返回的消息组的在线成员列表</span>                  hasMore<span class="token punctuation">,</span> <span class="token comment">// 是否还剩数据</span>                <span class="token punctuation">&#125;</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">"人员列表"</span><span class="token punctuation">)</span>                <span class="token comment">// 这里不用管，是处理数据，你们按照自己的来就行</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userList<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>userList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span>jy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            item<span class="token punctuation">.</span>jy <span class="token operator">=</span> <span class="token boolean">false</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userList<span class="token punctuation">.</span>length <span class="token operator">===</span> userList<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"此时数据不改变"</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userList<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> userList<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">eve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>eve<span class="token punctuation">.</span>userId<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                    userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>userId<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>userList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>                      <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span>jy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        item<span class="token punctuation">.</span>jy <span class="token operator">=</span> <span class="token boolean">false</span>                      <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userList<span class="token punctuation">.</span>length <span class="token operator">></span> userList<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                    userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">eve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>eve<span class="token punctuation">.</span>userId<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>userId<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>userList<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>                      <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span>jy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        item<span class="token punctuation">.</span>jy <span class="token operator">=</span> <span class="token boolean">false</span>                      <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>userSum <span class="token operator">=</span> total          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 获取消息组成员列表失败</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 断开长链接，在你退出时触发</span>        <span class="token function">stopAliYunSdk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>InteractionInstance<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">"长连接断开成功"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"长链接断开失败"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>坑点一</strong>：就是传入SDK所需要的token，文档写的是<code>const tokenObj = await Appservices.getToken();</code>通过<code>Appservices</code>去获取，其实不是，而是通过后端接口去获取的</p><p><strong>坑点二</strong>：取消指定用户的禁言，文档写的是<code>与之对应的是取消禁言消息组内指定成员接口：cancelMuteAll。</code>,不是他这么写的，他这里文档写错了，你如果按照他这样写，你拿到的永远是1005的状态码，而不是1007的状态码。正确的是<code>cancelMuteUser</code></p><p><strong>坑点三</strong>：要与安卓和IOS规定消息格式，不然会多出很多判断</p><p><strong>坑点四</strong>：<code>groupId</code>要由我们自己创建，而不是拿后端的，安卓与IOS的也是需要我们把<code>groupId</code>传给后端后，再去获取。不然禁言的时候会显示你没有权限禁言</p><p><strong>坑点五</strong>：你可能在发送消息以后无法拿到当前的用户名称，第一种情况是在你发送时，传递的参数用户名没传。第二种情况就是为了进入同一个消息组，在刷新之后无法获取用户名，这种情况你可以通过消息体带给安卓和ios，不然他们无法获取发送消息的名字</p><p><strong>坑点六</strong>：当你消息组创建完毕，将消息组Id传递给后端后，这里是对<strong>坑点五</strong>的补充，在刷新后，又会创建一次消息组，那么安卓与IOS的学生们则与你不会在同一个消息组，需要你通过后端，把你传递过去的消息组Id拿过来，加入，这里则不需要创建了。这里需要写一个判断，如果有消息Id,则不创建，没有则创建消息组。以上没有没写这段代码，就加一个<code>if</code>判断即可</p><p>以上就是基于阿里云聊天的全部代码逻辑与坑点</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求验证码接口直接返回一张图片，且打印成功的结果是一串乱码， 应该如何渲染？</title>
      <link href="/star/2023/11233563.html"/>
      <url>/star/2023/11233563.html</url>
      
        <content type="html"><![CDATA[<h3 id="请求验证码接口直接返回一张图片，且打印成功的结果是一串乱码，-应该如何渲染？"><a href="#请求验证码接口直接返回一张图片，且打印成功的结果是一串乱码，-应该如何渲染？" class="headerlink" title="请求验证码接口直接返回一张图片，且打印成功的结果是一串乱码， 应该如何渲染？"></a>请求验证码接口直接返回一张图片，且打印成功的结果是一串乱码， 应该如何渲染？</h3><p><strong>1.将请求改为blob类型</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取验证码</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getYz</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'/web-api/dunsi/captcha/***'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">'blob'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>**2.将file转成blob **</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token function">getYz</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getYz</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//请求</span>      <span class="token comment">// 转换成blod，同时根据res去设置type</span>      <span class="token keyword">const</span> myBlob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">window<span class="token punctuation">.</span>Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'image/png'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token comment">// 创建一个新的对象URL,该对象URL可以代表某一个指定的 File 对象或 Blob 对象.</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>imgVal <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>myBlob<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><p><strong>3.渲染与切换</strong></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--渲染--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeImg<span class="token punctuation">"</span></span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgVal<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 38px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 146px<span class="token punctuation">;</span><span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 切换</span><span class="token function">changeImg</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getYz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><p>就这样就写完了，但是这样无法植入cookie，致使后端拿不到，无法判断该验证码是否正确</p><p>改变写法：<code> document.querySelector(&#39;#xxx&#39;).src = $&#123;基地址&#125;/请求地址?t= + (new Date().getTime())</code>  </p><p>主要是看情况，用哪种写法情况不同写法不同</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于阿里云的混流直播</title>
      <link href="/star/2023/1120346.html"/>
      <url>/star/2023/1120346.html</url>
      
        <content type="html"><![CDATA[<h2 id="基于阿里云的混流直播"><a href="#基于阿里云的混流直播" class="headerlink" title="基于阿里云的混流直播"></a>基于阿里云的混流直播</h2><p>这里和上次的摄像头与直播共享无区别，但是这里只需要一个阿里云的SDK实例，且底层只需要创建一个video，因此混流无法做小屏<strong>拖拽</strong>，但是它支持画中画，因此无需小屏拖拽</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 注意:如果有判断展示与隐藏，这里不要使用v-if，不然底层不会帮你创建video实例， 阿里云应该是在渲染时给你创建的，v-if是创建与销毁，无法在更新中再创建,可以使用v-show--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>videoContainer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>finishLive1<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doShare<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>分享<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>finishLive<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>closeLive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>结束<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">pushClient</span><span class="token operator">:</span>AliRTSPusher<span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，  <span class="token comment">// 推流实例</span>            <span class="token literal-property property">urlTui</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment">// 推流地址 </span>            <span class="token literal-property property">cameraStreamId</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 摄像头</span>            <span class="token literal-property property">screenStreamId</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 屏幕共享</span>            <span class="token literal-property property">micStreamId</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token comment">// 音频</span>            <span class="token literal-property property">videoEffectManager</span><span class="token operator">:</span><span class="token keyword">null</span> <span class="token comment">//视频管理器实例对象</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 初始化</span>        <span class="token function">initVideo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 将容器ID传给SDK，SDK会在其中创建一个video标签并播放预览画面</span>            <span class="token keyword">const</span> videoEl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">setRenderView</span><span class="token punctuation">(</span><span class="token string">'videoContainer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置直播清晰度</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">setVideoQuality</span><span class="token punctuation">(</span><span class="token string">'720p_1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 推流</span>        <span class="token keyword">async</span> <span class="token function">openLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 通过接口获取推流地址</span>            <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">syhtAjaxGet</span><span class="token punctuation">(</span><span class="token string">'/api/live/xxx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 这个是打印成功的状态码</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connectStatusChange"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 这里非常重要，监听错误的状态，10012状态码是用户关闭直播共享，10011状态码是用户取消共享选择</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>errorCode <span class="token operator">===</span> <span class="token string">"video device not found"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"video device not found"</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 当用户关闭共享时，我们要关闭屏幕共享，关闭之前的音频摄像头，再次开启第二次的音频摄像头</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>errorCode <span class="token operator">===</span> <span class="token number">10012</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 关闭共享，如果不传id，则是关闭全部共享，由于我们这个直播只有一个共享状态，则关闭全部即可</span>                    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">stopScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 关闭指定的摄像头与音频，传入的值就是指定的</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">stopCamera</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cameraStreamId<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">stopMicrophone</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>micStreamId<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 重新开启新的摄像头与音频</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>cameraStreamId <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>micStreamId <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startMicrophone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 指定页面大小位置</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>videoEffectManager<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token punctuation">[</span>                      <span class="token punctuation">&#123;</span> <span class="token literal-property property">streamId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cameraStreamId<span class="token punctuation">,</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1280</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">720</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">1280</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">720</span><span class="token punctuation">,</span> <span class="token literal-property property">zOrder</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>                    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token comment">// 直接退出函数，因为在第一次的时候已经进行一次推流了</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取视频管理器实例对象</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>videoEffectManager <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">getVideoEffectManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 开启混流模式</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>videoEffectManager<span class="token punctuation">.</span><span class="token function">enableMixing</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 指定底层创建的video大小</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>videoEffectManager<span class="token punctuation">.</span><span class="token function">setMixingConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>              <span class="token literal-property property">videoWidth</span><span class="token operator">:</span> <span class="token number">1280</span><span class="token punctuation">,</span>              <span class="token literal-property property">videoHeight</span><span class="token operator">:</span> <span class="token number">720</span><span class="token punctuation">,</span>              <span class="token literal-property property">videoFramerate</span><span class="token operator">:</span> <span class="token number">30</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token comment">// 第一次开启音频，摄像头，并复制，让后续可以关闭指定的音频摄像头</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cameraStreamId <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>micStreamId <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startMicrophone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 由于初次只有摄像头和音频，并无共享，因此只指定第一次的直播流位置</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>videoEffectManager<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token punctuation">[</span>              <span class="token punctuation">&#123;</span> <span class="token literal-property property">streamId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cameraStreamId<span class="token punctuation">,</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1280</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">720</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">1280</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">720</span><span class="token punctuation">,</span> <span class="token literal-property property">zOrder</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 开始推流</span>            <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startPush</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>push_url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"推流成功"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token comment">// 将推流地址定义，防止后续要推流再去请求接口</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>urlTui <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token operator">?.</span>push_url        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">//分享</span>        <span class="token comment">/*        当我们点击分享时，我们要做的就是：        1.关闭之前的摄像头，音频的推流        2.开启屏幕分享        3.判断用户是否取消共享，如果取消，让用户回到音频摄像头        4.开启混流，指定两个位置，让大屏共享屏幕，小屏展示人像        */</span>         <span class="token keyword">async</span> <span class="token function">doShare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token comment">// 关闭所有音频，视频</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">stopCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">stopMicrophone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 关闭屏幕共享，防止上传屏幕共享存在，用户点击第二遍屏幕共享</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">stopScreenCapture</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>screenStreamId<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 开启新的音频，并赋值，后续用于指定位置</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cameraStreamId <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>micStreamId <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startMicrophone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 开启屏幕共享，由于是一个Promise，可以在他成功之后指定位置</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>screenStreamId <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startScreenCapture</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                <span class="token comment">// 指定大小屏位置</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>videoEffectManager<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token punctuation">[</span>              <span class="token punctuation">&#123;</span> <span class="token literal-property property">streamId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>screenStreamId<span class="token punctuation">,</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1280</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">720</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">1280</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">720</span><span class="token punctuation">,</span> <span class="token literal-property property">zOrder</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#123;</span> <span class="token literal-property property">streamId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cameraStreamId<span class="token punctuation">,</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1190</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">630</span><span class="token punctuation">,</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token literal-property property">zOrder</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">error</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                <span class="token comment">// 用户取消 10011</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>errorCode <span class="token operator">===</span> <span class="token number">10011</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token comment">// 关闭指定共享</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">stopScreenCapture</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>screenStreamId<span class="token punctuation">)</span>                  <span class="token comment">// 开启摄像头音频</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>cameraStreamId <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>micStreamId <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startMicrophone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//指定位置</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>videoEffectManager<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token punctuation">[</span>                      <span class="token punctuation">&#123;</span> <span class="token literal-property property">streamId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cameraStreamId<span class="token punctuation">,</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1280</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">720</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">1280</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">720</span><span class="token punctuation">,</span> <span class="token literal-property property">zOrder</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>                  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>             <span class="token comment">// 无论成功失败，都推流一次</span>             <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startPush</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>urlTui<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue实现盒子拖拽</title>
      <link href="/star/2023/11173299.html"/>
      <url>/star/2023/11173299.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue实现盒子拖拽"><a href="#Vue实现盒子拖拽" class="headerlink" title="Vue实现盒子拖拽"></a>Vue实现盒子拖拽</h3><p><strong>1.封装指令</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">directives</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">drag</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function-variable function">bind</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">let</span> odiv <span class="token operator">=</span> el<span class="token punctuation">;</span>              odiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"absolute"</span><span class="token punctuation">;</span> <span class="token comment">// 这一可以定义自己所需要的定位</span>              odiv<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> disX <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> odiv<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>                <span class="token keyword">let</span> disY <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> odiv<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">let</span> left <span class="token operator">=</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> disX<span class="token punctuation">;</span>                  <span class="token keyword">let</span> top <span class="token operator">=</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> disY<span class="token punctuation">;</span>                  odiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>                  odiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> top <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span><span class="token function-variable function">onmouseup</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                  document<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                  document<span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><strong>2.使用</strong></p><p>直接<code>v-drag</code>加入标签即可</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于阿里云的摄像头与屏幕分享共存</title>
      <link href="/star/2023/11163216.html"/>
      <url>/star/2023/11163216.html</url>
      
        <content type="html"><![CDATA[<h2 id="基于阿里云的摄像头与屏幕分享共存"><a href="#基于阿里云的摄像头与屏幕分享共存" class="headerlink" title="基于阿里云的摄像头与屏幕分享共存"></a>基于阿里云的摄像头与屏幕分享共存</h2><p>由于需求改变，由一开始的摄像头直播，转向屏幕分享直播，再到摄像头与屏幕共享同时存在的直播，由此记录</p><p>由于是共存，我的想法是创建两个阿里云的实例，最后同一个推流地址推流即可</p><h3 id="html结构"><a href="#html结构" class="headerlink" title="html结构"></a>html结构</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>titleInfo?.live_status === 1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>videoContainer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--videoContainer主要是指定大屏画面位置--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>finishLive1<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doShare<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>分享<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>finishLive<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>closeLive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>结束<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>smallVideoFlag<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doShareRef<span class="token punctuation">"</span></span>       <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>180px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>180px<span class="token punctuation">;</span>             <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>  &lt;!--定位至右下角-->            <span class="token property">object-fit</span><span class="token punctuation">:</span> fill<span class="token punctuation">;</span>   &lt;!--视频填充-->            <span class="token property">z-index</span><span class="token punctuation">:</span>999<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span>       <span class="token attr-name">&lt;!--防止大屏压制住小屏--</span><span class="token punctuation">></span></span>            id="videoContainerSmall"  >   <span class="token comment">&lt;!--videoContainerSmall主要是指定小屏画面位置--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">#videoContainerSmall video</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span>180px <span class="token important">!important</span><span class="token punctuation">;</span>  //设置合适的高度  <span class="token property">object-fit</span><span class="token punctuation">:</span> fill<span class="token punctuation">;</span>       // 小屏视频填充，大屏不要填充，让他自适应，不然内容会扭曲，小屏由于宽高小，则几乎没影响<span class="token punctuation">&#125;</span><span class="token selector">video::-webkit-media-controls-enclosure</span><span class="token punctuation">&#123;</span>       <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>   //关闭所有video的视频控件，主要是小屏是定位在大屏上的，关闭更有利于用户操作  <span class="token punctuation">&#125;</span></code></pre><h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>         <span class="token literal-property property">pushClient</span><span class="token operator">:</span>AliRTSPusher<span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//创建大屏推流实例</span>         <span class="token literal-property property">pushClientSmall</span><span class="token operator">:</span>AliRTSPusher<span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//创建小屏推流实例</span>         <span class="token literal-property property">urlTui</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token comment">//用于记录推流地址，方便后续同时推流，而不再二次调用推流接口</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 初始化大屏SDK</span>    <span class="token function">initVideo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 将容器ID传给SDK，SDK会在其中创建一个video标签并播放预览画面</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">setRenderView</span><span class="token punctuation">(</span><span class="token string">'videoContainer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置直播清晰度</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">setVideoQuality</span><span class="token punctuation">(</span><span class="token string">'720p_1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 初始化小屏SDK</span>    <span class="token function">initVideoSmall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pushClientSmall<span class="token punctuation">.</span><span class="token function">setRenderView</span><span class="token punctuation">(</span><span class="token string">'videoContainerSmall'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pushClientSmall<span class="token punctuation">.</span><span class="token function">setVideoQuality</span><span class="token punctuation">(</span><span class="token string">'720p_1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>          <span class="token comment">/*这里是由于阿里云它会根据绑定标签，每推流一次而创建一个video          因此分享屏幕可以点多次从而进行多次推流，导致阿里云底层帮你创建多个video          因此我们拿到该标签的子集，但是他是伪数组，需要转变为真数组，          且删除它的第1个，保留第0个，页面上就永远只有一个小屏          */</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"videoContainerSmall"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"videoContainerSmall"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"videoContainerSmall"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 大屏推流</span>    <span class="token keyword">async</span> <span class="token function">openLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//调用接口获取推流地址</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">syhtAjaxGet</span><span class="token punctuation">(</span><span class="token string">'/api/live/xxx'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">kid</span><span class="token operator">:</span>xxx<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connectStatusChange"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>errorCode <span class="token operator">===</span> <span class="token string">"video device not found"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"video device not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>errorCode <span class="token operator">===</span> <span class="token number">10012</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>smallVideoFlag <span class="token operator">=</span> <span class="token boolean">false</span>                <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">stopScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startMicrophone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 打开摄像头 麦克风</span>        <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startMicrophone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>urlTui <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token operator">?.</span>push_url   <span class="token comment">//推流地址</span>        <span class="token comment">// 开始推流</span>        <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startPush</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>push_url<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 小屏推流</span>    <span class="token keyword">async</span> <span class="token function">openLiveSmall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">syhtAjaxGet</span><span class="token punctuation">(</span><span class="token string">'/api/live/xxxl'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">kid</span><span class="token operator">:</span> xxx<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pushClientSmall<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connectStatusChange"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pushClientSmall<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>errorCode <span class="token operator">===</span> <span class="token string">"video device not found"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"video device not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>errorCode <span class="token operator">===</span> <span class="token number">10012</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 状态码为10012时，即屏幕共享关闭，此时需要停止屏幕共享推流，开启摄像头音频推流</span>                <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClientSmall<span class="token punctuation">.</span><span class="token function">stopScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 屏幕共享关闭</span>                <span class="token comment">// 打开摄像头 麦克风</span>                <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClientSmall<span class="token punctuation">.</span><span class="token function">startCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClientSmall<span class="token punctuation">.</span><span class="token function">startMicrophone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClientSmall<span class="token punctuation">.</span><span class="token function">startCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClientSmall<span class="token punctuation">.</span><span class="token function">startMicrophone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>urlTui <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token operator">?.</span>push_url        <span class="token comment">// 推流开始</span>        <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClientSmall<span class="token punctuation">.</span><span class="token function">startPush</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>push_url<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 关闭大屏直播  停止推流  关闭视频  关闭麦克风</span>    <span class="token keyword">async</span> <span class="token function">stopPushClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//调用关闭直播推流的接口</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">syhtAjaxGet</span><span class="token punctuation">(</span><span class="token string">'/api/live/xxx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>ret <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 关闭摄像头音频</span>              <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">stopCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">stopMicrophone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//停止推流</span>              <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">stopPush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 关闭小屏直播</span>    <span class="token keyword">async</span> <span class="token function">stopPushClient1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//调用关闭直播推流的接口</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">syhtAjaxGet</span><span class="token punctuation">(</span><span class="token string">'/api/live/xxx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>ret <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClientSmall<span class="token punctuation">.</span><span class="token function">stopCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClientSmall<span class="token punctuation">.</span><span class="token function">stopMicrophone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClientSmall<span class="token punctuation">.</span><span class="token function">stopPush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>上此我们写了原生的直播分享，但是并不能真正的直播中，而阿里云他是给我们集成了</p><h3 id="直播屏幕分享"><a href="#直播屏幕分享" class="headerlink" title="直播屏幕分享"></a>直播屏幕分享</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token function">doShare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>smallVideoFlag <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token comment">// 这个主要是控制当点击分享时，将我们定义的第二个推流位置展示出来</span>    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initVideoSmall</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 初始化阿里云小屏，将人物头像展示在小屏中代码在上方</span>    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">openLiveSmall</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 小屏开始推流人像</span>    <span class="token comment">// 开始屏幕共享，他的实参传入true，这是会出现一个开启音频的勾选，我建议加上true，供用户自己做选择</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startScreenCapture</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClientSmall<span class="token punctuation">.</span><span class="token function">startCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 如果屏幕共享成功，同时开始小屏的人物头像也开始打开摄像头音频</span>        <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClientSmall<span class="token punctuation">.</span><span class="token function">startMicrophone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>       <span class="token comment">// 1011状态码即屏幕共享弹窗被用户拒绝，我们则将小屏隐藏，推流大屏为人物头像</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>errorCode <span class="token operator">===</span> <span class="token number">10011</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>smallVideoFlag <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">stopScreenCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startMicrophone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 无论怎样结果都需要推流</span>    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pushClient<span class="token punctuation">.</span><span class="token function">startPush</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>urlTui<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//this.urlTui是我们一开始就定义好的推流地址</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><p>以上都是封装好的一整套，只需要在合适的地方调用即可，例如开启直播，则调用初始化和推流两个函数，如果用户不小心推出网页，可以要求后端给你一个直播状态的数据，在进行调取，结束则调用停止推流，以及分享则是调用分享的函数</p><p>后续小屏并非是固定在左下角，而是可以让用户放在任何位置，在我的下一篇文章总结，希望对在写基于阿里云直播的兄弟们有帮助</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直播页面，屏幕共享</title>
      <link href="/star/2023/11023296.html"/>
      <url>/star/2023/11023296.html</url>
      
        <content type="html"><![CDATA[<h2 id="直播页面，屏幕共享"><a href="#直播页面，屏幕共享" class="headerlink" title="直播页面，屏幕共享"></a>直播页面，屏幕共享</h2><p>继阿里云直播后，新需求是老师不仅仅可以露脸直播，还可以将ppt等文档共享出来，让学生看到，因此写下这么一篇文章，记录一下</p><p><code>WebRTC 提供了 mediaDevices.getDisplayMedia API</code></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Screen_Capture_API">MDN屏幕捕捉</a> <a href="https://leng-yangwei.gitee.io/starry/2023/10213296.html">阿里云直播参考</a>  <a href="https://leng-yangwei.gitee.io/starry/2023/07205896.html">Web RTC介绍</a></p><p><strong>1.绑定事件，指定共享位置</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 绑定点击事件，finishLive1这个不用管，是我定义的样式</span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"finishLive1"</span> @click<span class="token operator">=</span><span class="token string">"doShare"</span><span class="token operator">></span>分享<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token comment">//指定video,同时定义一个id，利于后面再次拿取到该标签，这里你可以使用ref，都行，我就使用id了</span><span class="token operator">&lt;</span>video autoplay playsinline id<span class="token operator">=</span><span class="token string">"video_player"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>video<span class="token operator">></span></code></pre><p><strong>2.获取标签，判断浏览器是否支持，定义video和audio，调用getDisplayMedia</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">doShare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// #1 获取标签</span>         <span class="token keyword">const</span> videoPlayer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"video#video_player"</span><span class="token punctuation">)</span>         <span class="token comment">// #2 判断浏览器是否支持</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>navigator<span class="token punctuation">.</span>mediaDevices <span class="token operator">||</span> <span class="token operator">!</span>navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span>getDisplayMedia<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>$messgae<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">'该浏览器不支持'</span><span class="token punctuation">)</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'getDisplayMedia is not supported!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// #3 定义video和audio</span>              <span class="token keyword">const</span> constraints <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                  <span class="token literal-property property">video</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>                      <span class="token literal-property property">frameRate</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>                      <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>                      <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">480</span>                  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token literal-property property">audio</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>                      <span class="token literal-property property">echoCancellation</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                      <span class="token literal-property property">noiseSuppression</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                      <span class="token literal-property property">autoGainControl</span>  <span class="token operator">:</span> <span class="token boolean">true</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>              <span class="token comment">// #4 调用getDisplayMedia，底层是Promise，因此可以拿到成功与失败的结果</span>              navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span><span class="token function">getDisplayMedia</span><span class="token punctuation">(</span>constraints<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mediaStream</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                  <span class="token comment">// #5 把mediaStream这个视频流直接赋值即可</span>                  videoPlayer<span class="token punctuation">.</span>srcObject <span class="token operator">=</span> mediaStream<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>input上传视频文件，同一个文件二次上传无效</title>
      <link href="/star/2023/1101665.html"/>
      <url>/star/2023/1101665.html</url>
      
        <content type="html"><![CDATA[<h2 id="input上传视频文件，同一个文件二次上传无效"><a href="#input上传视频文件，同一个文件二次上传无效" class="headerlink" title="input上传视频文件，同一个文件二次上传无效"></a>input上传视频文件，同一个文件二次上传无效</h2><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>视频<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inputFileVideo<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span> <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upAlividChange<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upAlivid<span class="token punctuation">"</span></span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>drawer2edit_upAlivid_disabled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!drawer2edit_post.url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>已经上传，可重新上传（修改）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-progress</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>drawer2edit_upJindu>0<span class="token punctuation">"</span></span> <span class="token attr-name">:text-inside</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">:stroke-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">:percentage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>drawer2edit_upJindu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-progress</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span></code></pre><p>1.给input绑定ref</p><p>2.绑定一个change事件</p><p>3.当发生变化时，触发change事件，通过ref拿到DOM对象</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">upAlividChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取文件</span>    <span class="token keyword">let</span> fileObj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"inputFileVideo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"已选文件对象 \n"</span><span class="token punctuation">,</span> fileObj<span class="token punctuation">)</span>        <span class="token comment">//看看是否拿到文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fileObj <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> fileObj <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fileObj<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"video"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'不是视频文件!'</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> sizeMB <span class="token operator">=</span> fileObj<span class="token punctuation">.</span>size <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">//视频大小（MB）</span>    <span class="token keyword">let</span> duration <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//视频时长（秒）</span>    <span class="token comment">//获取视频时长，异步非阻塞的</span>    <span class="token keyword">var</span> audioElement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>fileObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    audioElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"loadedmetadata"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        duration <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>audioElement<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 是否确认上传</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$confirm</span><span class="token punctuation">(</span><span class="token string">'确定上传吗？'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">_</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>duration <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> $<span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'稍后重试'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>duration <span class="token operator">*</span> <span class="token number">0.22</span> <span class="token operator">&lt;</span> sizeMB<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'视频大小超限! 建议视频压缩码率1280kps'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>drawer2edit_post<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>drawer2edit_post<span class="token punctuation">.</span>name <span class="token operator">=</span> fileObj<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> fileObj<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>drawer2edit_post<span class="token punctuation">.</span>size <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>fileObj<span class="token punctuation">.</span>size <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>drawer2edit_post<span class="token punctuation">.</span>sizeVal <span class="token operator">=</span> sizeMB<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'MB'</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>drawer2edit_post<span class="token punctuation">.</span>duration <span class="token operator">=</span> duration            <span class="token keyword">this</span><span class="token punctuation">.</span>drawer2edit_post<span class="token punctuation">.</span>durationVal <span class="token operator">=</span> <span class="token function">ly_secondsToHIS</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span>                        <span class="token comment">//调用接口，开始上传</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createUploader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>alivodUploader <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                alivodUploader<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span>fileObj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'&#123;"Vod":&#123;&#125;&#125;'</span><span class="token punctuation">)</span>                alivodUploader<span class="token punctuation">.</span><span class="token function">startUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">//上传完毕后，一定要将其清空，不然第二次上传同样的，则上传不了，且放在最后清空，因为此时你已经上传完毕了</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span><span class="token string">'upload'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">_</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><p><code>清空一般作用于你已经上传完毕以后再去清空</code></p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让路由跳转至新页面？</title>
      <link href="/star/2023/1026381.html"/>
      <url>/star/2023/1026381.html</url>
      
        <content type="html"><![CDATA[<h2 id="如何让路由跳转至新页面？"><a href="#如何让路由跳转至新页面？" class="headerlink" title="如何让路由跳转至新页面？"></a>如何让路由跳转至新页面？</h2><p>在工作中写了一个前台项目，用的是vue2，遇到了一个问题，就是有些跳转需要跳转至新页面，解决以后总结一下</p><h3 id="一-关于路由跳转，如何让他跳转至新页面？"><a href="#一-关于路由跳转，如何让他跳转至新页面？" class="headerlink" title="一.关于路由跳转，如何让他跳转至新页面？"></a>一.关于路由跳转，如何让他跳转至新页面？</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>router<span class="token operator">-</span>link target<span class="token operator">=</span><span class="token string">"_blank"</span> <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"&#123;path:'/home',query:&#123;id:'1'&#125;&#125;"</span><span class="token operator">></span>新页面<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span></code></pre><p>直接给<code>router-link</code>加入<code>target=&quot;_blank&quot;</code>即可</p><h3 id="对于NavMenu-导航菜单组件如何让他跳转至新页面？"><a href="#对于NavMenu-导航菜单组件如何让他跳转至新页面？" class="headerlink" title="对于NavMenu 导航菜单组件如何让他跳转至新页面？"></a>对于NavMenu 导航菜单组件如何让他跳转至新页面？</h3><p>由于<code>NavMenu</code>是通过<code>router</code>属性激活路由模式，且通过<code>index</code>去进行跳转，而我们如果需要跳转至新页面的话，则需要摒弃这种方式，即把<code>router</code>模式关闭</p><h4 id="如何解决？"><a href="#如何解决？" class="headerlink" title="如何解决？"></a>如何解决？</h4><p>1.绑定select事件， 即菜单激活回调，并且<code>router</code>属性</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>el<span class="token operator">-</span>menu <span class="token operator">:</span><span class="token keyword">default</span><span class="token operator">-</span>active<span class="token operator">=</span><span class="token string">"activeIndex"</span> mode<span class="token operator">=</span><span class="token string">"horizontal"</span> @select<span class="token operator">=</span><span class="token string">"handleSelect"</span><span class="token operator">></span></code></pre><p>2.封装函数</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">handleSelect</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> keyPath</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> key    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>href<span class="token punctuation">,</span> <span class="token string">'_blank'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>解释</strong></p><p>1.<code>key </code>即是路径，<code>keyPath</code>返回的是一个路径数组</p><p>2.<code>this.$router.resolve</code>可以将路由路径解析成路由对象，即url是一个路由对象</p><p>3.<code>window.open</code>是原生的js的语法，能够跳转，设置是否跳转新页面，传参等</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本省略</title>
      <link href="/star/2023/10253289.html"/>
      <url>/star/2023/10253289.html</url>
      
        <content type="html"><![CDATA[<h2 id="文本省略"><a href="#文本省略" class="headerlink" title="文本省略"></a>文本省略</h2><h3 id="单行省略"><a href="#单行省略" class="headerlink" title="单行省略"></a>单行省略</h3><p>单行省略：（配合width属性设置，完成超出部分省略显示）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">overflow</span><span class="token operator">:</span>hidden<span class="token punctuation">;</span> <span class="token comment">//设置了这个属性，text-overflow属性才会生效</span>text<span class="token operator">-</span>overflow<span class="token operator">:</span>ellipsis<span class="token punctuation">;</span><span class="token comment">//超出范围的文本内容用省略号显示。</span>white<span class="token operator">-</span>space<span class="token operator">:</span>nowrap<span class="token punctuation">;</span><span class="token comment">//禁止换行  </span></code></pre><h3 id="多行省略"><a href="#多行省略" class="headerlink" title="多行省略"></a>多行省略</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">overflow</span><span class="token operator">:</span>hidden<span class="token punctuation">;</span>text<span class="token operator">-</span>overflow<span class="token operator">:</span>ellipsis<span class="token punctuation">;</span><span class="token literal-property property">display</span><span class="token operator">:</span><span class="token operator">-</span>webkit<span class="token operator">-</span>box<span class="token punctuation">;</span><span class="token comment">//对象作为弹性盒子模型显示；</span><span class="token operator">-</span>webkit<span class="token operator">-</span>line<span class="token operator">-</span>clamp<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//来限制一个块元素显示文本的行数；</span><span class="token operator">-</span>webkit<span class="token operator">-</span>box<span class="token operator">-</span>orient<span class="token operator">:</span>vertical<span class="token punctuation">;</span><span class="token comment">//必须结合的属性，设置或者检索伸缩盒对象的子元素的排列方式。</span></code></pre><p>注意：可配合<code>Tooltip 文字提示</code>使用，用户体验会更好</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现el-date-picker组件只允许选择当前与往后的时间如何实现</title>
      <link href="/star/2023/10253248.html"/>
      <url>/star/2023/10253248.html</url>
      
        <content type="html"><![CDATA[<h2 id="实现el-date-picker组件只允许选择当前与往后的时间如何实现"><a href="#实现el-date-picker组件只允许选择当前与往后的时间如何实现" class="headerlink" title="实现el-date-picker组件只允许选择当前与往后的时间如何实现"></a>实现el-date-picker组件只允许选择当前与往后的时间如何实现</h2><p>本文主要是讲述如何实现关于element-ui框架中<code>DatePicker</code>,<code>DateTimePicker</code>组件只允许选择当前与往后的时间如何实现</p><h3 id="一-实现DatePicker只允许选择当前与往后的时间如何实现"><a href="#一-实现DatePicker只允许选择当前与往后的时间如何实现" class="headerlink" title="一.实现DatePicker只允许选择当前与往后的时间如何实现"></a>一.实现DatePicker只允许选择当前与往后的时间如何实现</h3><p>第一步：绑定时间，设置<code>datatime</code>类型（单选日期类型），设置格式（format），绑定<code>picker-options</code>,设置change事件</p><pre class="language-vue" data-language="vue"><code class="language-vue"> &lt;el-date-picker   style&#x3D;&quot;width: 220px&quot;   v-model&#x3D;&quot;info.beginTime&quot;   type&#x3D;&quot;datetime&quot;   placeholder&#x3D;&quot;开始时间&quot;   format&#x3D;&quot;yyyy-MM-dd HH:mm&quot;   :picker-options&#x3D;&quot;pickerOption&quot;    @change&#x3D;&quot;beginDateChange&quot;   &gt;&lt;&#x2F;el-date-picker&gt;</code></pre><p>第二步：定义pickerOption，限制日期</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>         <span class="token literal-property property">pickerOption</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>             <span class="token function-variable function">disabledDate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                 <span class="token keyword">return</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">></span> time<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 当能选择的日期大于当前时间戳时，即返回false，反之返回true，即禁用</span></code></pre><p>第三步：限制时，分</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">beginDateChange</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token keyword">return</span>        <span class="token keyword">let</span> startAt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>startAt <span class="token operator">&lt;</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>info<span class="token punctuation">.</span>beginTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 判断当前的事件戳是否大于选择的时间戳，如果是则设置成当前的事件戳,不过我建议往后面推10分钟,主要看你的需求，同时要封装一个时间函数去转换，或者使用第三方包</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">60</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">1000</span></code></pre><h3 id="二-实现DateTimePicker只允许选择当前与往后的时间如何实现"><a href="#二-实现DateTimePicker只允许选择当前与往后的时间如何实现" class="headerlink" title="二.实现DateTimePicker只允许选择当前与往后的时间如何实现"></a>二.实现DateTimePicker只允许选择当前与往后的时间如何实现</h3><p>第一步：同样时与上方基本一致</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;el-date-picker                align&#x3D;&quot;right&quot;                 @change&#x3D;&quot;dateChange&quot;                 v-model&#x3D;&quot;insertData.timeValue&quot;  &#x2F;&#x2F; 这里绑定的是一个数组，之前那个绑定的是一个字符串                type&#x3D;&quot;datetimerange&quot;       &#x2F;&#x2F; 多选时间的类型                range-separator&#x3D;&quot;至&quot;          &#x2F;&#x2F; 下面3个字段代替了placeholder                start-placeholder&#x3D;&quot;开始日期&quot;                 end-placeholder&#x3D;&quot;结束日期&quot;                :picker-options&#x3D;&quot;pickerOption&quot;                format&#x3D;&quot;yyyy-MM-dd HH:mm&quot;&gt;&lt;&#x2F;el-date-picker&gt;</code></pre><p>第二步：同样限制日期</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">pickerOption</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function-variable function">disabledDate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">></span> time<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>第三步：封装转换时间函数</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">timeConversion</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> inputDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">const</span> year <span class="token operator">=</span> inputDate<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> month <span class="token operator">=</span> inputDate<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 月份从0开始，需要加1</span>        <span class="token keyword">const</span> date <span class="token operator">=</span> inputDate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> hours <span class="token operator">=</span> inputDate<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> minutes <span class="token operator">=</span> inputDate<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> seconds <span class="token operator">=</span> inputDate<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> formattedDate <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>year<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>month<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>date<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>hours<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>minutes<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>seconds<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token keyword">return</span> formattedDate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>第四步：限制时，分</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">dateChange</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// e是你绑定的那个字段，是一个数组，由于你是多选，即是开始与结束两个元素</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> startAt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">timeConversion</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> endtAt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">timeConversion</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>startAt <span class="token operator">&lt;</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 由于项目问题，我这里开始时间往后面推了10分钟</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>insertData<span class="token punctuation">.</span>start_time <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">timeConversion</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span>                  <span class="token comment">// 这里结束推了40分钟</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>insertData<span class="token punctuation">.</span>end_time <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">timeConversion</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">40</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span>                <span class="token comment">// 设置开始，与结束给绑定的数组，让数据回显</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>insertData<span class="token punctuation">.</span>timeValue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>insertData<span class="token punctuation">.</span>start_time<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>insertData<span class="token punctuation">.</span>end_time<span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拖拽表单vform3框架</title>
      <link href="/star/2023/10233865.html"/>
      <url>/star/2023/10233865.html</url>
      
        <content type="html"><![CDATA[<h2 id="拖拽表单vform3框架"><a href="#拖拽表单vform3框架" class="headerlink" title="拖拽表单vform3框架"></a>拖拽表单vform3框架</h2><p><a href="https://www.vform666.com/document3.html">vform3官网</a></p><p>最近这家公司主要负责了一个动态表单的模块，我以前从未做过，感觉这个vform3框架功能十分强大，因此在这里总结一波</p><p>每个公司要求不一致，可能只使用vform自带的表单，完成拖拽效果。我们公司要求自定义组件，完成拖拽效果</p><h3 id="1-拉取代码"><a href="#1-拉取代码" class="headerlink" title="1.拉取代码"></a>1.拉取代码</h3><p>1.<code>git clone &#39;https://gitee.com/vdpadmin/vform3-builds&#39;</code></p><p>2.拉取代码后<code>npm i element-plus</code></p><p>3.再<code>npm i</code>一下</p><p>代码拉取好后就可以开始做拖拽了,不要按照官网的方式引入他的组件，因为这样的话有很多东西都达到不了你想要的效果，而是把他的文件拉入到你的项目中的某个路由组件中，开始书写代码</p><h3 id="2-改变路径"><a href="#2-改变路径" class="headerlink" title="2.改变路径"></a>2.改变路径</h3><p>由于你拉进来的代码路径已经发生改变，因此你需要改变其各个导入路径</p><h3 id="3-配置相关文件"><a href="#3-配置相关文件" class="headerlink" title="3.配置相关文件"></a>3.配置相关文件</h3><p>1.根据vform3文件去配置相关路径，注册相关组件</p><p>2.根据vform3文件中的<code>package.json</code>的包，在你自己的项目中去下载对应的包，在去自己的<code>package.json</code>查看包</p><p>3.根据vform3中的<code>vite.config.js</code>去配置相关配置项</p><p>4.一定要把lib文件夹整个给他拉过去</p><p>这时候项目基本就能跑了</p><h3 id="4-开始配置相关页面"><a href="#4-开始配置相关页面" class="headerlink" title="4.开始配置相关页面"></a>4.开始配置相关页面</h3><p><code>form-designer</code>文件夹表单设计器，主要是作用于表单设计的</p><p>这里主要是要改人家的源码，很多东西都不需要你动，根据需求去改</p><p>1.<code>extension</code>这个文件夹中的<code>extension-loader.js</code>文件，主要是作用于自定义的拖拽组件，需要把你自己封装好的自定义组件文件导入进去</p><p>2.在<code>lang</code>文件中的<code>zh-CN_extension.js</code>，配置的是你自己封装的可拖拽组件名，用于显示页面</p><p>3.同样是在<code>extension</code>文件夹中的<code>samples</code>文件夹中去封装组长所提需求的组件，即自定义组件而非自带的组件</p><p>4.同样是在这个文件中，<code>extension-schema.js</code>,这个文件是规定你的这个组件拖拽的同时，右侧可调节的相关属性，比如说宽高，颜色等</p><p>5.固定模块，即你选择模块，自动生成相对的结构样式,<code>code-generator.js</code></p><h3 id="5-注意"><a href="#5-注意" class="headerlink" title="5.注意"></a>5.注意</h3><p>1.在如果使用的是<code>vue3+vite</code>，在使用<code>vite</code>打包，这时候引入<code>axios</code>不能使用之前的<code>vue</code>脚手架的方法。要把引入改为<code>import axios from &quot;axios/dist/axios&quot;</code></p><p>2.在使用该源码时，他有自己的一些<code>svg</code>图标，可能会与自己项目的<code>svg</code>产生冲突，导致图标失效，只需要把他的图标移入到我们的里面。并在一起即可</p><p>3.在配置vite中，引入的是按需引入的<code>createSvgIconsPlugin</code>方法，老版的方法可能会让你代码报错</p>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于数组塌陷问题</title>
      <link href="/star/2023/1023456.html"/>
      <url>/star/2023/1023456.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于数组塌陷问题"><a href="#关于数组塌陷问题" class="headerlink" title="关于数组塌陷问题"></a>关于数组塌陷问题</h2><h3 id="1-问题如何产生？"><a href="#1-问题如何产生？" class="headerlink" title="1.问题如何产生？"></a>1.问题如何产生？</h3><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>数组塌陷一般出现于你通过<strong>循环且根据下标删除元素</strong>所导致的，出现于<code>splice</code>这个方法</p><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 当循环到0时，删除的是第0项，即元素0被删除，由于splice改变原数组，即：arr = [1,2,3,4]</span><span class="token comment">// 当循环到1时，删除的是第1项,即元素为2被删除，即：arr = [1,3,4]</span><span class="token comment">// 当循环到2时，删除的是第2项，即元素4被删除，即：arr[1,3]</span><span class="token comment">// 当循环到3时，即报错，由此产生数组塌陷</span></code></pre><h3 id="2-如何解决？"><a href="#2-如何解决？" class="headerlink" title="2.如何解决？"></a>2.如何解决？</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    i<span class="token operator">--</span>   <span class="token comment">// 减去即可</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于阿里云的视频直播</title>
      <link href="/star/2023/10213296.html"/>
      <url>/star/2023/10213296.html</url>
      
        <content type="html"><![CDATA[<h2 id="基于阿里云的视频直播"><a href="#基于阿里云的视频直播" class="headerlink" title="基于阿里云的视频直播"></a>基于阿里云的视频直播</h2><p>基于阿里云的视频直播功能</p><p><a href="https://help.aliyun.com/document_detail/2392459.html">官方网站</a></p><h3 id="1-引入或下载皆可，由于展示，我这里选择引入"><a href="#1-引入或下载皆可，由于展示，我这里选择引入" class="headerlink" title="1.引入或下载皆可，由于展示，我这里选择引入"></a>1.引入或下载皆可，由于展示，我这里选择引入</h3><h4 id="方法1：下载"><a href="#方法1：下载" class="headerlink" title="方法1：下载"></a>方法1：下载</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//引入</span>npm install aliyun<span class="token operator">-</span>rts<span class="token operator">-</span>pusher <span class="token operator">--</span>save<span class="token comment">//导入</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> AliRTSPusher <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'aliyun-rts-pusher'</span><span class="token punctuation">;</span></code></pre><h4 id="方法2：导入"><a href="#方法2：导入" class="headerlink" title="方法2：导入"></a>方法2：导入</h4><p><code>&lt;script src=&quot;https://g.alicdn.com/AliyunVideoClient/H5RTSPusher/1.2.0/aliyun-rts-pusher.js&quot;&gt;&lt;/script&gt;</code></p><h3 id="2-创建推流实例"><a href="#2-创建推流实例" class="headerlink" title="2.创建推流实例"></a>2.创建推流实例</h3><p><code>AliRTSPusher.createClient()</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在vue中可以这样定义在data中</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    retrun <span class="token punctuation">&#123;</span>        <span class="token literal-property property">liveObj</span><span class="token operator">:</span>AliRTSPusher<span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-初始化SDK"><a href="#3-初始化SDK" class="headerlink" title="3.初始化SDK"></a>3.初始化SDK</h3><pre class="language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F; 在mounted生命钩子中即可调用&#x2F;&#x2F; 这里将他写入methods中initVideo() &#123;    &#x2F;&#x2F; 将容器ID传给SDK，SDK会在其中创建一个video标签并播放预览画面    const videoEl &#x3D; this.liveObj.setRenderView(&#39;videoContainer&#39;);    &#x2F;&#x2F; 设置直播清晰度    this.liveObj.setVideoQuality(&#39;720p_1&#39;);&#125;</code></pre><p><strong>注意</strong>：这里需要定义一个id为<code>videoContainer</code>,去让阿里底层给你创建一个video标签</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"videoContainer"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><h3 id="4-检测电脑是否支持Web-RTC底层"><a href="#4-检测电脑是否支持Web-RTC底层" class="headerlink" title="4.检测电脑是否支持Web RTC底层"></a>4.检测电脑是否支持Web RTC底层</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在created生命钩子中调用即可</span><span class="token function">media</span><span class="token punctuation">(</span><span class="token parameter">flag<span class="token punctuation">,</span>title</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    navigator<span class="token punctuation">.</span>getUserMedia <span class="token operator">=</span> navigator<span class="token punctuation">.</span>getUserMedia <span class="token operator">||</span> navigator<span class="token punctuation">.</span>webkitGetUserMedia <span class="token operator">||</span> navigator<span class="token punctuation">.</span>mozGetUserMedia <span class="token operator">||</span> navigator<span class="token punctuation">.</span>msGetUserMedia<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>getUserMedia<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'支持'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      navigator<span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">video</span><span class="token operator">:</span> flag<span class="token punctuation">,</span><span class="token literal-property property">audio</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"错误："</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'navigator.getUserMedia - 不支持'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">media</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">'已开启'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>补充：<code>Web RTC</code>仅仅支持<code>https</code>，本地访问(<code>localhost</code>:&#x2F;&#x2F;)，文件访问(<code>file:///</code>)，而<code>http</code>协议是不支持的</p><p><a href="https://leng-yangwei.gitee.io/star/2023/07205896.html">Web RTC原生尝试</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaDevices/getUserMedia">MDN Web RTC官网</a></p><p><strong>如何解决？</strong></p><p>举例：如果访问的是谷歌浏览器，输入<code>chrome://flags/#unsafely-treat-insecure-origin-as-secure</code>，将你访问的基地址设置进<code>Insecure origins treated as secure</code>中，即第一项即可。但是你项目上线任然需要将你的<code>http</code>网站加一个证书改成<code>https</code></p><h3 id="5-开始推流"><a href="#5-开始推流" class="headerlink" title="5.开始推流"></a>5.开始推流</h3><p>直播这一块无非就是推拉流，直播人员通过推流去将直播推送出去，而查看的人，这会使用拉流进入直播频道，由于我只负责<code>PC</code>端，而拉流有安卓人员在做</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//这里的代码写在一个方法里面，当点击某个按钮时，触发点击事件</span><span class="token comment">//1.调用接口，获取推流地址：首先你需要通过调用接口获取推流地址，即让你公司的后端写一个可以获取推流地址的接口</span><span class="token comment">// 2.监听推流实例的状态变化以及错误事件</span><span class="token keyword">this</span><span class="token punctuation">.</span>liveObj<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connectStatusChange"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>liveObj<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>errorCode <span class="token operator">===</span> <span class="token string">"video device not found"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"video device not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.打开摄像头 麦克风</span><span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>liveObj<span class="token punctuation">.</span><span class="token function">startCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>liveObj<span class="token punctuation">.</span><span class="token function">startMicrophone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.开始推流</span>liveObj<span class="token punctuation">.</span><span class="token function">startPush</span><span class="token punctuation">(</span>后端给你的推流地址<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="6-关闭推流"><a href="#6-关闭推流" class="headerlink" title="6.关闭推流"></a>6.关闭推流</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//同样是写入一个方法中，再点击某个事件时触发，或直播时间到达时触发</span><span class="token comment">//1.同样调用停止推流的接口，找后端要</span><span class="token comment">//2.关闭直播</span><span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>liveObj<span class="token punctuation">.</span><span class="token function">stopCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>liveObj<span class="token punctuation">.</span><span class="token function">stopMicrophone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.停止推流</span><span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>liveObj<span class="token punctuation">.</span><span class="token function">stopPush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序</title>
      <link href="/star/2023/07215199.html"/>
      <url>/star/2023/07215199.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="ff77754bde34553ab2afee2857e3135ff3cd1aabb9b620374d71f19a6f9c50ac"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/star/lib/hbe.js"></script><link href="/star/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交换两个变量的值的几种方法</title>
      <link href="/star/2023/07204.html"/>
      <url>/star/2023/07204.html</url>
      
        <content type="html"><![CDATA[<p><code>JavaScript扩展1--这篇主要是交换两个变量的值的几种方法的总结</code></p><span id="more"></span><h2 id="交换两个变量的值的几种方法"><a href="#交换两个变量的值的几种方法" class="headerlink" title="交换两个变量的值的几种方法"></a>交换两个变量的值的几种方法</h2><h3 id="方法1-设置一个中间变量"><a href="#方法1-设置一个中间变量" class="headerlink" title="方法1  设置一个中间变量"></a>方法1  设置一个中间变量</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> cup1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token keyword">let</span> cup2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token keyword">let</span> temp <span class="token operator">=</span> cup1cup1 <span class="token operator">=</span> cup2cup2 <span class="token operator">=</span> tempconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cup1<span class="token punctuation">,</span>cup2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="方法2-数组的解构赋值"><a href="#方法2-数组的解构赋值" class="headerlink" title="方法2   数组的解构赋值"></a>方法2   数组的解构赋值</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> cup1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token keyword">let</span> cup2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token punctuation">[</span>cup1<span class="token punctuation">,</span>cup2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>cup2<span class="token punctuation">,</span>cup1<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cup1<span class="token punctuation">,</span>cup2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="方法3-放在一个数组，通过索引交换"><a href="#方法3-放在一个数组，通过索引交换" class="headerlink" title="方法3  放在一个数组，通过索引交换"></a>方法3  放在一个数组，通过索引交换</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> cup1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token keyword">let</span> cup2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>cup1<span class="token punctuation">,</span>cup2<span class="token punctuation">]</span>cup2 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>cup1 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cup1<span class="token punctuation">,</span>cup2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="方法4"><a href="#方法4" class="headerlink" title="方法4"></a>方法4</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> cup1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token keyword">let</span> cup2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>cup1 <span class="token operator">=</span> <span class="token punctuation">[</span>cup2<span class="token punctuation">,</span>cup2<span class="token operator">=</span>cup1<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cup1<span class="token punctuation">,</span>cup2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造函数&amp;数据常用函数</title>
      <link href="/star/2023/072043.html"/>
      <url>/star/2023/072043.html</url>
      
        <content type="html"><![CDATA[<h2 id="构造函数-数据常用函数"><a href="#构造函数-数据常用函数" class="headerlink" title="构造函数&amp;数据常用函数"></a>构造函数&amp;数据常用函数</h2><p><code>这篇总结主要讲解了构造函数&amp;数据常用函数，讲解了对象与数组的多种方法</code></p><span id="more"></span><h3 id="1-创建对象三种方式"><a href="#1-创建对象三种方式" class="headerlink" title="1.创建对象三种方式"></a>1.创建对象三种方式</h3><p><strong>字面量创建对象</strong>：<code>let  对象名  = &#123; &#125; </code></p><p><strong>利用new   object  创建对象</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> 对象名 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>对象名<span class="token punctuation">.</span>uname <span class="token operator">=</span> <span class="token string">'pink'</span> 对象名<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>输出对象<span class="token punctuation">&#125;</span> </code></pre><p><strong>利用构造函数创建对象</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span>  构造函数名（属性值<span class="token number">1</span><span class="token punctuation">,</span>属性值<span class="token number">2</span>） <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>属性<span class="token number">1</span> <span class="token operator">=</span> 值；            <span class="token keyword">this</span><span class="token punctuation">.</span>属性<span class="token number">2</span> <span class="token operator">=</span> 值；            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">方法</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span>   构造函数名（属性值<span class="token number">1</span><span class="token punctuation">,</span>属性值<span class="token number">2</span>）<span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span>   构造函数名（属性值<span class="token number">1</span><span class="token punctuation">,</span>属性值<span class="token number">2</span>）<span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">new</span>   构造函数名（属性值<span class="token number">1.</span>属性值<span class="token number">2</span>）<span class="token punctuation">;</span><span class="token comment">//这里的this指向a，b，c</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Goods</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>price<span class="token punctuation">,</span>count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token operator">=</span> price<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">=</span> count<span class="token punctuation">&#125;</span><span class="token keyword">const</span> xm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">'小米'</span><span class="token punctuation">,</span><span class="token number">1999</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">const</span> hw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">'华为'</span><span class="token punctuation">,</span><span class="token number">3999</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token keyword">const</span> vivo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">'vivo'</span><span class="token punctuation">,</span><span class="token number">1888</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xm<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hw<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vivo<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="2.构造函数"></a>2.构造函数</h3><p>是什么？是一种特殊的函数，主要用来初始化对象，可以快速创建多个类似的对象<br><strong>返回值是新创造的对象</strong><br>new关键字调用函数的行为称为<strong>实例化</strong><br><strong>规范：</strong><br>                <code>1.命名首字母大写</code><br>                <code>2.只能用new操作符来执行</code><br><code>实例化执行过程</code>:<br>                你先写了一个函数，但是这个函数没有被调用,你在下方写了一个 <code>let a = new obj()</code>，然而此时会调用此函数，但是调用此函数之前，这个‘new’ 会先一步为<code>obj()</code>创建了一个新对象，之后才会调用函数，由于创建了一个新对象，this指向就会指向于obj这个新对象，然后就开始执行这个函数的代码，<code>new obj(实参1，实参2)</code>传入这个构造函数中，<code>function(形参1，形参2) &#123;this.name=name&#125;</code>,传入后，进行赋值，最终返回一个新对象</p><p><strong>原型链：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*为什么要用原型链？一切的起源是因为你创建了一个普通函数，此时普通函数中的this指向是window，同时拥有多个属性与方法，同时你又想要使用这些属性与方法，于是你通过new关键字创建了一个实例对象，此时的this指向则不是指向window，而是指向这个实例对象，然而函数中的方法是引用数据类型，每次声明的实例对象里面的方法都会在堆空间重新开辟了一个新的空间，因此你创建n个实例对象，就开辟了n个堆空间，这就容易造成内存浪费。此时你又不想每创建一个实例对象，就开辟一个新的方法的堆空间，你就寻思着让所有实例对象里面的方法地址指向同一个方法的地址，于是，你将构造函数里的方法在外面封装成一个函数，同时将这个函数赋值给构造函数里面的方法，由于函数是值数据类型，赋值的是地址，即让所有的实例对象里面的方法都指向这一个地址，因此就只会在创建函数(这个函数就是实例对象的方法)时，创建一个堆内存，并且将地址给到以后每个使用这个方法的实例对象，在此，又出现了一个新的问题，如果你实例对象里面有n个方法呢？你再去外面封装n个函数，那么就容易出现全局变量名的污染此时你又不想造成变量污染，那怎么办呢？此时你就可以利用面向对象中的封装性，将这n个方法封装在一个对象里面，此时暴露在全局的变量就只会是一个对象名，因此，就避免了变量污染*/</span></code></pre><h3 id="3-实例成员-静态成员"><a href="#3-实例成员-静态成员" class="headerlink" title="3.实例成员&amp;静态成员"></a>3.实例成员&amp;静态成员</h3><h4 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h4><p><code>构造函数创造的对象称为实例对象</code><br><code>实例对象的属性和方法就称为实例成员(实例属性和实例方法)</code></p><p><strong>说明：</strong><br><code>1.两个实例化对象给构造函数传入参数，创建的结构相同，但是不是同一个对象</code><br><code>2.构造函数创建的实例对象彼此独立，互不影响</code><br><code>3.this指向实例化对象</code></p><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><p><code>构造函数的属性和方法称为静态成员（静态属性和静态方法）</code><br><code>this指向构造函数</code></p><h2 id="内置构造函数"><a href="#内置构造函数" class="headerlink" title="内置构造函数"></a>内置构造函数</h2><h3 id="1-引用类型"><a href="#1-引用类型" class="headerlink" title="1.引用类型"></a>1.引用类型</h3><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><p><strong>静态方法</strong><br><code>1.获取对象的键值对</code></p><pre class="language-none"><code class="language-none">1.Object.keys(对象) 获得所有的键2.Object.values(对象)  获得所有的值3.返回的是一个数组</code></pre><p><code>2.拷贝对象</code><br><code>Object.assign(拷贝对象给谁,被拷贝的对象)</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'pink'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>o<span class="token punctuation">)</span></code></pre><p><code>3.给实例化对象新增属性</code><br><code>Object.assign(给哪个对象添加,&#123;实例属性：值&#125;)</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'pink'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">'女'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><h5 id="实例方法（实例化对象只能用实例化方法）"><a href="#实例方法（实例化对象只能用实例化方法）" class="headerlink" title="实例方法（实例化对象只能用实例化方法）"></a>实例方法（实例化对象只能用实例化方法）</h5><p><code>1.forEach（一般用于全选框）</code><br>筛选数组,将满足条件的元素放入新数组中，返回筛选之后的新数组,如果没有符合条件的元素则返回空数组<br>注意：</p><pre class="language-none"><code class="language-none">1.除了抛出异常以外，没有办法中止或跳出 循环2.无法 break ，可以用 try&#x2F;catch 中 throw new Error 来停止3.Error对象：js的内置对象,表示错误的对象</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">===</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> index        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><code>语法：forEach(function(item,index,arr) &#123; &#125;)</code><br><strong>场景：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span>改变数组的某个属性，例如一点击全选，单选框为<span class="token boolean">true</span><span class="token number">2.</span>给对象数组添加或删除某个属性，例如新增假期属性，工资奖励属性，删除假期属性<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token literal-property property">select</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token literal-property property">select</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token literal-property property">select</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token literal-property property">select</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment">//修改</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span>item<span class="token punctuation">.</span>select <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//添加</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span>item<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">//删除</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token keyword">delete</span> item<span class="token punctuation">.</span>age<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></code></pre><p><code>2.map</code>迭代数组，返回新数组<br>创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。<br><code>语法：map(function(item,index,arr) &#123; &#125;)</code><br><strong>实际应用场景</strong>：映射数组（需要使用新数组）<br><strong>通过map方法渲染，需要和join(‘’)配合使用</strong></p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">必须使用新数组时应用：有一个对象数组里面是商品信息。如果原价就不变，如果vip用户则<span class="token number">88</span>折        forEach和map最大的区别        foreach只会修改原来的数组，不会产生新的堆地址        map需要得到一个新的堆地址<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'食品'</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">188</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'手机'</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">2888</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'家具'</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">588</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'玩具'</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">99</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span>item<span class="token punctuation">.</span>price<span class="token operator">*=</span><span class="token number">0.88</span><span class="token punctuation">)</span>    <span class="token comment">//map方法</span>    <span class="token comment">//    let arr1 = arr.map(item=>&#123;</span>    <span class="token comment">//     return &#123;</span>    <span class="token comment">//         name:item.name,</span>    <span class="token comment">//         price:item.price*0.88</span>    <span class="token comment">//     &#125;</span>    <span class="token comment">//    &#125;)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span></code></pre><p><code>3.filter</code>过滤数组，返回新数组<br>创建给定数组一部分的浅拷贝，其包含通过所提供函数实现的测试的所有元素。<br>返回值：一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组<br>语法：<code>filter(function(item,index,arr) &#123; &#125;)</code><br><code>注意点:</code></p><pre class="language-none"><code class="language-none">(1)filter()方法不会对空数组进行检测(2)filter()方法不会改变原始数组</code></pre><p><code>4.every（小选框）</code><br>语法：<code>every(function(item,index,arr) &#123; &#125;)</code><br><code>若收到一个空数组，此方法在任何情况下都会返回 true，有一项返回 false ，则整体为 false</code></p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isBigEnough</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> element <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isBigEnough<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// false</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isBigEnough<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><p><code>5.some（非空判断）</code><br>语法：<code>some(function(item,index,arr) &#123; &#125;)</code><br><code>有一项返回 true ，则整体为 true</code></p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// Checks whether an element is even</span><span class="token keyword">const</span> <span class="token function-variable function">even</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span> element <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>6.find</code><br>返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。<br>语法：<code>find(function(item,index,arr) &#123; &#125;)</code></p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">用对象的属性查找数组里的对象<span class="token keyword">const</span> inventory <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'apples'</span><span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'bananas'</span><span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'cherries'</span><span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isCherries</span><span class="token punctuation">(</span><span class="token parameter">fruit</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> fruit<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'cherries'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inventory<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>isCherries<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123; name: 'cherries', quantity: 5 &#125;</span>使用箭头函数和解构赋值<span class="token keyword">const</span> inventory <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'apples'</span><span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'bananas'</span><span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'cherries'</span><span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> inventory<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> name <span class="token operator">===</span> <span class="token string">'cherries'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// &#123; name: 'cherries', quantity: 5 &#125;</span></code></pre><p><code>7.findIndex</code><br><code>findIndex()</code>方法返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回 -1。<br><code>语法：findIndex(function(item,index,arr) &#123; &#125;)</code></p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">isLargeNumber</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span> element <span class="token operator">></span> <span class="token number">13</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>isLargeNumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Expected output: 3</span><span class="token comment">// 箭头函数</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* … */</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* … */</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* … */</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token comment">// 回调函数</span><span class="token function">findIndex</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">)</span><span class="token function">findIndex</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token comment">// 内联回调函数</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* … */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* … */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">/* … */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* … */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span>callback针对数组中的每个元素，都会执行该回调函数，执行时会自动传入下面三个参数：element当前元素。index当前元素的索引。array调用findIndex的数组。thisArg可选。执行callback时作为<span class="token keyword">this</span>对象的值。</code></pre><p><code>8.reduce累计器</code><br>经常用于求和<br>语法：<code>arr.reduce(function(sum,item,index)&#123;&#125;,初始值始值)</code><br>没写初始值的话，就只算数组的和<br>写了初始值，算完数组还得加上初始值</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'食品'</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">188</span><span class="token punctuation">,</span><span class="token literal-property property">select</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'手机'</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">2888</span><span class="token punctuation">,</span><span class="token literal-property property">select</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'家具'</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">588</span><span class="token punctuation">,</span><span class="token literal-property property">select</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'玩具'</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token literal-property property">select</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span>item</span><span class="token punctuation">)</span><span class="token operator">=></span>item<span class="token punctuation">.</span>select<span class="token operator">?</span>sum<span class="token operator">+</span>item<span class="token punctuation">.</span>price<span class="token operator">:</span>sum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>9.join</code><br>将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串，用逗号或指定的分隔符字符串分隔。如果数组只有一个元素，那么将返回该元素而不使用分隔符。<br><code>用于把数组中的所有元素转换为一个字符串 </code><br><code>语法：数组.join(&#39;间隔字符&#39;)</code><br><code>a.实现字符串的翻转</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'加油，奥里给!'</span><span class="token keyword">let</span> a <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Wind'</span><span class="token punctuation">,</span> <span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 'Wind,Water,Fire'</span>a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 'Wind, Water, Fire'</span>a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' + '</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'Wind + Water + Fire'</span>a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 'WindWaterFire'</span></code></pre><p><code>10.concat</code><br>用于合并两个或多个数组，返回一个新数组,不会改变原数组<br>语法：<code>arr1.concat(arr2,arr3)</code></p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">连接<span class="token number">2</span>个数组<span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> array2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> array3 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>array2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Expected output: Array ["a", "b", "c", "d", "e", "f"]</span>连接<span class="token number">3</span>个数组以下代码将三个数组合并为一个新数组：<span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> num3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> numbers <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>num2<span class="token punctuation">,</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// results in [1, 2, 3, 4, 5, 6, 7, 8, 9]</span>将值连接到数组<span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> alphaNumeric <span class="token operator">=</span> letters<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>alphaNumeric<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// results in ['a', 'b', 'c', 1, 2, 3]</span></code></pre><p><code>11.slice</code><br>截取slice（begin,end）       返回截取的新数组<br>截取以begin开头，但取不到end<br>返回一个新的数组，不改变原数组</p><p>示例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">,</span> <span class="token string">'bison'</span><span class="token punctuation">,</span> <span class="token string">'camel'</span><span class="token punctuation">,</span> <span class="token string">'duck'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animals<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Expected output: Array ["camel", "duck", "elephant"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animals<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Expected output: Array ["camel", "duck"]</span></code></pre><p><code>12.sort</code><br>对数组元素排序   <code> 数组名.sort();</code><br>解决sort()不能对多个两位数与个位数排序问题</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span>  a <span class="token operator">-</span> b<span class="token punctuation">;</span>    <span class="token comment">//升序顺序排列       反之    b-a    则是降序的顺序排列</span><span class="token punctuation">&#125;</span></code></pre><p>对象数组排序，形参a,b,都会拿到数组元素的每项数据，会改变原数组</p><p>示例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// arr.sort() 对数组进行排序（会改变原数组）</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">]</span>    arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> a <span class="token operator">-</span> b    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>对象数组排序<span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">2355</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">5355</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">6154</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">2755</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">6355</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    arr1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=></span>b<span class="token punctuation">.</span>price <span class="token operator">-</span> a<span class="token punctuation">.</span>price<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>出生排序<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token string">'2000-12-08'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token string">'2003-11-08'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token string">'1998-10-08'</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>    arr2<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span></code></pre><p><code>13.reverse</code><br> 颠倒数组元素    无参数    <code>数组名.reverse();</code><br><strong>返回值</strong>：颠倒后的数组<br>改变原数组<br><code>如果你希望reverse不改变原数组，请使用toReversed()方法</code></p><p><code>14.splice</code><br>删除或替换，会改变原数组<br>返回的是被删除&#x2F;修改的值<br><code>语法：splice（第几个开始，要删除的个数，修改的值）</code><br>如果要删除的个数是 0 或者负数，则不移除元素，这种情况下，至少应添加一个新元素。</p><p><code>15.数组.flat(深度)</code>    进行数组降维<br>复杂的嵌套数组（三维数组）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//[1, 2, 3, 4, [5, 6]]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[1, 2, 3, 4, 5, 6]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>没有返回值，修改数组本身</p><p><code>16.toString()</code><br>返回一个字符串，表示指定的数组及其元素</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'1a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Expected output: "1,2,a,1a"</span></code></pre><p><code>17.Array.isArray() </code><br>用于确定传递的值是否是一个 Array<br><code>语法：Array.isArray(数组)</code>      返回值是布尔值</p><p><code>18.indexOf(要查找的元素，从哪里开始)</code><br>返回在数组中可以找到给定元素的第一个索引，如果不存在，则返回 -1</p><p><strong>示例：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> beasts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">,</span> <span class="token string">'bison'</span><span class="token punctuation">,</span> <span class="token string">'camel'</span><span class="token punctuation">,</span> <span class="token string">'duck'</span><span class="token punctuation">,</span> <span class="token string">'bison'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>beasts<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'bison'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Expected output: 1</span><span class="token comment">// Start from index 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>beasts<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'bison'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Expected output: 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>beasts<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'giraffe'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Expected output: -1</span></code></pre><h5 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h5><p>let 真数组 &#x3D; Array.from(伪数组)<br><strong>伪数组转换为真数组</strong>，伪数组的本质是对象</p><h3 id="2-包装类型"><a href="#2-包装类型" class="headerlink" title="2.包装类型"></a>2.包装类型</h3><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>1.<code>字符串恒定性</code></p><pre class="language-none"><code class="language-none">(1)字符串类似于数组，也有长度和下标(2)字符串不可以被直接修改(3)字符串所有的方法都不会修改字符串本身，而是得到新的字符串</code></pre><p><code>2.length获取字符串长度</code></p><p><code>字符串.split(&#39;分隔符&#39;)</code><br> <code>用分隔符切割字符串，得到切割之后的数组</code><br><code>语法：字符串名.split()</code><br>主要用于切割网址，得到参数对象<br><strong>示例</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'http://www.baidu.com?name=张三&amp;age=20'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ['http://www.baidu.com?name=张三&amp;age=20']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//["http://www.baidu.com","name=张三&amp;age=20"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//["http://www.baidu.com","name=张三","age=20"]</span></code></pre><p><code>3.字符串.substring(截取第一个字符串的索引号,结束的索引号)</code><br><strong>用于字符串截取</strong><br><code>4.start位置开始，end结束，但是end取不到，与slice基本相同，但不接受负值</code><br><strong>应用场景</strong>：截取部分字符串，进行替换</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> phone <span class="token operator">=</span> <span class="token string">'13512345678'</span><span class="token keyword">let</span> a <span class="token operator">=</span> phone<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>phone<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><p><code>5.startsWith(检测的字符串[,检测的位置索引号])</code><br>检测是否以某字符串开头，返回true和false</p><p>示例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'传智播客传递知识'</span><span class="token comment">// 1. startsWith(检测字符，[检测位置])</span><span class="token comment">// 检测是否以某个字符开头，返回布尔值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'传'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'智'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'传'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'传'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></code></pre><p><code>6.includes(搜索的字符串[,检测位置索引号])</code><br><code>判断一个字符串是否包含在另一个字符串中</code><br>返回值true和false</p><p><strong>搜索的字符串严格区分大小写</strong></p><p>示例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">"To be, or not to be, that is the question."</span><span class="token comment">// 3. includes(搜索的字符，[检测位置])</span><span class="token comment">// 判断一个字符串是否 包含 在另外一个字符串中，返回布尔值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'to be'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'to be or'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'To be'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span></code></pre><p><code>7.字符串.indexOf(&#39;查找字符串&#39;)</code><br>检测查找字符串在字符串中的首字母下标<br>返回在字符串中可以找到给定元素的第一个索引，如果不存在，则返回 -1<br>查找字符串不仅仅可以写一个字的字符串，还可以去查找多个字的字符串</p><p><code>8.字符串.trim()</code> 去字符串首尾空格</p><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p><code>toFixed(保留几位)</code><br>设置保留小数位的长度</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深浅拷贝</title>
      <link href="/star/2023/072034.html"/>
      <url>/star/2023/072034.html</url>
      
        <content type="html"><![CDATA[<h2 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h2><p><code>这篇总结深度讲解了深浅拷贝，希望能帮到你</code></p><span id="more"></span><p>这篇文章，我说说深浅拷贝，虽然很多人说它只针对引用类型，但是</p><p>1.<code>深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的</code>,同时，</p><p>2.<code>它只有当拷贝引用数据类型时，拷贝才存在浅拷贝与深拷贝之分。</code></p><p>他们两个都会开辟一个新的内存空间，浅拷贝中的数据是<code>值类型时</code>，他会拷贝他的值，拷贝的数据是引用类型时，则是他的地址，例如：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">d</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>    <span class="token literal-property property">f</span><span class="token operator">:</span><span class="token number">5</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assgin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token comment">/*此时里面的a，b都是值类型，当你这个obj这个对象被obj2浅拷贝过去，当obj2修改a，b时，是影响不到obj中的a,b的，如果是修改c的数据，那么就会影响到obj中c的数据，因为c拷贝的是地址。同时，有些人在想，当他利用obj2.c = &#123;d:5,f:888&#125;,他说这么写，obj2的数据明明改变了，obj1为啥不变？拜托大哥，麻烦你把堆和栈搞明白了再学后面的，这样修改是修改的是整个对象，也就是说，地址都变了，还怎么相互影响？*/</span></code></pre><p>深拷贝呢?</p><p>它同样会开辟一个新的空间，只不过他拷贝引用类型的时候拷贝的不再是他的地址，而是他的数据！因此，无论你如何修改他都不会影响原来的数据</p><h4 id="如何进行浅拷贝？"><a href="#如何进行浅拷贝？" class="headerlink" title="如何进行浅拷贝？"></a>如何进行浅拷贝？</h4><p><strong>拷贝对象</strong><br>                <code>方法1:Object.assign(拷贝对象给谁,被拷贝的对象)</code><br>                <code>方法2:展开运算符 &#123;...被拷贝的对象&#125;</code><br><strong>拷贝数组</strong><br>                <code>方法1:Array.prototype.concat() </code><br>                <code>方法2:展开运算符[...arr]</code></p><p><code>此时大多数人都有一个困惑点，在想直接赋值是不是浅拷贝，我可以狠狠的自信的告诉你，不是！不要再认为直接赋值是浅拷贝了，直接赋值拿到的是地址，修改会影响原来的数据</code></p><h4 id="如何进行深拷贝"><a href="#如何进行深拷贝" class="headerlink" title="如何进行深拷贝 ?"></a>如何进行深拷贝 ?</h4><p><strong>常见方法</strong><br><code>方法1：通过递归实现深拷贝</code><br><code>方法2：lodash/cloneDeep</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> 新对象 <span class="token operator">=</span>  _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>老对象<span class="token punctuation">)</span></code></pre><p><code>方法3：通过JSON.parse(JSON.stringify(js对象))实现</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> 新对象 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>js对象<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>在此，我强调一下，利用JSON实现的深拷贝，并非真正意义上的深拷贝。为什么呢？有以下几点原因！</p><p>1.如果obj里面存在时间对象,JSON.parse(JSON.stringify(obj))之后，时间对象变成了字符串。<br>2.如果obj里有RegExp、Error对象，则序列化的结果将只得到空对象。<br>3.如果obj里有函数，undefined，则序列化的结果会把函数， undefined丢失。<br>4.如果obj里有NaN、Infinity和-Infinity，则序列化的结果会变成null。<br>5.JSON.stringify()只能序列化对象的可枚举的自有属性。<br>6.如果obj中的对象是有构造函数生成的，则使用JSON.parse(JSON.stringify(obj))深拷贝后，会丢弃对象的constructor。<br>7.如果对象中存在循环引用的情况也无法正确实现深拷贝。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盒子水平垂直居中</title>
      <link href="/star/2023/0720324.html"/>
      <url>/star/2023/0720324.html</url>
      
        <content type="html"><![CDATA[<h2 id="盒子水平垂直居中"><a href="#盒子水平垂直居中" class="headerlink" title="盒子水平垂直居中"></a>盒子水平垂直居中</h2><p><code>这篇总结主要讲解了盒子水平垂直居中的几种方法？</code></p><span id="more"></span><p>方法1：子绝父相+margin:left&#x2F;top; 固定宽高的盒子居中</p><p>方法2：子绝父相+transfrom</p><p>方法3：子绝父相(子盒子上下左右都赋值为0)+margin:auto;</p><p>方法4：flex布局，给父盒子添加flex布局，同时在弹性容器(父盒子)内设置主轴居中，侧轴居中</p><p>代码如下：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width,     initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">*</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/* 方法1         .father &#123;            position: relative;            margin: 0 auto;            width: 200px;            height: 200px;            background-color: pink;        &#125;        .son &#123;            position: absolute;            left: 50%;            top: 50%;            margin-left: -50px;            margin-top: -50px;            width: 100px;            height: 100px;            background-color: black;        &#125; */</span>         <span class="token comment">/* 方法2        .father &#123;            position: relative;            margin: 0 auto;            width: 200px;            height: 200px;            background-color: pink;        &#125;        .son &#123;            position: absolute;            left: 50%;            top: 50%;            transform: translate(-50%,-50%);            width: 100px;            height: 100px;            background-color: black;        &#125;  */</span>        <span class="token comment">/* 方法3        .father &#123;            position: relative;            margin: 0 auto;            width: 200px;            height: 200px;            background-color: pink;        &#125;        .son &#123;            position: absolute;            top: 0;            bottom: 0;            left: 0;            right: 0;            margin: auto;            width: 100px;            height: 100px;            background-color: black;        &#125; */</span>        <span class="token comment">/* 方法4 */</span>        <span class="token selector">.father</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.son</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 需求:请你写出父子关系盒子居中4种方法 --></span>    <span class="token comment">&lt;!-- 提示: 定位+margin      定位+transfrom  定位+方位名词0  flex布局 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>节流与防抖</title>
      <link href="/star/2023/072038.html"/>
      <url>/star/2023/072038.html</url>
      
        <content type="html"><![CDATA[<h2 id="节流与防抖"><a href="#节流与防抖" class="headerlink" title="节流与防抖"></a>节流与防抖</h2><p><code>这篇总结主要讲解了节流与防抖的使用以及源码分析</code></p><span id="more"></span><h3 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h3><p><strong>单位时间内，频繁触发事件，只会触发最后一次</strong><br><code>应用场景：输入框搜索</code><br><code>1.函数防抖流程 ：</code><br>声明全局变量存储定时器ID<br>每一次触发事件, 先清除上一次定时器。 然后将事件处理代码放入本次定时器中</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入文本"</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>   <span class="token comment">/*  1.函数防抖 :  单位时间内，频繁触发事件，只会触发最后一次 2.经典应用场景 ： 输入框输入事件 3.函数防抖流程 ：        3.1 声明全局变量存储定时器ID        3.2 每一次触发事件, 先清除上一次定时器。 然后将事件处理代码放入本次定时器中    */</span>   <span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span>   <span class="token keyword">let</span> timeID   input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeID<span class="token punctuation">)</span>    timeID <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><code>2.lodash实现函数防抖</code><br><code>引用lodash库</code><br><code>语法：_.debounce(事件处理函数,防抖间隔时间)</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">第一步：引入lodash库<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"lodash.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>第二步：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入文本"</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">/*  1.函数防抖 :  单位时间内，频繁触发事件，只会触发最后一次    2.经典应用场景 ： 输入框输入事件    3.函数防抖流程 ：        3.1 声明全局变量存储定时器ID        3.2 每一次触发事件, 先清除上一次定时器。 然后将事件处理代码放入本次定时器中    */</span>   <span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span>   input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span>_<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>value<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>3.自己封装一个函数防抖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入文本<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 利用防抖实现性能优化</span>    <span class="token comment">//需求：键盘文字防抖处理</span>    <span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> timeID      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeID<span class="token punctuation">)</span>        timeID <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> time<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><p>单位时间内，频繁触发事件，只会触发一次<br>应用场景：高频事件，降帧处理（滚动条，鼠标移动）</p><pre class="language-none"><code class="language-none">loadeddata事件：视频加载好了触发timeupdate事件：视频播放时间变化了触发currentTime： 属性会以秒为单位返回当前媒体元素的播放时间。设置这个属性会改变媒体元素当前播放位置。</code></pre><p>1.函数节流流程<br>                 声明全局变量存储上一次触发交互时间<br>                每一次触发事件, 获取当前时间  与 上一次时间做比较。判断是否超过节流间隔<br>                如果 超过节流时间，则执行事件处理代码。 并且存储本次触发时间。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> timeID <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>timeID<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        timeID <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        timeID <span class="token operator">=</span> <span class="token keyword">null</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        i<span class="token operator">++</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>2.<code>lodash实现函数节流</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span>_<span class="token punctuation">.</span><span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    i<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>3.自己封装一个函数节流</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 1.声明一个变量储存id</span>      <span class="token keyword">let</span> timeID <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 2.开始节流</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeID<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          timeID <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            timeID <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高阶函数&amp;Set&amp;var/let/const的区别</title>
      <link href="/star/2023/072041.html"/>
      <url>/star/2023/072041.html</url>
      
        <content type="html"><![CDATA[<h2 id="高阶函数-Set-var-let-const的区别"><a href="#高阶函数-Set-var-let-const的区别" class="headerlink" title="高阶函数&amp;Set&amp;var&#x2F;let&#x2F;const的区别"></a>高阶函数&amp;Set&amp;var&#x2F;let&#x2F;const的区别</h2><p><code>这篇总结主要讲解了高阶函数&amp;Set&amp;var/let/const的区别</code></p><span id="more"></span><h3 id="1-闭包函数"><a href="#1-闭包函数" class="headerlink" title="1.闭包函数"></a>1.闭包函数</h3><p><strong>是什么？</strong><code>一个函数对周围状态的引用捆绑在一起，内层函数中访问到其外层函数的作用域</code><br>闭包&#x3D;内层函数+外层函数的变量<br><strong>作用</strong>：<code>解决全局变量污染</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span>  fuction <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> fn<span class="token punctuation">&#125;</span><span class="token keyword">const</span> fun <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>闭包应用</strong><br>            <code>1.实现数据私有</code><br>            <code>2.可能会内存泄漏</code></p><h3 id="2-递归函数"><a href="#2-递归函数" class="headerlink" title="2.递归函数"></a>2.递归函数</h3><p>函数自己调用自己，他的功能十分强大，自己去查文档去了解了解</p><h2 id="数据类型Set与Map"><a href="#数据类型Set与Map" class="headerlink" title="数据类型Set与Map"></a>数据类型Set与Map</h2><p><strong>Set数组类型</strong><br><strong>语法</strong>：<code>const set = new Set(数组)</code><br>由于是Set类型，而不是数组类型，因此想要使用数组的方法，利用Array.from(set)<br>Set相当于是数组类型, 和数组Array唯一的区别是不能存储重复元素<br><strong>场景 :</strong>  <code>数组去重</code>     <code>let newArr = [ ...new Set(需要去重的数组) ]</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// //并集</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交集</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//差集</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">!</span>b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>map内置对象自己去查文档，与set的语法差不多</p><h2 id="var-let-const"><a href="#var-let-const" class="headerlink" title="var/let/const"></a><code>var/let/const</code></h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a><code>let</code></h3><p>let声明的变量，<br>        1.具有块级块级作用域，只在所处于的块级有效<br>        2.变量名不能重复声明<br>        3.不存在变量提升<br>        4.具有暂时性死区<br><code>比如就是在if语句（块级作用域）中，外面定义了var a = 1，里面再写一个a=3；后面写一个let  a;，此时if里面的a = 3就与let  a;进行绑定，无法再去访问外部的那个a,这就叫暂时性死区</code></p><h3 id="const"><a href="#const" class="headerlink" title="const"></a><code>const</code></h3><p><code>const声明常量，常量就是值（内存地址）是不可变化的量</code><br>        1.具有块级作用域<br>        2.声明常量时必须赋予初始值<br>        3.常量的变量名一般大写（潜规则）<br>        4.变量名不能重复声明<br>        5.常量赋值后，值不能修改<br>基本数据类型的值不能修改，因为在修改的过程中改变了内存地址<br>在数组，对象中，能修改里面的值，但重新赋值（开辟新的内存地址）后，则是会报错</p><h3 id="let-const-var的区别"><a href="#let-const-var的区别" class="headerlink" title="let const  var的区别"></a><code>let const  var</code>的区别</h3><p><code>1.使用var声明的变量，其作用域是在该语句所在函数内，且存在变量提升</code><br><code>2.使用let声明的变量，其作用域是在该语句所在代码块内，且不在变量提升</code><br><code>3.使用const声明的常量，其作用域是在该语句所在代码块内，且不在变量提升，值不可更改</code></p><h2 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h2><p><strong>语法</strong>：<code>...</code>      例如：<code>...arr</code><br>不会修改原数组<br>只存在于数组<br>返回的不是一个数组</p><p><strong>运用场景</strong>  求数组最大值&#x2F;最小值   合并数组等</p><p><strong>合并数组的三种方法</strong><br>        <code>数组3 = 数组1.push(...数组2)</code><br>        <code>数组3 = 数组1.concat(数组2)</code><br>        <code>数组1 = [...数组2, ...数组3]</code></p><p><code>浅拷贝—对象展开运算符</code></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue配置项</title>
      <link href="/star/2023/072053.html"/>
      <url>/star/2023/072053.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue配置项（实例属性）"><a href="#Vue配置项（实例属性）" class="headerlink" title="Vue配置项（实例属性）"></a><code>Vue</code>配置项（实例属性）</h3><p><code>这篇总结主要介绍Vue配置项</code></p><span id="more"></span><h4 id="1-el-挂载点"><a href="#1-el-挂载点" class="headerlink" title="1. el :  挂载点"></a>1. el :  挂载点</h4><p>推荐使用  id  选择器<br>不可以是 HTML 和 Body</p><p><strong>写法：</strong><br><code>方法一</code>：直接在data对象种直接指定容器<code>el:&#39;#root&#39;</code><br><code>方法二</code>：<code>Vue . $mount(&#39;#root&#39;)</code></p><h4 id="2-data-数据存储"><a href="#2-data-数据存储" class="headerlink" title="2. data : 数据存储"></a>2. data : 数据存储</h4><p>语法： 模板语法 <code>&#123;&#123; data数据 &#125;&#125;</code><br>特点：响应式，data数据变化了，页面会自动更新</p><p>写法：<br><code>第一种对象式</code>:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'某某'</span><span class="token punctuation">&#125;</span></code></pre><p><code>第二种函数式</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'黑马'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>注意：</strong><br><code>由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再指向Vue实例了,而是指向window，都必须要写成普通函数</code></p><h4 id="3-methods-存储方法"><a href="#3-methods-存储方法" class="headerlink" title="3. methods     存储方法"></a>3. methods     存储方法</h4><p><code>this指向  vue实例</code><br>如何在在<code>methods</code>中访问<code>vue</code>数据？   <code>this.属性名</code></p><p><strong>注意</strong></p><p><code>1.使用的事件的回调需要配置在methods对象中，最终会在vm上</code><br><code>2.methods中配置的函数，不要用箭头函数！否则this就不是vm了</code><br><code>3.methods中配置的函数，都是被vue所管理的函数，this的指向是vm  或  组件实例对象</code></p><h4 id="4-computed-计算属性"><a href="#4-computed-计算属性" class="headerlink" title="4. computed    计算属性"></a>4. computed    计算属性</h4><p>作用： 解决模板语法冗余</p><p>原理：<code>底层借助了Obeject.defineproperty方法提供的getter和setter。</code></p><p>语法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//简写  只用get方法时才能简写</span><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">//简写</span>    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xing <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ming    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//全写</span><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">fullName</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//value就是你修改的值----fullName</span><span class="token comment">//也就是说你计算的那个计算的属性的当时的状态</span><span class="token comment">//get方法必须写return</span><span class="token comment">//set则是不写</span></code></pre><p><strong>优势：</strong></p><p>与methods相比，内部有缓存机制，保存了第一次读取时的数据，以后只有依赖数据未发生改变，就不会调用getter，直接读取缓存，效率更高，调试方便</p><p><strong>get函数什么时候执行？</strong><br><code>1.初次读取时会执行一次</code><br><code>2.当依赖的数据发生改变时会再次调用</code></p><p><code>计算属性虽然在书写的时候是一个函数，但最终还是会被vue处理成一个属性，直接写他的方法名即可</code></p><h4 id="5-watch-侦听器"><a href="#5-watch-侦听器" class="headerlink" title="5. watch : 侦听器"></a>5. watch : 侦听器</h4><p>作用 ： 侦听<code>vue</code>中某一个数据变化<br>语法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//深度监听   写在Vue实例里面</span><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>         <span class="token literal-property property">data中的数据属性</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">immediate</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//初始化时让handler调用一下</span>              <span class="token comment">//什么时候调用handler？当被监视的属性发生改变时</span>              <span class="token comment">//参数 newValue 新值 oldValue旧值</span>              <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token comment">//写在Vue实例外面</span>vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'data中的数据属性'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//初始化时让handler调用一下</span>            <span class="token comment">//什么时候调用handler？当被监视的属性发生改变时</span>            <span class="token comment">//参数 newValue 新值 oldValue旧值</span>            <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                         <span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>​</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//简写  即不进行深度监听才能使用简写</span><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token comment">//完整</span>     <span class="token comment">/*hot: &#123;     //immediate:true,//初始化时，让handler调用以下     //handler什么时候调用？当hot发生改变时     handler(newValue, oldValue) &#123;     console.log('hot被修改了', newValue, oldValue);     &#125;     &#125;*/</span>     <span class="token comment">//简写</span>     <span class="token function">hot</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hot被修改了'</span><span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 写在外面</span>vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'hot'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hot被修改了'</span><span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><code>应用场景</code>：  数据的变化 需要执行相同的业务(实时监听数据的变化)</p><p><strong>何时被调用？</strong></p><p>1.当被监视的属性发生改变时<br>2.<code>immediate</code>为true时，初始化自动调用</p><p><strong>注意：</strong><br>1.当监视属性变化时，handler回调函数自动调用<br>2.监视的属性必须存在，才能监视</p><h5 id="watch与computed之间的区别"><a href="#watch与computed之间的区别" class="headerlink" title="watch与computed之间的区别"></a>watch与computed之间的区别</h5><p><code>1.computed能完成的功能，watch都可以完成</code><br><code>2.watch能完成的功能，computed不一定能完成，例如watch可以进行异步操作</code><br><code>3.计算属性是无法维护异步操作的数据的</code><br>两个重要的原则<br><code>1.所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件对象</code><br><code>2.所有不被vue所管理的函数（定时器的回调函数，ajax的回调函数 promise的回调函数等），最好写成箭头函数，这样的this才指向vm 或 组件实例对象</code></p><h4 id="6-name"><a href="#6-name" class="headerlink" title="6. name:"></a>6. name:</h4><p><code>vue-devtools工具中的组件名由name决定</code></p><p><strong>命名规范：</strong><br><code>大驼峰 + 横杠命名法</code><br><code>多个单词组成</code></p><h4 id="7-components-注册组件"><a href="#7-components-注册组件" class="headerlink" title="7. components    注册组件"></a>7. components    注册组件</h4><p>当你创建了一个父子组件，在父组件中使用子组件，如何使用？</p><p>1.导入子组件<br>2.在components中注册子组件<br>3.在模板中使用子组件</p><h4 id="8-props-传值接收"><a href="#8-props-传值接收" class="headerlink" title="8. props  传值接收"></a>8. props  传值接收</h4><p>父给传子传值，使用props接收</p><h4 id="9-directives-自定义指令"><a href="#9-directives-自定义指令" class="headerlink" title="9. directives  自定义指令"></a>9. directives  自定义指令</h4><p><strong>自定义语法何时会被调用？</strong><br>1.指令与元素成功绑定时<br>2.指令所在模板被重新解析时 </p><p>两种注册方式</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//局部指令  写在Vue实例</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">directives</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">指令名</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// (1)inserted : 指令第一次使用执行</span>        <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">// el是指令所在的dom , binding.value是指令值</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// (2)update : 指令值变化</span>        <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 全局指令       全局自定义指令(在main.js注册,任何组件使用</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span> <span class="token string">'指令名'</span> <span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>     <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span></code></pre><p><strong>配置对象中常用的3种回调名：</strong><br><code>1.bind函数：指令与元素成功绑定时调用</code><br><code>2.inserted函数：指令被添加在标签上时，自动被调用</code><br><code>3.update函数：指令所在模板结构被重新调用</code></p><p>这里面的回调函数，同样是能收到element,binding两个参数</p><p><strong>备注</strong><br>1.指定定义时不加v-，但使用时要加v-<br>2.指令名如果是多个单词，要使用<code>kebeb-case</code>命名方式，不要使用<code>camelCase</code>命名</p><h4 id="10-filters过滤器"><a href="#10-filters过滤器" class="headerlink" title="10. filters过滤器"></a>10. filters过滤器</h4><p>语法：<br>第一步：在data配置项中，配置    data数据中的属性名<br>第二步：data数据中的属性名  |  filters中的方法名<br>第三步：创建filters配置项，方法名(data数据中的属性名)，这里面是形参</p><p>1.只能使用在插值表达式和v-bind属性绑定<br>2.过滤器应该添加在表达式的尾部，由管道符进行调试   <code>|</code><br><code>3.filters与data配置项同级，过滤器必须要有返回值 return</code><br>4.使用filters，最终的值是filters的返回值，而不是data中的属性名的值<br>过滤器函数形参中的val，永远都是管道符前面的那个值<br>5.本质是一个函数，并且只支持在vue2使用</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>     <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name <span class="token operator">|</span> a<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> <span class="token comment">//data中的属性名 | filters中的方法名</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'hello vue'</span>    <span class="token comment">//配置数据</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">filters</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//val拿到data中的属性名</span>                    <span class="token comment">//charAt(索引值)，获取字符串对应的字符</span>                    <span class="token comment">//toUpperCase()，让字符串大写</span>                    <span class="token keyword">let</span> first <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment">//sclice(从哪截取，到哪结束)</span>                    <span class="token keyword">let</span> last <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>first<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>last<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h5 id="私有过滤器和全局过滤器"><a href="#私有过滤器和全局过滤器" class="headerlink" title="私有过滤器和全局过滤器"></a>私有过滤器和全局过滤器</h5><p><strong>私有过滤器</strong>：在filters配置项中定义的过滤器方法，只能在当前的vm实例所控制的el区域使用<br><strong>全局过滤器</strong>：在vue实例对象外部定义的方法，能够让所有vue实例都能使用</p><p>语法：<code>Vue.filter(全局过滤器的方法名，全局过滤器的处理函数)</code></p><p>例如：<code>Vue.filter(&#39;方法名&#39;,(data中配置属性名)=&gt;&#123; return 返回值 &#125;)</code></p><p><strong>注意</strong>：<br><code>1.全局过滤器的单词是filter，最后面没有s</code><br><code>2.全局需要定义在vue实例对象的前面，因为js是单线程的</code><br><code>3.如果全局过滤器和私有过滤器名字一致，此时按照就近原则，调用私自的过滤器，不会调用全局的过滤器</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name <span class="token operator">|</span> a<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root2"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name <span class="token operator">|</span> a<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token comment">//全局过滤器</span>        Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'hello vue'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">//私有过滤器</span>            <span class="token comment">//在调用时，采取就近原则，调取自身的过滤器</span>            <span class="token literal-property property">filters</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//charAt(索引值)，获取字符串对应的字符</span>                    <span class="token comment">//toUpperCase()，让字符串大写</span>                    <span class="token keyword">let</span> first <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment">//sclice(从哪截取，到哪结束)</span>                    <span class="token keyword">let</span> last <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>first<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>last<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#root2'</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'sb，今天不开心'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="11-mixin混入-配置项"><a href="#11-mixin混入-配置项" class="headerlink" title="11. _mixin混入(配置项)"></a>11. <code>_mixin</code>混入(配置项)</h4><p><strong>功能</strong>：可以将多个组件共用的配置提取成一个混入对象，再将这个混合对象引入<br><code>data中的数据比mixin传过来的数据优先级更高</code><br><code>在写mixins配置项时，一定要记得加s</code><br><strong>步骤</strong><br>1.创建一个混入文件，<code>mixin.js</code><br>2.在混入文件中定义混合，例如：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> mixin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>3.在需要是使用混入的组件中，使用混入，例如：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span>全局混入：在main中引入mixin   <span class="token keyword">import</span> <span class="token punctuation">&#123;</span>mixin<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../mixin'</span>          在main中配置mixin    Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span>mixin<span class="token punctuation">)</span><span class="token number">2.</span>局部混入：在局部组件中引入mixin          <span class="token literal-property property">在局部组件中配置mixins</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'xxx'</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web APIs</title>
      <link href="/star/2023/07207.html"/>
      <url>/star/2023/07207.html</url>
      
        <content type="html"><![CDATA[<h1 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h1><p><code>Web APIs主要总结了DOM和BOM的相关语法与使用</code></p><span id="more"></span><p>​使用js去操作html元素<br>​DOM(文档对象模型)，BOM(浏览器对象模型)</p><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="1-1DOM的认知"><a href="#1-1DOM的认知" class="headerlink" title="1.1DOM的认知"></a>1.1DOM的认知</h3><p><strong>是什么？</strong>：DOM是浏览器提供的一套专门用来操作网页内容的功能，用于开发网页内容特效和实现用户交互<br><strong>DOM树</strong>：将html文档以树状结构直观表现出来，文档树直观体现了标签与标签的关系<br><strong>DOM对象</strong>：浏览器根据html生成的标签生成js对象，即把网页内容当对象来处理<br><strong>document</strong>：是<code>dom</code>里提供的一个对象，网页所有内容都在<code>document</code>里面</p><h3 id="1-2DOM获取元素"><a href="#1-2DOM获取元素" class="headerlink" title="1.2DOM获取元素"></a>1.2DOM获取元素</h3><h4 id="获取DOM对象"><a href="#获取DOM对象" class="headerlink" title="获取DOM对象"></a>获取DOM对象</h4><p><strong>选择匹配第一个元素</strong></p><pre class="language-none"><code class="language-none">document.querySelecter(&#39;css选择器&#39;)参数：包含一个或多个有效的css选择器的字符串返回css选择器匹配的第一个元素，如果没匹配到，则返回null</code></pre><p><strong>选择匹配多个元素</strong></p><pre class="language-none"><code class="language-none">document.querySelecterAll(&#39;css选择器&#39;)参数：包含一个或多个有效的css选择器的字符串返回一个伪数组</code></pre><p><strong>了解</strong></p><pre class="language-none"><code class="language-none">1.document.getElementById(&#39;css选择器&#39;)根据id获取一个id元素2.document.getElementByTagName(&#39;div&#39;)根据标签获取一类元素，获取页面所有div3.document.getElementByClassName(&#39;w&#39;)根据类名获取此类名的所有元素，获取所有类名为w</code></pre><h3 id="1-3设置-修改DOM元素内容"><a href="#1-3设置-修改DOM元素内容" class="headerlink" title="1.3设置&#x2F;修改DOM元素内容"></a>1.3设置&#x2F;修改DOM元素内容</h3><p><strong>document.write() 方法</strong></p><pre class="language-none"><code class="language-none">1.只能将文本内容最追加body中2.文本中包含的标签会解析</code></pre><p><strong>对象.innerText 属性</strong></p><pre class="language-none"><code class="language-none">1.能将文本内容添加到任意标签位置2.文本包含的标签不会被解析</code></pre><p><strong>对象.innerHTML属性</strong></p><pre class="language-none"><code class="language-none">1.能将文本内容添加到任意标签位置2.文本包含的标签会被解析</code></pre><h3 id="1-4设置-修改DOM元素属性"><a href="#1-4设置-修改DOM元素属性" class="headerlink" title="1.4设置&#x2F;修改DOM元素属性"></a>1.4设置&#x2F;修改DOM元素属性</h3><p><strong>设置&#x2F;修改元素常用属性(元素自带的属性)</strong><br>对象.属性名&#x3D;属性值<br>例如：<code>img</code>内部还有的属性<code>src</code>等，先获取过来后，<code>img.src=’./images/.png‘</code></p><p><strong>设置&#x2F;修改元素样式属性(css属性)</strong><br><code>通过style属性操作css</code><br><code>对象.style.样式属性 = ‘值’</code><br><strong>注意</strong>：</p><pre class="language-none"><code class="language-none">1.修改样式通过style属性引出2.如果属性有-连接符，需要转换为小驼峰命名法3.赋值的时候不要忘记加单位</code></pre><p><strong>通过类名（className）操作css</strong><br><code>对象.className = &#39;类名1  类名2&#39;</code><br><strong>注意</strong></p><pre class="language-none"><code class="language-none">className是使用新值换旧值，会把之前的类干掉，如果需要保存之前的那个类，则也要把之前的类写在className中</code></pre><p><strong>通过classList操作类控制css</strong></p><pre class="language-none"><code class="language-none">对象.classList.add(&#39;类名&#39;)      追加一个类对象.classList.remove(&#39;类名&#39;)   删除一个类对象.classList.toggle(&#39;类名&#39;)   切换一个类</code></pre><p><strong>设置&#x2F;修改表单元素属性(表单自带的属性)</strong><br>对象.属性名 &#x3D; 属性值<br><code>特殊:对象.属性名 = true/false    例如：disabled，checked，selected</code></p><h3 id="1-5定时器-间歇函数"><a href="#1-5定时器-间歇函数" class="headerlink" title="1.5定时器-间歇函数"></a>1.5定时器-间歇函数</h3><p>每隔一段时间会自动调用<br><strong>1.开始定时器</strong><br><code>setInterval(函数,间隔时间)</code><br><code>setInterval(function()&#123;&#125;,间歇时间)</code><br>单位：毫秒   1000毫秒&#x3D;1秒<br><strong>2.关闭定时器</strong><br><code>let 变量名 = setInterval(函数,间隔时间)</code><br><code>clearInterval(变量名)</code></p><h3 id="1-6DOM事件基础"><a href="#1-6DOM事件基础" class="headerlink" title="1.6DOM事件基础"></a>1.6DOM事件基础</h3><p>事件监听语法：<code>对象.addEventListener(&#39;事件&#39;,要执行的函数)</code><br><strong>事件三要素</strong></p><pre class="language-none"><code class="language-none">1.事件源：被哪个dom元素触发2.事件：用哪种事件触发3.事件调用的函数：触发了要做什么事</code></pre><p><strong>事件类型</strong></p><pre class="language-none"><code class="language-none">1.鼠标事件click  点击mouseenter 鼠标经过   没有冒泡效果mouseleave  鼠标离开   没有冒泡效果mousemove  鼠标移动2.焦点事件focus  获得焦点blur  失去焦点3.键盘事件Keydown  键盘按下触发Keyup  键盘抬起触发4.文本事件input 用户输入change</code></pre><h3 id="1-7高阶函数"><a href="#1-7高阶函数" class="headerlink" title="1.7高阶函数"></a>1.7高阶函数</h3><p>可以被简单理解为函数的高级应用<br><strong>1.函数表达式</strong><br>把函数当值来看就是高阶函数<br><code>let fn = function()&#123;&#125;</code><br><strong>2.回调函数</strong><br>把函数1作为参数传递给函数2时，称函数1为回调函数</p><h3 id="1-8环境对象-this"><a href="#1-8环境对象-this" class="headerlink" title="1.8环境对象 this"></a>1.8环境对象 this</h3><p><code>this   他就是一个对象     谁调用，this就指向谁</code></p><p><code>直接调用函数，其实就相当于window.函数，所以this指代window</code></p><h3 id="1-9排他编程思想"><a href="#1-9排他编程思想" class="headerlink" title="1.9排他编程思想"></a>1.9排他编程思想</h3><p>如何使用：<br>1.干掉所有人<br>​     使用for循环</p><p>2.复活他自己<br>     通过this或者下标找到自己或者对应的元素</p><h3 id="1-10DOM节点操作"><a href="#1-10DOM节点操作" class="headerlink" title="1.10DOM节点操作"></a>1.10DOM节点操作</h3><p><strong>DOM节点</strong></p><pre class="language-none"><code class="language-none">DOM树里面的每一个内容都称之为节点1.元素节点  所以html标签  html是根节点2.属性节点  所以html标签内部的属性3.文本节点 所有文本</code></pre><h4 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h4><p><strong>第一步：创建节点</strong><br><code>let 对象 = document.createElement(&#39;标签名&#39;)</code><br><strong>第二步：增加节点</strong><br>方法1：插入到父元素的最后一个子元素：<br><code>父元素.appendChild(子元素)</code><br>方法2：插入到父元素中某个子元素的前面：<br><code>父元素.insertBefore(子元素，在哪个元素前面)</code><br><strong>克隆节点</strong><br>同样也是需要上面的两步走<br><strong>特殊情况下，我们新增节点，按照如下操作</strong>：</p><pre class="language-none"><code class="language-none">1.复制一个原有的节点2.把复制的节点放入到指定的元素内部let对象&#x3D;克隆对象.cloneNode(布尔值)cloneNode会克隆出一个跟原标签一样的元素，括号内传入布尔值3.若为true，则代表克隆时会包含后代节点一起克隆4.若为false，则代表克隆时，只克隆当前，不包含后代节点默认：false</code></pre><h4 id="2-删"><a href="#2-删" class="headerlink" title="2.删"></a>2.删</h4><p>在js原生DOM中，删除元素必须通过父元素删除<br>语法：<strong>父元素.removeChild(子元素)</strong><br><strong>注意：</strong><br>如果不存在父子关系则删除不成功<br>删除节点和隐藏节点（display:none）有区别：隐藏则还存在，删除则在html中删除节点</p><h4 id="3-查"><a href="#3-查" class="headerlink" title="3.查"></a>3.查</h4><p><strong>父节点查找</strong><br><code>parentNode 属性</code><br>返回最近一级的父节点   找不到返回null</p><p><code>子元素.parentNode</code></p><p><strong>子节点查找</strong><br><code>父元素.children</code>  （重点）  仅获得所有元素节点,返回的还是一个伪数组<br><code>childNodes</code>     获得所有子节点，包括文本节点（空格，换行），注释节点</p><p><strong>兄弟节点查找</strong><br>1.下一个兄弟节点    <code>nextElementSibling 属性</code><br>2.上一个兄弟节点    <code>previousElementSibling 属性</code></p><h2 id="1-11-时间对象"><a href="#1-11-时间对象" class="headerlink" title="1.11 时间对象"></a>1.11 时间对象</h2><p>时间对象：<strong>用来表示时间的对象</strong><br><strong>作用：可以得到当前系统时间</strong><br><strong>如何使用</strong>：</p><pre class="language-none"><code class="language-none">1.实例化在代码中发现了new关键字，一般将这个操作称为实例化2.获得当前的时间：let  date  &#x3D;  new   Date()3.获得指定的时间：let date  &#x3D;  new  Date(&#39;2022-07-01&#39;)</code></pre><p><strong>注意：</strong></p><pre class="language-none"><code class="language-none">1.小括号为空，则是得到当前的时间2.小括号里面写上时间，可以返回指定的时间时间对象方法</code></pre><h2 id="1-12-时间对象方法"><a href="#1-12-时间对象方法" class="headerlink" title="1.12 时间对象方法"></a>1.12 时间对象方法</h2><h3 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1.常用方法"></a>1.常用方法</h3><p>date（方法名，方法名可以是任意的）.getFullyear()<br>date.getMonth()           获取当月（0-11）从0开始的，如果参数是5月，输出则是4月,记得月份+1<br>date.getDate()     获取当天日期<br>date.getDay()      获取星期几    0-6    与month一样  0是周日，周一是1，周六是6<br>date.getHours    获取小时 0-23<br>date.getMinutes      获取分钟 0-59<br>date.getSeconds    获取秒 0-59<br>利用对象.innerHTML &#x3D; ‘ ‘     将时间带入html页面中</p><h3 id="1-时间戳"><a href="#1-时间戳" class="headerlink" title="1.时间戳"></a>1.时间戳</h3><p>时间戳<br>不需要new创建对象<br><strong>简单写法（常用）</strong></p><pre class="language-none"><code class="language-none">let  date1  &#x3D;  +new   Date();这里面的+new   Date()    返回的就是总的毫秒数</code></pre><p><strong>H5新增的    获取总的毫秒数（不需要new创建对象）</strong></p><pre class="language-none"><code class="language-none">con.log(Date.now());</code></pre><p><strong>只能得到当前的时间戳，前面两种可以返回指定的时间戳</strong></p><pre class="language-none"><code class="language-none">d &#x3D; parseInt(总秒数&#x2F;60&#x2F;60&#x2F;24)     计算天数h &#x3D; parseInt(总秒数&#x2F;60&#x2F;60%24)    计算小时m &#x3D; parseInt(总秒数&#x2F;60%60)      计算分s &#x3D; parseInt(总秒数%60)      计算秒toLocaleString()&#96;方法返回该日期对象的字符串</code></pre><h2 id="1-12DOM事件高级"><a href="#1-12DOM事件高级" class="headerlink" title="1.12DOM事件高级"></a>1.12DOM事件高级</h2><h3 id="1-事件对象"><a href="#1-事件对象" class="headerlink" title="1.事件对象"></a>1.事件对象</h3><p><strong>获取事件对象</strong></p><pre class="language-none"><code class="language-none">事件对象就是一个对象在事件绑定的回调函数的第一个参数就是事件对象事件对象一般命名为e,ev,event</code></pre><p><strong>事件对象的常用属性</strong>   e.事件属性<br>type  获取当前的事件类型<br><strong>鼠标事件</strong>     e.鼠标事件</p><pre class="language-none"><code class="language-none">clientX&#x2F;clientY:   获取光标对于浏览器可见窗口左上角的位置offsetX&#x2F;offsetY:    获取光标相对于DOM元素左上角的位置     &lt;div&gt;&lt;&#x2F;div&gt;    就是在这个div左上角的距离pageX&#x2F;pageY: 获取光标相对于文档坐标</code></pre><p><strong>键盘事件</strong>  e.key</p><pre class="language-none"><code class="language-none">key 用户按下的键盘键的值例如：e.key&#x3D;&#x3D;&#x3D;&#39;enter&#39;</code></pre><h3 id="2-事件流"><a href="#2-事件流" class="headerlink" title="2.事件流"></a>2.事件流</h3><p>捕获阶段   –&gt; 事件目标 –&gt;   冒泡阶段<br><strong>捕获阶段</strong>  从父到子   <code>document -&gt;html -&gt;body -&gt;div</code><br>事件捕获：<code>addEventListener第三个参数传入true</code>，代表捕获阶段触发（很少使用）<br><code>若传入false代表冒泡阶段触发，默认false</code><br><strong>冒泡阶段</strong>  从子到父   <code>div -&gt; body -&gt; html -&gt; document</code><br>事件冒泡：当一个元素触发事件后，会依次调用所有父级元素的同名事件<br><strong>阻止事件流</strong><br><code>事件对象.stopPropagation()</code><br>​此方法可以阻断事件流动传播，对于冒泡与捕获都有效<br><code>事件对象.preventDefault()</code><br>​阻止默认行为，比如链接点击不跳转，表单域的跳转<br><strong>事件委托</strong></p><pre class="language-none"><code class="language-none">事件委托是给父级添加事件 而不是孩子添加事件事件对象.target.style.color &#x3D; &#39;red&#39;孩子相当于      事件对象.target</code></pre><h2 id="1-13网页特效"><a href="#1-13网页特效" class="headerlink" title="1.13网页特效"></a>1.13网页特效</h2><h3 id="1-滚动事件和加载事件"><a href="#1-滚动事件和加载事件" class="headerlink" title="1.滚动事件和加载事件"></a>1.滚动事件和加载事件</h3><p><strong>滚动事件</strong><br>事件名  scroll<br><code>window.addEventListener(&#39;scroll&#39;,function()&#123;&#125;)</code><br><strong>加载事件</strong><br><code>load加载事件</code>      <strong>事件名 load</strong><br><code>window.addEventListener(&#39;load&#39;,function()&#123;&#125;)</code>     等着整个页面加载完毕才回去执行<br><strong>使用场景</strong><br>有些时候需要等页面资源全部处理完了做一些事情<br>老代码喜欢将scrpt写在head中，这时候直接找DOM元素找不到<br><strong>DOMContentLoaded加载事件</strong><br>在html被加载完后去执行，不需要等待css，图片等完全加载<br><code>document.addEventListener(&#39;DOMContentLoaded&#39;,function()&#123;&#125;)</code></p><h3 id="2-元素大小和位置"><a href="#2-元素大小和位置" class="headerlink" title="2.元素大小和位置"></a>2.元素大小和位置</h3><p><strong>scroll （配合offset使用）</strong><br><code>获取宽高（了解）</code><br>获取元素内容的宽高（不包含滚动条），返回值不带单位</p><pre class="language-none"><code class="language-none">scrollWidth scrollHight</code></pre><p><code>获取位置</code></p><pre class="language-none"><code class="language-none">获取元素内容向左向上滚出去看不到的距离scrollLeft和scrollTop这两个属性是可以修改的第一步：先做页面滚动事件，给window添加滚动事件第二步：得到页面滚动距离document.documentElement    是html标签document.documentElement.scrollTop  &gt;&#x3D; sk.offsetTop</code></pre><p><strong>offset  （配合scroll使用）</strong><br>自动获取某个盒子到顶部的距离<br><strong>获取宽高</strong>：获取元素盒子的宽高，包括元素自身设置的宽高，padding，border</p><pre class="language-none"><code class="language-none">offsetWidthoffsetHeight</code></pre><p><code>获取位置</code><br><code>获取元素距离自己定位父级元素的左，上距离，如果父亲没有定位就以body为主</code><br>offsetLeft和offsetTop<br>注意是只读属性  不能修改</p><p><strong>client</strong><br><code>获取宽高</code><br>获取元素的浏览器可视区部分宽高，不包含滚动条和border等<br><code>clientWidth和clientHeight</code><br><code>获取位置</code></p><pre class="language-none"><code class="language-none">获取左边框和上边框宽度clientLeft和clientTop   只读属性resize事件会在窗口尺寸改变的时候触发事件检测屏幕宽度let  w  &#x3D;  document.documentElement.clientWidth</code></pre><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h2 id="Window对象"><a href="#Window对象" class="headerlink" title="Window对象"></a>Window对象</h2><h3 id="BOM（浏览器对象模型）"><a href="#BOM（浏览器对象模型）" class="headerlink" title="BOM（浏览器对象模型）"></a>BOM（浏览器对象模型）</h3><p>BOM是<strong>浏览器对象模型</strong><br><strong>​window是浏览器内置中的全局对象</strong>，我们所学的所有Web APIs的知识内容都是基于window对象实现的<br>​<strong>window对象包括</strong>：<code>document, navigator,location,history,screen</code><br><code>​document是实现DOM的基础，他其实是依附于window的属性</code><br>​注：依附于window对象的所有属性和方法，使用时可以省略window</p><h3 id="定时器-延迟函数"><a href="#定时器-延迟函数" class="headerlink" title="定时器-延迟函数"></a>定时器-延迟函数</h3><p><strong>语法</strong>：<code>setTimeout</code>（回调函数，等待毫秒数）</p><p><code>setTimeout</code>仅仅只执行一次，可以理解为把一段代码延迟执行<br><strong>清除延迟函数</strong><br><code>clearTimeout（）</code>  清除延时函数<br><code>1.let timer = setTimeout（回调函数，等待毫秒数）</code><br><code>2.clearTimeout(timer)</code></p><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>自己调用自己</p><h3 id="js执行机制"><a href="#js执行机制" class="headerlink" title="js执行机制"></a>js执行机制</h3><p>同步和异步<br><strong>同步任务</strong><br>前一个任务结束，才会执行后一个任务<br><strong>异步任务</strong><br>js异步是回调函数实现的<br>分为以下三种：</p><pre class="language-none"><code class="language-none">普通事件：click，resize等资源加载：load，error等定时器：setInterval   setTimeout等</code></pre><p><strong>js的执行机制</strong></p><p>1.先执行执行栈中的同步任务<br>2.异步任务放入任务队列中<br>3.一旦执行栈中的所有同步任务执行完毕，系统就会依次读取任务队列中的异步任务<br>结束等待状态，进入执行栈，开始执行</p><p>event loop（事件循环）：<br>1.主线程执行完毕，查询任务队列，取出一个任务，推入主线程处理<br>2.重复该动作<br>异步队列中，谁先触发就先进入主线程，就先执行谁</p><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><p><code>location对象</code>，它拆分保存了URL地址的各个组成部分<br><code>使用方式</code>：<br>location.属性<br>location.方法<br><strong>常用属性</strong></p><pre class="language-none"><code class="language-none">1.href属性获取完整的URL地址，对其赋值时用于地址的跳转2.search属性获取地址中携带的参数，符号?后面部分3.hash属性获取地址中的哈希值，符号#后面的部分4.reload()方法用来刷新当前页面传入参数true是强制刷新  默认是false，刷新</code></pre><h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><p><strong>该对象下记录了浏览器自身的相关信息</strong><br>常用属性和方法：<br>通过userAgent检测浏览器的版本及平台</p><h3 id="histroy对象"><a href="#histroy对象" class="headerlink" title="histroy对象"></a>histroy对象</h3><p><strong>该对象与浏览器地址栏的操作相对应，如前进，后退，历史记录等</strong><br>方法和属性：</p><pre class="language-none"><code class="language-none">back()     后退功能forward()    前进功能go(参数)     参数是1前进1个页面，-1则是后退一个页面</code></pre><h2 id="swiper插件"><a href="#swiper插件" class="headerlink" title="swiper插件"></a>swiper插件</h2><p>这个自己去了解一下，后面的框架组件库不需要自己写，自己引用即可</p><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><p><strong>特性</strong><br>​1.生命周期永久生效，除非手动删除，否则关闭页面也会存在<br>​2.可以多窗口（页面）共享（同一浏览器可以共享）<br>​3.以键值对的形式存储使用<br><strong>声明</strong>  <code>localStorage.setitem(&#39;key&#39;,&#39;value&#39;)</code><br><strong>存储，获取，删除简单数据类型</strong><br>​<code>存储数据  localStorage.setItem(&#39;键&#39;,&#39;值&#39;)</code><br>​<code>删除数据  localStorage.removeltem(&#39;键&#39;)</code><br><strong>存储，获取，删除复杂数据类型</strong></p><p><strong>存储数据</strong><br>本地只能存储字符串，无法存储复杂数据类型，需要将复杂数据类型转换为JSON字符串，在存储本地</p><pre class="language-none"><code class="language-none">JSON   属性和值都是双引号包含JSON.stringify（复杂数据类型）将复杂数据类型转换为JSON字符串，在存储本地JSON.parse（JSON字符串）将JSON字符串转换成对象    取出时使用例如let obj &#x3D; &#123;    uname:&#39;pink&#39;,    age:18,    address:&#39;北京&#125;localStorage.setItem(&#39;obj&#39; , JSON.stringify(obj))获取数据 JSON.parse( localStorage.getItem(&#39;键&#39;))</code></pre><h3 id="sessionStorage-了解"><a href="#sessionStorage-了解" class="headerlink" title="sessionStorage(了解)"></a>sessionStorage(了解)</h3><p><strong>特性</strong>：</p><pre class="language-none"><code class="language-none">1.生命周期为关闭窗口2.在同一个页面下数据可共享3.以键值对的形式存储使用4.用法与localStorage基本相同</code></pre><p><strong>使用方法与localStorage一样</strong></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>1.表单验证：用户名表单只能输入英文字母，数字或者下划线，昵称输入框中可以输入中文（匹配）<br>2.过滤掉页面内容中的一些敏感词（替换），或从字符串中获取我们想要的特定部分（提取）等</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><strong>第一步：声明变量</strong></p><pre class="language-none"><code class="language-none">方法一：new一个RegExp对象let  变量名   &#x3D;   new   RegExp(&#x2F;表达式&#x2F;)方法二：字面量声明let  变量名  &#x3D;  &#x2F;表达式&#x2F;</code></pre><p><strong>第二步：检测</strong></p><pre class="language-none"><code class="language-none">1.变量名.text(要被检测的字符串)是变量名的变量值被text方法里面的值检测变量名的变量值是否包含在text方法里面的字符串里面如果匹配成功，则返回的是一个true，反之返回false2.变量名.exec(被检测的字符串) 如果匹配成功，则返回的是一个数组，反之返回null是变量名的变量值被exec方法里面的值检测变量名的变量值是否包含在exec方法里面的字符串里面</code></pre><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p><strong>普通字符：</strong><br>大多数字符仅能描述他们本身，这些字符称作普通字符，例如所有的字母<br>数字，也就是说普通字符只能够匹配字符串中与他们相同的字符</p><p><strong>元字符（特殊字符）</strong><br>是一些具有特殊含义的字符，可以极大的提高了灵活性和强大的匹配能力，比如：规定用户只能输入26个英文字母，普通字符的话abcdefg……但元字符写法[a-z]</p><h4 id="边界符-（表示位置，开头和结尾，必须用什么开头，用什么结尾）"><a href="#边界符-（表示位置，开头和结尾，必须用什么开头，用什么结尾）" class="headerlink" title="边界符  （表示位置，开头和结尾，必须用什么开头，用什么结尾）"></a>边界符  （表示位置，开头和结尾，必须用什么开头，用什么结尾）</h4><p>用来提示字符所处的位置<br>^        表示匹配行首的文本（以谁开始）     &#x2F;^前端&#x2F;<br>$        表示匹配结尾的文本（以谁结尾）    &#x2F;前端$&#x2F;<br>如果^ 和 $  一起使用则是精确定位           &#x2F;^前端$&#x2F;</p><h4 id="量词-表示重复次数"><a href="#量词-表示重复次数" class="headerlink" title="量词    (表示重复次数)"></a>量词    (表示重复次数)</h4><p>设定某个模式出现的次数</p><p>(*)            重复0次或者更多次              &#x2F;a *&#x2F;<br>(+)            重复1次或者更多次              &#x2F;a +&#x2F;<br>？             重复0次或者1次                   &#x2F;^a ?$&#x2F;<br>{n}           重复n次                                 &#x2F;^a {次数}$&#x2F;<br>{n,}          重复n次或更多次                  &#x2F;^a {次数，}$&#x2F;<br>{n,m}       重复n到m次                          &#x2F;^a {次数，}$&#x2F;<br>注意：符号两边千万不要出现空格</p><h4 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h4><p><strong>[]匹配字符集合</strong><br>后面是字符串只要包含abc中任意一个字符，都返回true</p><p>1.在[] 里面加  -   连字符<br>表示一个范围<br>[a-z]       表示a-z取一个<br>[1-9]       表示大小写都可以取一个<br>[a-zA-Z]    表示1-9取一个</p><p>2.在[] 里面加  ^  取反符<br>[ ^1-9]       匹配除去1-9以外的字符</p><p>3 . 匹配   除换行符   以外的任何单个字符</p><p>4 .预定义：指的是某些常见模式的简写方式<br>\d       相当于[0-9]<br>\D      相当于[ ^ 0-9 ]<br>\w      相当于[A-Za-z0-9_]         匹配任意字母，数字，下划线_<br>\W      相当于[ ^A-Za-z0-9_]    匹配    除任意字母，数字，下划线     以外的字符<br>\s      相当于[\t\r\n\v\f]            匹配空格 （换行符、制表符，空格符等）<br>\S      相当于[ ^\t\r\n\v\f]         匹配非空格 （换行符、制表符，空格符等）   的字符</p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>&#x2F;表达式&#x2F;修饰符<br>i     正则匹配时，字母不区分大小写        ignore<br>g     匹配所有满足正则表达式的效果       global</p><p>replace    替换符<br><strong>字符串.replace(&#x2F;正则表达式&#x2F;,’替换文本’)</strong></p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><h3 id="回流与重绘"><a href="#回流与重绘" class="headerlink" title="回流与重绘"></a>回流与重绘</h3><p>html进行结构排版  生成DOM树<br>css进行样式排版  生成样式规则<br>根据DOM树和样式规则生成渲染树<br>回流：根据渲染树，得到节点的位置大小<br>重绘：根据计算和获取的信息对页面进行绘制<br>最后显示在页面</p><h3 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> btn<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        btn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> btn<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                btn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">''</span>            <span class="token punctuation">&#125;</span>            btn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'pink'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="window-BOM-包括"><a href="#window-BOM-包括" class="headerlink" title="window(BOM)包括"></a>window(BOM)包括</h3><p>navigator对象<br>location对象<br>histroy对象<br>document对象<br>screen对象</p><h3 id="js运行机制"><a href="#js运行机制" class="headerlink" title="js运行机制"></a>js运行机制</h3><p>1）所有的同步任务都在主线程上执行，行成一个执行栈。<br>2）除了主线程之外，还存在一个任务列队，只要异步任务有了运行结果，就在任务列队中植入一个时间标记。<br>3）主线程完成所有任务(执行栈清空），就会读取任务列队，先执行微任务队列在执行宏任务队列。<br>4）重复上面三步。<br>只要主线程空了，就会读取任务列队，这就是js的运行机制，也被称为 event loop（事件循环）</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebRTC</title>
      <link href="/star/2023/07205896.html"/>
      <url>/star/2023/07205896.html</url>
      
        <content type="html"><![CDATA[<!-- ---abbrlink: 5896title: WebRTCtags:  Web前端扩展categories: Web前端扩展auther: 冷杨威data: '2021-04-08 22:27'password: lywcxyabstract: 这里有东西被加密了，需要输入密码查看哦。message: 您好，这里需要密码。wrong_pass_message: 抱歉，这个密码看着不太对，请再试试。wrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。--- --><h3 id="WebRTC"><a href="#WebRTC" class="headerlink" title="WebRTC"></a>WebRTC</h3><p><code>这篇总结主要介绍一下WebRTC</code></p><span id="more"></span><p>WebRTC是基于navigator.mediaDevices中的getUserMedia()方法实现的</p><p>直播RTMP  单项传播<br>视频&#x2F;语音WebRTC     双向传播</p><h1 id="WebRTC配合websocket"><a href="#WebRTC配合websocket" class="headerlink" title="WebRTC配合websocket"></a>WebRTC配合websocket</h1><p>是一个互联网浏览器间的实时通信平台</p><p>WebRTC虽然冠以’web’之名，但不仅仅受限于传统互联网应用或浏览器的终端运行环境，<br>实际上无论终端环境是浏览器，桌面应用，移动设备，<br>只要ip连接可到达且符合WebRTC规范就可以互通</p><h3 id="前端获取摄像头流程"><a href="#前端获取摄像头流程" class="headerlink" title="前端获取摄像头流程"></a>前端获取摄像头流程</h3><p>1.初始化button，video控件<br>2.绑定打开摄像头响应事件onOpenCamera<br>3.如果要打开摄像头则点击”打开摄像头按钮”，触发onOpenCamera事件的调用<br>4.当触发onOpenCamera调用时：<br>    a.设置约束条件，即<strong>getUserMedia</strong>函数的入参<br>    b.getUserMedia有两种情况，一是正常打开摄像头，使用handleSuccess处理：<br>    一种是打开摄像头失败，使用handleError处理<br>    c.当正常打开摄像头时，则将getUserMedia返回的stream对象赋值给video控件的srcObject,<br>    即可将视频显示出来</p><p><code>html文件</code></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vid<span class="token punctuation">"</span></span> <span class="token attr-name">autoplay</span> <span class="token attr-name">playsinline</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>打开摄像头<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span></code></pre><p><code>js文件</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> constrains <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">audio</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">video</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">width</span><span class="token operator">:</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token literal-property property">height</span><span class="token operator">:</span><span class="token number">720</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//获取成功的结果</span><span class="token keyword">function</span> <span class="token function">handleSuccess</span><span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> video <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#vid'</span><span class="token punctuation">)</span>    video<span class="token punctuation">.</span>srcObject <span class="token operator">=</span> stream<span class="token punctuation">&#125;</span><span class="token comment">//失败的结果</span><span class="token keyword">function</span> <span class="token function">handleError</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/*他这个就是利用navigator.mediaDevices.getUserMedia(constrains)的成功拿到它成功的结果，而constrains配置项则是指定了请求的媒体类型和相对应的参数，例如是音频还是视频？分辨率是多少？分辨率的最大值是多少，最小值是多少？同时能设置你所理想的值通过ideal*/</span><span class="token keyword">function</span> <span class="token function">onOpenCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span>constrains<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>handleSuccess<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>handleError<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>onOpenCamera<span class="token punctuation">)</span></code></pre><h3 id="前端获取音频流程"><a href="#前端获取音频流程" class="headerlink" title="前端获取音频流程"></a>前端获取音频流程</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// html文件</span><span class="token operator">&lt;</span>radio id<span class="token operator">=</span><span class="token string">"rad"</span> autoplay controls<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>radio<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span>播放录音<span class="token operator">&lt;</span>button<span class="token operator">></span><span class="token comment">// js文件</span><span class="token keyword">const</span> constrains <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">audio</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">video</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">width</span><span class="token operator">:</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token literal-property property">height</span><span class="token operator">:</span><span class="token number">720</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//获取成功的结果</span><span class="token keyword">function</span> <span class="token function">handleSuccess</span><span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> video <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#rad'</span><span class="token punctuation">)</span>    audio<span class="token punctuation">.</span>srcObject <span class="token operator">=</span> stream<span class="token punctuation">&#125;</span><span class="token comment">//失败的结果</span><span class="token keyword">function</span> <span class="token function">handleError</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/*他这个就是利用navigator.mediaDevices.getUserMedia(constrains)的成功拿到它成功的结果，而constrains配置项则是指定了请求的媒体类型和相对应的参数，例如是音频还是视频？分辨率是多少？分辨率的最大值是多少，最小值是多少？同时能设置你所理想的值通过ideal*/</span><span class="token keyword">function</span> <span class="token function">onOpenCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span>constrains<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>handleSuccess<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>handleError<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>onOpenCamera<span class="token punctuation">)</span></code></pre><h3 id="navigator-mediaDevices-getUserMedia"><a href="#navigator-mediaDevices-getUserMedia" class="headerlink" title="navigator.mediaDevices.getUserMedia()"></a>navigator.mediaDevices.getUserMedia()</h3><p>用于获取媒体流，用于音视频采集和播放。</p><pre class="language-none"><code class="language-none">navigator.mediaDevices.getUserMedia(constraints)返回的是一个promise对象，使用then可以拿到他成功的结果，而他的成功的结果即视频的实时流</code></pre><p>constraints这个形参是一个对象<br>1.可以配置是否显示音频&#x2F;视频</p><pre class="language-none"><code class="language-none">&#123; audio: true, video: true &#125;</code></pre><p>2.同样可以配置屏幕的分辨率，浏览器会尝试满足</p><pre class="language-none"><code class="language-none">&#123;audio: true,video: &#123; width: 1280, height: 720 &#125;&#125;</code></pre><p>3.同样可以强制要求配置你的分辨率的最大值&#x2F;最小值，浏览器会强制满足</p><pre class="language-none"><code class="language-none">以下参数表示要求获取最低为 1280x720 的分辨率&#123;audio: true,  video: &#123;width: &#123; min: 1280 &#125;,height: &#123; min: 720 &#125;&#125;&#125;</code></pre><p>4.在第三点的强制下，可能会满足不了，因此promise会返回失败的结果，<br>因此我们可以给他设置一个理想值</p><pre class="language-none"><code class="language-none">&#123;audio: true,  video: &#123;    width: &#123; min: 1024, ideal: 1280, max: 1920 &#125;,    height: &#123; min: 776, ideal: 720, max: 1080 &#125;  &#125;&#125;</code></pre><p>5.开启前置摄像头</p><pre class="language-none"><code class="language-none">&#123; audio: true, video: &#123; facingMode: &quot;user&quot; &#125; &#125;</code></pre><p>6.开启后置摄像头</p><pre class="language-none"><code class="language-none">&#123; audio: true, video: &#123; facingMode: &#123; exact: &quot;environment&quot; &#125; &#125; &#125;</code></pre><p>视频完整代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//html   </span><span class="token comment">//playsinline该属性标识内联播放，如果不设置，那么它将会全屏播放</span><span class="token operator">&lt;</span>video id<span class="token operator">=</span><span class="token string">"vid"</span> autoplay playsinline<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>video<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span>打开摄像头<span class="token operator">&lt;</span>button<span class="token operator">></span><span class="token comment">//js</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">//res则是成功的一个媒体内容的流.</span>    <span class="token comment">//因此你此时只需要把这个媒体内容的流.赋值给video的实时流即可</span>          document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#vid'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>srcObject <span class="token operator">=</span> res        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>音频完整代码与视频一致，只需要将video改为audio即可</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>audio id<span class="token operator">=</span><span class="token string">"rad"</span> autoplay controls<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>audio<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span>播放录音<span class="token operator">&lt;</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>    navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">audio</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>          document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#rad'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>srcObject <span class="token operator">=</span> res        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="前端同时打开摄像头与麦克风"><a href="#前端同时打开摄像头与麦克风" class="headerlink" title="前端同时打开摄像头与麦克风"></a>前端同时打开摄像头与麦克风</h4><p>直接把constraints这个形参中的audio与video都为true即可</p>]]></content>
      
      
      <categories>
          
          <category> Web前端扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebSocket</title>
      <link href="/star/2023/0720588.html"/>
      <url>/star/2023/0720588.html</url>
      
        <content type="html"><![CDATA[<!-- ---abbrlink: 588title: websockettags:  Web前端扩展categories: Web前端扩展auther: 冷杨威data: '2021-04-08 22:27'password: lywcxyabstract: 这里有东西被加密了，需要输入密码查看哦。message: 您好，这里需要密码。wrong_pass_message: 抱歉，这个密码看着不太对，请再试试。wrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。top: 4--- --><h3 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h3><p><code>这篇总结主要介绍一下websocket</code></p><span id="more"></span><h2 id="常见的消息推送方案"><a href="#常见的消息推送方案" class="headerlink" title="常见的消息推送方案"></a>常见的消息推送方案</h2><p>1.轮询<br>2.长轮询<br>3.SSE<br>4.websocket</p><h3 id="轮询方式"><a href="#轮询方式" class="headerlink" title="轮询方式"></a>轮询方式</h3><p>轮询：指的是浏览器以指定的时间间隔向服务器发出http请求，服务器实时返回数据给浏览器<br>长轮询：浏览器发出ajax请求，服务器端接收请求后，如果没有数据，则会阻塞请求直到有数据或者超时才会返回</p><h3 id="SSE-server-sent-event-：服务器发送事件"><a href="#SSE-server-sent-event-：服务器发送事件" class="headerlink" title="SSE(server-sent event)：服务器发送事件"></a>SSE(server-sent event)：服务器发送事件</h3><p>1.SSE在服务器和客户端之间打开了一个单项通道，是服务器给浏览器的<br>2.服务器响应的不再是一次性的数据包，即不是把数据一次性返回回来，而是text&#x2F;event-stream类型的数据流信息<br>3.服务器有数据变更时将以数据流式传输到客户端（数据流式指的就是有源源不断的数据从服务器响应给客户端）</p><h2 id="websocket-1"><a href="#websocket-1" class="headerlink" title="websocket"></a>websocket</h2><h3 id="1-websocket介绍"><a href="#1-websocket介绍" class="headerlink" title="1.websocket介绍"></a>1.websocket介绍</h3><p>是什么？websocket是一种基于TCP连接上进行<strong>全双工协议</strong><br>什么是<strong>全双工协议</strong>？：允许数据在两个方向上同时传输<br>什么是<strong>半双工协议</strong>？：允许数据在两个方向上传输，但是同一个时间段内只允许一个方向上传输</p><h3 id="2-websocket原理"><a href="#2-websocket原理" class="headerlink" title="2.websocket原理"></a>2.websocket原理</h3><p>浏览器给服务器发送http的协议请求，这个请求头中带有UPgrade.websocket，要求将协议升级为websocket协议。<br>服务器响应头中的响应状态码为101 Switching Protocls，此时就将http协议转换为websocket协议了。<br>再让浏览器发送下一次请求时开始，都是发送的websocket协议的请求了</p><h3 id="3-浏览器websocket-API-即前端应该怎么做？"><a href="#3-浏览器websocket-API-即前端应该怎么做？" class="headerlink" title="3.浏览器websocket API  (即前端应该怎么做？)"></a>3.浏览器websocket API  (即前端应该怎么做？)</h3><h4 id="1-websocket-相关事件"><a href="#1-websocket-相关事件" class="headerlink" title="1.websocket 相关事件"></a>1.websocket 相关事件</h4><p>open事件          ws.onopen          连接建立时触发<br>message事件   ws.onmessage    浏览器接收到服务器发送的数据时触发<br>close事件          ws.onclose           连接关闭时触发<br>error事件          ws.onerror           在WebSocket连接发生错误时触发。</p><h4 id="2-websocket-对象提供的方法"><a href="#2-websocket-对象提供的方法" class="headerlink" title="2.websocket 对象提供的方法"></a>2.websocket 对象提供的方法</h4><p>send(数据)    通过websocket对象调用该方法发送数据给服务器</p><h4 id="3-步骤："><a href="#3-步骤：" class="headerlink" title="3.步骤："></a>3.步骤：</h4><p>1.创建websocket对象</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//连接建立时给个消息提示</span><span class="token punctuation">&#125;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">//拿到点击后输入框数据</span>     <span class="token keyword">let</span> msg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value     <span class="token comment">// 发送消息，调用ws对象的send方法，发送输入框数据</span>     ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>     <span class="token comment">//渲染页面</span>     content<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">用户：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>msg<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &lt;br></span><span class="token template-punctuation string">`</span></span>   <span class="token punctuation">&#125;</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//通过evt.data可以获取服务器发送的数据。同时通过evt.data渲染数据</span><span class="token punctuation">&#125;</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//连接关闭时给个消息提示</span><span class="token punctuation">&#125;</span></code></pre><p><strong>URL这个参数该如何去写？</strong><br>格式：协议:&#x2F;&#x2F;ip地址&#x2F;访问路径<br>协议：协议名应为ws</p><h3 id="4-原生js实现机器人客服"><a href="#4-原生js实现机器人客服" class="headerlink" title="4.原生js实现机器人客服"></a>4.原生js实现机器人客服</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入聊天内容<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>退出聊天室<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">let</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.content'</span><span class="token punctuation">)</span>      <span class="token comment">// 1.与服务器进行WebSocket链接</span>      <span class="token comment">// wss://echo.websocket.org : 这个接口你给它发什么，它就回复你什么</span>      <span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://echo.websocket.org'</span><span class="token punctuation">)</span> <span class="token comment">// 建立与服务端地址的连接</span>      <span class="token comment">// 2.连接成功回调</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果执行此函数 表示与服务器建立关系成功</span>        content<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token string">'提示：&lt;p style="color:red">websockt链接成功&lt;/p>'</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//3.发送消息</span>      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> msg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value        <span class="token comment">// 发送消息</span>        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token comment">//渲染页面</span>        content<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">用户：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>msg<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &lt;br></span><span class="token template-punctuation string">`</span></span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//4.接收消息</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// event中的data就是服务器发过来的消息</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                content<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">服务器：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>event<span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &lt;br></span><span class="token template-punctuation string">`</span></span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//5.关闭连接</span>      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//6.成功关闭链接回调</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 关闭连接成功</span>        content<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token string">'提示：&lt;p style="color:red">websockt关闭成功&lt;/p>'</span>      <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="5-vue中如何使用？"><a href="#5-vue中如何使用？" class="headerlink" title="5.vue中如何使用？"></a>5.vue中如何使用？</h3><p>下载：使用vue ui安装，或<code>npm i socket.io-client</code></p><ul><li><p>1.连接服务器</p><ul><li><code>const socket = io(&#39;http://118.24.62.36:8888&#39;)</code></li><li>机器人聊天客服的网址是：<a href="http://118.24.62.36:8888/">http://118.24.62.36:8888</a></li></ul></li><li><p>2.连接成功回调</p><ul><li><pre><code class="javascript">socket.on(&#39;connect&#39;, () =&gt; &#123;   console.log(&#39;建立连接成功了&#39;)&#125;)<pre class="language-none"><code class="language-none">- 3.接收服务器消息  - &#96;&#96;&#96;javascript    socket.on(&#39;message&#39;, msg &#x3D;&gt; &#123;&#125;)</code></pre></code></pre></li></ul></li><li><p>4.给服务器发消息</p><ul><li><pre><code class="javascript">socket.emit(&#39;message&#39;, &#123;  // 消息  msg: &#39;消息内容&#39;,  // 时间戳  timestamp: Date.now()&#125;)<pre class="language-none"><code class="language-none">- 5.断开链接  - &#96;&#96;&#96;javascript    socket.disconnect()</code></pre></code></pre></li></ul></li></ul><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-nav-bar</span>      <span class="token attr-name">fixed</span>      <span class="token attr-name">left-arrow</span>      <span class="token attr-name">@click-left</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$router.back()<span class="token punctuation">"</span></span>      <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>机器人<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-nav-bar</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chat-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 左侧是机器人 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chat-item left<span class="token punctuation">"</span></span>          <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.timestamp<span class="token punctuation">"</span></span>          <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.isStu === true<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-image</span> <span class="token attr-name">fit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cover<span class="token punctuation">"</span></span> <span class="token attr-name">round</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>littleQ<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chat-pao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; item.msg &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 右侧是当前用户 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chat-item right<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.timestamp<span class="token punctuation">"</span></span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chat-pao my<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; item.msg &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-image</span> <span class="token attr-name">fit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cover<span class="token punctuation">"</span></span> <span class="token attr-name">round</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>self<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reply-container van-hairline--top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-search</span> <span class="token attr-name">v-model.trim</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>word<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>说点什么...<span class="token punctuation">"</span></span> <span class="token attr-name">@search</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>send<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-search</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token comment">// 导入精美的图片</span><span class="token keyword">import</span> littleQ <span class="token keyword">from</span> <span class="token string">'@/assets/student.jpg'</span><span class="token keyword">import</span> self <span class="token keyword">from</span> <span class="token string">'@/assets/teacher.png'</span><span class="token comment">// socket.io的客户端</span><span class="token keyword">import</span> io <span class="token keyword">from</span> <span class="token string">'socket.io-client'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'student'</span><span class="token punctuation">,</span>  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">word</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 聊天信息</span>      littleQ<span class="token punctuation">,</span> <span class="token comment">// 机器人</span>      self<span class="token punctuation">,</span> <span class="token comment">// 自己</span>      <span class="token literal-property property">socket</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token comment">// socket对象</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1.开始连接</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> <span class="token function">io</span><span class="token punctuation">(</span><span class="token string">'http://118.24.62.36:8888'</span><span class="token punctuation">)</span>    <span class="token comment">// 2.链接成功回调</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connect'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'建立连接成功了'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 3.接收服务器返回数据</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token parameter">msg</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'接收到消息了'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'msg:'</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token operator">...</span>msg<span class="token punctuation">,</span>        <span class="token comment">// 是机器人</span>        <span class="token literal-property property">isStu</span><span class="token operator">:</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//4.发送消息</span>    <span class="token function">send</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>word<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>word <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 消息</span>          <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>word<span class="token punctuation">,</span>          <span class="token comment">// 时间戳</span>          <span class="token literal-property property">timestamp</span><span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment">// 本地数组也要更新</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>word<span class="token punctuation">,</span>          <span class="token comment">// 时间戳</span>          <span class="token literal-property property">timestamp</span><span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment">// 不是机器人</span>          <span class="token literal-property property">isStu</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>word <span class="token operator">=</span> <span class="token string">''</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.student-container</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #fafafa<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 46px 0 50px 0<span class="token punctuation">;</span>  <span class="token selector">.van-nav-bar</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #3296fa<span class="token punctuation">;</span>    <span class="token selector">.van-nav-bar__title</span> <span class="token punctuation">&#123;</span>      <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.van-icon</span> <span class="token punctuation">&#123;</span>      <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.chat-list</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">overflow-y</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span>    <span class="token selector">.chat-item</span> <span class="token punctuation">&#123;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token selector">.van-image</span> <span class="token punctuation">&#123;</span>        <span class="token property">vertical-align</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.chat-pao</span> <span class="token punctuation">&#123;</span>        <span class="token property">vertical-align</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>        <span class="token property">min-width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>        <span class="token property">max-width</span><span class="token punctuation">:</span> 70%<span class="token punctuation">;</span>        <span class="token property">min-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 38px<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 0.5px solid #c2d9ea<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #e0effb<span class="token punctuation">;</span>        <span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>        <span class="token selector">&amp;::before</span> <span class="token punctuation">&#123;</span>          <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>          <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>          <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>          <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>          <span class="token property">top</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>          <span class="token property">border-top</span><span class="token punctuation">:</span> 0.5px solid #c2d9ea<span class="token punctuation">;</span>          <span class="token property">border-right</span><span class="token punctuation">:</span> 0.5px solid #c2d9ea<span class="token punctuation">;</span>          <span class="token property">background</span><span class="token punctuation">:</span> #e0effb<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.chat-pao.my</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #9eea6a<span class="token punctuation">;</span>        <span class="token selector">&amp;::before</span> <span class="token punctuation">&#123;</span>          <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>          <span class="token property">background</span><span class="token punctuation">:</span> #9eea6a<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.chat-item.right</span> <span class="token punctuation">&#123;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token selector">.chat-pao</span> <span class="token punctuation">&#123;</span>      <span class="token property">margin-left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">margin-right</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>      <span class="token selector">&amp;::before</span> <span class="token punctuation">&#123;</span>        <span class="token property">right</span><span class="token punctuation">:</span> -6px<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.chat-item.left</span> <span class="token punctuation">&#123;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token selector">.chat-pao</span> <span class="token punctuation">&#123;</span>      <span class="token property">margin-left</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>      <span class="token property">margin-right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token selector">&amp;::before</span> <span class="token punctuation">&#123;</span>        <span class="token property">left</span><span class="token punctuation">:</span> -5px<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-135deg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.reply-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 44px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #f5f5f5<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 9999<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web前端扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>whistle</title>
      <link href="/star/2023/072058489.html"/>
      <url>/star/2023/072058489.html</url>
      
        <content type="html"><![CDATA[<!-- ---abbrlink: 58489title: whistletags:  Web前端扩展categories: Web前端扩展auther: 冷杨威data: '2021-04-08 22:27'password: lywcxyabstract: 这里有东西被加密了，需要输入密码查看哦。message: 您好，这里需要密码。wrong_pass_message: 抱歉，这个密码看着不太对，请再试试。wrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。top: 5--- --><h1 id="Whistle"><a href="#Whistle" class="headerlink" title="Whistle"></a>Whistle</h1><p><code>Whistle他是一个基于node.js的网络调试工具</code></p><span id="more"></span><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h4 id="一-安装"><a href="#一-安装" class="headerlink" title="一.安装"></a>一.安装</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript">npm i <span class="token operator">-</span>g whistle   <span class="token comment">//下载whistle</span>npm i <span class="token operator">-</span>g whistle <span class="token operator">&amp;&amp;</span> w2 start <span class="token operator">--</span>init   <span class="token comment">//下载whistle并初始化whistle</span></code></pre><h4 id="二-启动-停止-重启"><a href="#二-启动-停止-重启" class="headerlink" title="二.启动&#x2F;停止&#x2F;重启"></a>二.启动&#x2F;停止&#x2F;重启</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript">w2 start      启动w2 restart    重启w2 stop       停止w2 add        添加规则</code></pre><h4 id="三-手机或电脑配置代理"><a href="#三-手机或电脑配置代理" class="headerlink" title="三.手机或电脑配置代理"></a>三.手机或电脑配置代理</h4><p>网络 &gt; 代理 &gt; 使用服务器代理</p><h4 id="四-安装浏览器插件-Proxy-SwitchyOmega"><a href="#四-安装浏览器插件-Proxy-SwitchyOmega" class="headerlink" title="四.安装浏览器插件 Proxy SwitchyOmega"></a>四.安装浏览器插件 Proxy SwitchyOmega</h4><p><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif</a><br>无法下载可使用链接: <a href="https://pan.baidu.com/s/1f5RH-lo2Xk7fkcpEI4hXpg">https://pan.baidu.com/s/1f5RH-lo2Xk7fkcpEI4hXpg</a> 提取码: yjjq</p><h2 id="二-高级"><a href="#二-高级" class="headerlink" title="二.高级"></a>二.高级</h2><h4 id="1-请求转发-解决数据模拟"><a href="#1-请求转发-解决数据模拟" class="headerlink" title="1.请求转发(解决数据模拟)"></a>1.请求转发(解决数据模拟)</h4><p>将请求的数据替换为本地文件，也就是说，你请求的那个网站，他不会跳转到那个网址，而是会转到你本地的文件中，去读取你的数据<br>就是我们一开始写项目时，后端不能立即把接口写出来，而只是给我们数据结构，因此我们的只能使用mock.js插件去模拟数据，而有了whistle。<br>我们则无需等待数据。自己写点数据，并发送请求</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">后端接口</span><span class="token punctuation">(</span>不是随便写的接口，是后台给我们的<span class="token punctuation">)</span>   本地文件<span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token operator">/</span>getList                     file<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>user<span class="token operator">/</span>Desktop<span class="token operator">/</span>test<span class="token punctuation">.</span>json</code></pre><p>如果浏览器是在访问<code>https://api/getList</code>这个链接，就让他转移到<code>file://user/Desktop/test.json</code>去读取数据</p><h4 id="2-请求转发-解决线下调试线上"><a href="#2-请求转发-解决线下调试线上" class="headerlink" title="2.请求转发(解决线下调试线上)"></a>2.请求转发(解决线下调试线上)</h4><p>这个就是你的项目上线了，但是你的某个文件出现了问题，然而你知道是哪个文件出现了问题，但是你只能操作开发环境的代码，但是你开发环境的代码改好了，线上仍然会有问题，此时，whistle它出现了。</p><pre class="language-none"><code class="language-none">线上某个项目的路径         本地代码路径https:&#x2F;&#x2F;api&#x2F;getList.js   file:&#x2F;&#x2F;user&#x2F;Desktop&#x2F;getList.js</code></pre><p>此时，你就能通过网址访问线上是，你的线上<code>https://api/getList.js</code>这个文件，会接入到本地项目的<code>file://user/Desktop/getList.js</code>文件，你改变本地的这个文件，你线上的文件也会改变。从而达到线下文件调试线上项目环境。通过debugger调试</p><h4 id="3-请求转发-解决跨域"><a href="#3-请求转发-解决跨域" class="headerlink" title="3.请求转发(解决跨域)"></a>3.请求转发(解决跨域)</h4><p>就是我随便请求一个网址，他会自动的帮我们请求到配置的网址</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">我的网址                    后端提供的接口<span class="token literal-property property">http</span><span class="token operator">:</span>localhost<span class="token operator">:</span><span class="token number">8000</span><span class="token operator">/</span>list   https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>hhh<span class="token operator">/</span>list</code></pre><p>本地是不是<code>localhost:8000</code>？我访问<code>http:localhost:8000/list</code> 是不是不会跨域，而我再配置，让访问<code>http:localhost:8000/list </code>时，自动访问<code>https://hhh/list</code>，是不是就不会有跨越问题了</p><h4 id="4-注入html，css，js"><a href="#4-注入html，css，js" class="headerlink" title="4.注入html，css，js"></a>4.注入html，css，js</h4><p>注入css，在Rules配置中配置</p><pre class="language-none"><code class="language-none">百度网址        本地css文件www.baidu.com  css:&#x2F;&#x2F;user&#x2F;list.css</code></pre><p>将本地文件注入进去，从而改变百度文字颜色</p><p>注入js，在Values配置中配置<br>1.创建两个Values，第一个存储js源码，第二个则是实例化</p><p>2.在Rules配置</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">你需要引入的网址    引入的js文件www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com      jsPrepend<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">&#123;</span>第一个存储源码的名字<span class="token punctuation">&#125;</span>  <span class="token comment">//引入源码</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com      jsPrepend<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">&#123;</span>第二个存储源码的名字<span class="token punctuation">&#125;</span>  <span class="token comment">//引入实例</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com      log<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>                            <span class="token comment">//在whistle中也打印log</span></code></pre><p>注意：插件vConsole</p><h4 id="5-使用log功能打印日志"><a href="#5-使用log功能打印日志" class="headerlink" title="5.使用log功能打印日志"></a>5.使用log功能打印日志</h4><p>移动端无法使用浏览器调试台，whistle解决了这个问题</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">指定对应的网址www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com      log<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>                            <span class="token comment">//在whistle中也打印log</span></code></pre><h4 id="6-解决跨域"><a href="#6-解决跨域" class="headerlink" title="6.解决跨域"></a>6.解决跨域</h4><p>方法1：</p><pre class="language-none"><code class="language-none">需要跨域的网址    解决跨域的属性http:&#x2F;&#x2F;user&#x2F;list resCors:&#x2F;&#x2F;*</code></pre><p>方法2：</p><pre class="language-none"><code class="language-none">自己的ip与端口                需要跨域的网址http:&#x2F;&#x2F;localhost:8080&#x2F;list   http:&#x2F;&#x2F;user&#x2F;list</code></pre><p>注意：<br>1.图片跨域devserver无法解决<br>2.devserver解决跨域，并且改配置文件，需要重新启动<br>3.如果需求切换用户，则需要修改cookie然后重新启动webpack，等待时间长<br>4.如果将代理由开发环境切为线上环境（如定位线上bug），又需要改proxy，还要修改cookie<br>5.当在微前端场景跳转时页面会白，如ke.qq.com对应项目A，ke.qq.com&#x2F;course&#x2F; 对应项目B,此时跳转后，本地没有启动B项目，页面会空白</p><p><code>ignore//*</code> 是一种规则配置，用于忽略特定的请求或响应。</p><p>1.设置静态文件转发, heimahr.itheima.net localhost:9528 ，检查项目是否转发成功<br>2.去掉项目代理，即webpack的proxy<br>3.设置接口忽略规则 heimahr.itheima.net&#x2F;api&#x2F; ignore:&#x2F;&#x2F;*<br>4.发现图片无法显示，设置图片显示规则<br>5.热更新失效，给devserver加disableHostCheck: true<br>6.填写readme</p><p>队友如何使用？</p><p>1.创建一个配置项级别文件     .whistle.js</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'xx开发环境'</span><span class="token keyword">export</span><span class="token punctuation">.</span>rules <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">后端接口地址   本地端口地址后端接口地址/api  ignore://*   忽略掉后缀为api的路径，因为本地没有api路径</span><span class="token template-punctuation string">`</span></span></code></pre><p>2.w2 add</p>]]></content>
      
      
      <categories>
          
          <category> Web前端扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vsCode代码片段配置</title>
      <link href="/star/2023/0720374.html"/>
      <url>/star/2023/0720374.html</url>
      
        <content type="html"><![CDATA[<h2 id="vsCode代码片段配置"><a href="#vsCode代码片段配置" class="headerlink" title="vsCode代码片段配置"></a>vsCode代码片段配置</h2><p><code>本篇主要是用于提高代码编写速度对vsCode代码片段配置的总结</code></p><span id="more"></span><p><strong>vsCode代码片段配置本质上就是JSON文件的配置</strong></p><p>“Print to console”代码片段名称<br>“scope”代码作用范围<br>“prefix”代码片段的总名称<br>“body”具体代码片段内容<br>“description” 代码描述</p><p>情况1：如果只有一行代码，这里面每一行需要用” “包裹</p><pre class="language-json" data-language="json"><code class="language-json">例如：<span class="token string">"第一行"</span></code></pre><p>情况2：如果有多行代码，想要换行，需要换行的话，每一行代码需要用逗号隔开</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token string">"第一行"</span><span class="token punctuation">,</span><span class="token string">"第二行"</span><span class="token punctuation">,</span><span class="token string">"第三行"</span></code></pre><p>情况3：默认是<a href="https://so.csdn.net/so/search?q=%E5%B7%A6%E5%AF%B9%E9%BD%90&spm=1001.2101.3001.7020">左对齐</a>。每一行是已经被逗号隔开了，但是这个代码块会向左对齐，但是我们平常代码块都不会都想做对齐，而是呈现嵌套状，因此可以在每行代码块内打空格，来防止左对齐</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token string">"第一行"</span><span class="token punctuation">,</span><span class="token string">"     第二行"</span><span class="token punctuation">,</span>"     第三行“</code></pre><p>情况4：光标前往指定位置，$1 $2等等,  代码快捷生成后，会定在$1的位置，按tab键会定在$2的位置</p><p>参考代码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"js-jc1"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//代码片段总称</span><span class="token string-property property">"scope"</span><span class="token operator">:</span> <span class="token string">"javascript,typescript,vue"</span><span class="token punctuation">,</span>  <span class="token comment">//使用范围</span>    <span class="token comment">//代码片段简称 即在js中输入一个f，就会自动生成for循环</span><span class="token string-property property">"prefix"</span><span class="token operator">:</span> <span class="token string">"f"</span><span class="token punctuation">,</span>     <span class="token string-property property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"for(let i = 1;i &lt; ;i++) &#123;"</span><span class="token punctuation">,</span>         <span class="token comment">//代码由引号包裹，换行由逗号隔开</span>                 <span class="token string">" "</span><span class="token punctuation">,</span>                     <span class="token string">"&#125;"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">"for循环"</span>   <span class="token comment">//描述</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 因此，打出ve，那么代码片段则会自动生成</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vsCode代码片段配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作用域&amp;箭头函数&amp;解构</title>
      <link href="/star/2023/072037.html"/>
      <url>/star/2023/072037.html</url>
      
        <content type="html"><![CDATA[<h2 id="作用域-箭头函数-解构"><a href="#作用域-箭头函数-解构" class="headerlink" title="作用域&amp;箭头函数&amp;解构"></a>作用域&amp;箭头函数&amp;解构</h2><p><code>这篇总结主要讲解了作用域&amp;箭头函数&amp;解构的使用</code></p><span id="more"></span><h3 id="1-作用域"><a href="#1-作用域" class="headerlink" title="1.作用域"></a>1.作用域</h3><h4 id="局部作用域：分为函数作用域与块级作用域"><a href="#局部作用域：分为函数作用域与块级作用域" class="headerlink" title="局部作用域：分为函数作用域与块级作用域"></a>局部作用域：分为函数作用域与块级作用域</h4><p><code>函数作用域</code>：函数内部的代码块称为函数作用域<br><strong>注意：</strong></p><pre class="language-none"><code class="language-none">1.函数内部声明的变量，在函数外部无法被访问2.函数的形参也是函数内部的局部变量3.不同函数内部声明的变量无法相互访问4.函数执行完毕后,函数内部的变量实际被清空了</code></pre><p><code>块作用域</code>：被{  }包裹的代码块称为块作用域   if语句   for语句 部分有大括号的函数<br><strong>注意：</strong></p><pre class="language-none"><code class="language-none">1.let声明的变量会生成块作用域，var则不会2.const声明的常量也会产生块级作用域3.不同代码块之间的变量无法相互访问4.推荐使用const或let</code></pre><h4 id="全局作用域：标签内部-js文件"><a href="#全局作用域：标签内部-js文件" class="headerlink" title="全局作用域：&lt;script&gt;标签内部.js文件"></a>全局作用域：<code>&lt;script&gt;标签内部</code>.js文件</h4><p><strong>注意：</strong>尽可能少的声明全局变量，防止全局变量污染</p><h3 id="2-作用域链"><a href="#2-作用域链" class="headerlink" title="2.作用域链"></a>2.作用域链</h3><p>是什么？<code>本质是底层的变量查找机制</code><br>在函数被执行时，会优先查找当前作用域中的变量，如果没找到，则依次向上查找<br>注意：</p><pre class="language-none"><code class="language-none">1.嵌套关系的作用域串联起来形成了作用域链2.相同作用域中按照从小到大的规则查找变量3.子作用域能够访问父作用域，而父不可访问子</code></pre><h3 id="3-js垃圾回收机制：简称GC"><a href="#3-js垃圾回收机制：简称GC" class="headerlink" title="3.js垃圾回收机制：简称GC"></a>3.js垃圾回收机制：简称GC</h3><p><strong>内存的生命周期：</strong><br><code>内存分配：当我们声明变量，函数，对象时，系统会自动为他们分配内存</code><br><code>内存使用：即读写内存，也就是使用变量，函数</code><br><code>内存回收：使用完毕后，由垃圾回收器自动回收不再使用的内存</code><br><strong>说明：</strong><br><code>1.全局变量一般不会被回收（关闭页面，则被回收）</code><br><code>2.一般情况下，局部变量的值，不用了，会被回收</code></p><p><strong>内存泄漏</strong>：程序中分配的内存由于某种原因程序未释放或无法释放叫做内存泄漏</p><h3 id="4-变量提升（预解析）"><a href="#4-变量提升（预解析）" class="headerlink" title="4.变量提升（预解析）"></a>4.变量提升（预解析）</h3><pre class="language-none"><code class="language-none">1.仅仅存在于var声明的变量2.只提升到当前作用域的最前面3.只提升声明，不提升变量</code></pre><h2 id="二-函数进阶-箭头函数"><a href="#二-函数进阶-箭头函数" class="headerlink" title="二.函数进阶(箭头函数)"></a>二.函数进阶(箭头函数)</h2><h3 id="1-函数提升"><a href="#1-函数提升" class="headerlink" title="1.函数提升"></a>1.函数提升</h3><p>1.<code>会把所有函数声明提升到当前作用域的最前面</code><br><code>2.只提升函数声明，不提升函数调用</code><br><code>注意：函数表达式不存在函数提升</code></p><h3 id="2-函数参数"><a href="#2-函数参数" class="headerlink" title="2.函数参数"></a>2.函数参数</h3><h4 id="动态参数：arguments"><a href="#动态参数：arguments" class="headerlink" title="动态参数：arguments"></a>动态参数：arguments</h4><pre class="language-none"><code class="language-none">1.返回的是一个伪数组2.只存在于函数当中3.作用是动态获取函数的实参4.利用for循环依次得到传递过来的实参</code></pre><h4 id="剩余参数-推荐使用-ES6新增"><a href="#剩余参数-推荐使用-ES6新增" class="headerlink" title="剩余参数(推荐使用,ES6新增)"></a>剩余参数(推荐使用,ES6新增)</h4><p><code>语法： ...  例如：...arr</code><br><code>返回的是一个真数组</code><br><code>只存在于函数当中</code><br><code>...是语法符号，置于最末函数形参之前，用于获取多余参数</code></p><pre class="language-none"><code class="language-none">function fun(a,b,...arr) &#123;&#125;fun(1,2,3,4,5)实参1给了形参a实参2给了形参b实参3，4，5则都给了...arr</code></pre><h4 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h4><p><code>语法： ...  例如：...arr</code></p><pre class="language-none"><code class="language-none">1.不会修改原数组2.运用场景  求数组最大值&#x2F;最小值   合并数组等3.只存在于数组4.返回的不是一个数组</code></pre><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p><code>语法：()=&gt;&#123;&#125;</code><br>1.<code>只有一个形参时可以省略小括号</code>：x &#x3D;&gt;{}<br><code>2.只有一行代码时，可以省略大括号，并且无需写return</code>：x &#x3D;&gt; x<br><code>3.箭头函数可以返回一个对象</code><br><code>4.加括号的函数体返回的是一个对象字面量的表达式</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">uname</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span>uname<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">)</span></code></pre><p><strong>使用场景</strong>：替代需要匿名函数的地方，用于函数表达式</p><p><strong>箭头函数参数</strong><br><code>1.没有arguments动态参数</code><br><code>2.有剩余参数  ...arr</code></p><p><strong>箭头函数this</strong></p><pre class="language-none"><code class="language-none">1.箭头函数不绑定this关键字，箭头函数中的this，指向的是上一层作用域的this执向2.箭头函数适合与this无关的回调，定时器，数组方法的回调3.箭头函数不适合与this有关的回调，构造函数，事件回调，对象的方法4.箭头函数不能作为构造函数，因为构造函数的new关键字会改变this指向，而箭头函数没有自己的this，则改变不了this的指向</code></pre><h2 id="三-解构赋值"><a href="#三-解构赋值" class="headerlink" title="三.解构赋值"></a>三.解构赋值</h2><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><p>是什么？将数组的单元值快速批量的去赋值给一系列的变量的简洁语法<br>1.let [a,b,c] &#x3D; [1,2,3]<br>2.在这个数组里面，a,b,c与1,2,3一一对应      d则返回undefined<br>let [a,b,c,d] &#x3D; [1,2,3]<br>3.变量少，单元值多，则只返回应有的变量，多的单元值则不返回<br>剩余参数解决  const [a,b,…c] &#x3D; [1,2,3,4]<br>4.防止有undefined传递单元值，可以设置默认值<br>const [a &#x3D; 1,b&#x3D;2] &#x3D; [1]<br>5.按需导入赋值<br>const [a,b,  ,d] &#x3D; [1,2,3,4]<br>返回1,2,4<br>6.多维数组解构<br>const [a,b,[c,d]] &#x3D; [1,2,[3,4]]<br><strong>交换2个变量</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">(</span>这里必须打分号<span class="token punctuation">)</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token punctuation">]</span></code></pre><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>1.语法：const {uname,age} &#x3D; {uname:’pink’,age:’18’}</p><p><strong>注意</strong><br>变量名与属性名必须相同<br>解构的变量名不能和外面的变量名冲突<br>对象中找不到与解构赋值的变量名相同的属性名，则会返回undefined<br>2.<strong>改变对象解构的变量名</strong><br>const {uname：username,age} &#x3D; {uname:’pink’,age:’18’}<br>3.<strong>解构数组对象</strong><br>const [{uname,age}] &#x3D; [{uname:’pink’,age:6}]<br>4.<strong>多级对象解构</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span><span class="token literal-property property">family</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>m<span class="token punctuation">,</span>f<span class="token punctuation">,</span>s<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>age<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>           <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'pink'</span><span class="token punctuation">,</span>           <span class="token literal-property property">family</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                      <span class="token literal-property property">m</span><span class="token operator">:</span><span class="token string">'妈妈'</span><span class="token punctuation">,</span>                      <span class="token literal-property property">f</span><span class="token operator">:</span><span class="token string">'爸爸'</span><span class="token punctuation">,</span>                      <span class="token literal-property property">s</span><span class="token operator">:</span><span class="token string">'妹妹'</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>           <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">&#125;</span></code></pre><p>5.<strong>数组多级对象解构</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span><span class="token literal-property property">family</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>m<span class="token punctuation">,</span>f<span class="token punctuation">,</span>s<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>age<span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>           <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'pink'</span><span class="token punctuation">,</span>           <span class="token literal-property property">family</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                      <span class="token literal-property property">m</span><span class="token operator">:</span><span class="token string">'妈妈'</span><span class="token punctuation">,</span>                      <span class="token literal-property property">f</span><span class="token operator">:</span><span class="token string">'爸爸'</span><span class="token punctuation">,</span>                      <span class="token literal-property property">s</span><span class="token operator">:</span><span class="token string">'妹妹'</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>           <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre><h3 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>age<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>         <span class="token punctuation">&#125;</span>         <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>1.当函数的“参数是对象类型”的时候，就可以对参数进行解构。一般会封装发送ajax请求的函数，ajax参数一般是对象类型函数参数解构实际开发中有什么好处?<br>2 .登录函数: 参数是用户名和密码<br><strong>参数是对象obj的弊端</strong> :<br>     a.阅读性不高 : 阅读性不高，不知道这个接口参数到底是什么?b.会增加参数误传的风险(2)使用</p><p><strong>解构赋值接收参数</strong><br>1.阅读性高 :一看形参就知道你传的是是什么<br>2.避免参数误传导致bug</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于a标签的禁用</title>
      <link href="/star/2023/07203244.html"/>
      <url>/star/2023/07203244.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于a标签的禁用"><a href="#关于a标签的禁用" class="headerlink" title="关于a标签的禁用"></a>关于a标签的禁用</h1><p><code>这篇总结主要讲解了a标签的禁用应该如何实现？</code></p><span id="more"></span><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*1.点击验证码     5秒倒计时：  05秒后获取验证码    细节：上一个倒计时没有结束之前，按钮不能点击*/</span><span class="token comment">//获取验证按钮</span><span class="token keyword">let</span> yz <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.code'</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token comment">//设置点击事件</span>yz<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//方法2                           </span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  yz<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'ing'</span><span class="token punctuation">)</span>  yz<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">获取验证码(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>  <span class="token comment">//开启定时器</span>  <span class="token keyword">let</span> stop <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// yz.style.pointerEvents = 'none' 方法1</span>    yz<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'ing'</span><span class="token punctuation">)</span>    i<span class="token operator">--</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    yz<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">获取验证码(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span>    <span class="token comment">//关闭定时器</span>      yz<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'ing'</span><span class="token punctuation">)</span>        yz<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">发送验证码</span><span class="token template-punctuation string">`</span></span>      <span class="token comment">// yz.style.pointerEvents = 'all' 方法1</span>      i <span class="token operator">=</span> <span class="token number">5</span>                         <span class="token comment">//方法2</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/*a标签禁用：方法1：给a标签添加pointer-events:'none'恢复点击则是pointer-events:'all'*/</span></code></pre><p><strong>disable只能用于表单元素，因此对a标签是不会生效</strong></p><p><strong>a标签禁用：</strong><br>    给a标签添加pointer-events:’none’<br>    恢复点击则是pointer-events:’all’</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于值比较</title>
      <link href="/star/2023/072048.html"/>
      <url>/star/2023/072048.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于值比较"><a href="#关于值比较" class="headerlink" title="关于值比较"></a>关于值比较</h2><p><code>这篇总结主要扩展一下值的比较，因为很多笔试都会有这种</code></p><span id="more"></span><p>1.引用类型不比较值，只会比较地址</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token boolean">false</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>   <span class="token boolean">false</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token boolean">true</span></code></pre><p>2.false &#x3D;&#x3D; 0 输出true；因为在做判断的时候，两者中有boolean（布尔类型），会把boolean先转化为number（数字类型），false为0，true是1。也就是等价于判断 0 &#x3D;&#x3D; 0 ，结果为true。</p><p>3.‘ ’ &#x3D;&#x3D;  false 输出为true；js中空字符串与0相等，也就意味着空字符串等等于false。</p><p>4.‘0’ &#x3D;&#x3D; false 正确输出为true；这里犯了一个错误认为结果会是false，我想的是空字符串等于false，非空字符串等于true，true和false肯定是不等的啊！但是，可但是…….忽略了一个js规则：string（字符串类型）和number作比较的时候，string会先转化成number。此时字符串0转化为了数字0，即： 0 &#x3D;&#x3D; 0；结果应该为true。</p><p>5.Boolean（‘0’） 正确输出为true；string转化成Boolean类型，空字符串为false，别的字符串全是true。</p><p>总结：<br>1.两者做判断时，若有布尔类型，会先把boolean转换成number，即0 (false) 和 1 (true)；<br>2.字符串string直接转换成Boolean类型时，除了空字符串为false外，其余都是true；<br>3.字符串string和number类型做比较的时候，string会转化成number。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Router</title>
      <link href="/star/2023/072058.html"/>
      <url>/star/2023/072058.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue-Router路由"><a href="#Vue-Router路由" class="headerlink" title="Vue-Router路由"></a>Vue-Router路由</h3><p><code>这篇总结主要介绍Vue-Router</code></p><span id="more"></span><h4 id="1-路由概念"><a href="#1-路由概念" class="headerlink" title="1.路由概念"></a>1.路由概念</h4><p>路径(hash值) 与 页面 一一对应关系<br><strong>原理：</strong> 监听网页hash值</p><h4 id="2-路由作用-场景-："><a href="#2-路由作用-场景-：" class="headerlink" title="2.路由作用&#x2F;场景 ："></a>2.路由作用&#x2F;场景 ：</h4><p>单页面应用： <code>SPA（singal page application）</code><br>            （1）加载快：局部刷新<br>            （2）数据传输方便</p><h4 id="3-路由配置"><a href="#3-路由配置" class="headerlink" title="3.路由配置"></a>3.路由配置</h4><p>自动生成路由配置：vue add router</p><pre class="language-none"><code class="language-none">0.导入vue-router    import VueRouter from &#39;vue-router&#39;    Vue.use(VueRouter)1.导入 页面组件import 组件名 from &#39;组件路径&#39;2.配置 路由规则(地址和页面一一对应)const routes &#x3D; [              &#123; path: &#39;&#x2F;路径&#39; , component : 组件名  &#125;          ]3.创建 路由对象4.挂载 App根组件5.路由 出口6.路由 导航</code></pre><h4 id="4-路由模式"><a href="#4-路由模式" class="headerlink" title="4.路由模式"></a>4.路由模式</h4><p>​hash模式：路径有#号， 不会给服务器发请求<br>​history模式: 路径没有#号， 会给服务器发请求。需要服务器单独配置</p><h4 id="5-重定向"><a href="#5-重定向" class="headerlink" title="5.重定向"></a>5.重定向</h4><p>把 路径a 变成 路径b<br>在配置路由规则中，<code>&#123;path:&#39; / &#39;,redirect:&#39;/路径&#39;&#125;</code><br>重定向只是修改路径，不会路由匹配</p><h4 id="6-路由导航-跳转-传参（A页面-B页面）"><a href="#6-路由导航-跳转-传参（A页面-B页面）" class="headerlink" title="6.路由导航(跳转)传参（A页面-&gt;B页面）"></a>6.路由导航(跳转)传参（A页面-&gt;B页面）</h4><h5 id="声明式导航-a标签"><a href="#声明式导航-a标签" class="headerlink" title="声明式导航(a标签)"></a>声明式导航(a标签)</h5><p><strong>query参数</strong><br>            A页面传 ：<code> url?参数名=参数值</code><br>            B页面收:<code>  $route.query.参数名</code>  </p><p><strong>params参数</strong><br>路由规则中配置：参数名</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/路径/:参数名1/:参数名2'</span> <span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span>组件名<span class="token punctuation">&#125;</span></code></pre><p>​          A页面传 ：<code> url/参数值</code><br>​          B页面收:  <code>$router.params.参数名</code></p><h5 id="编程式导航-push方法"><a href="#编程式导航-push方法" class="headerlink" title="编程式导航(push方法)"></a>编程式导航(push方法)</h5><p><strong>query参数</strong><br>特点： (1)参数会在地址栏显示  (2)页面刷新之后还在</p><p>A页面传 </p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/路径'</span><span class="token punctuation">,</span>    <span class="token literal-property property">query</span><span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">参数名</span><span class="token operator">:</span>参数值  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>B页面收:  <code> $route.query.参数名</code></p><p><strong>params参数</strong><br>特点：需要在路由文件中配置路由名(内存传参，刷新就会消失)</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/路径名'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'路由名'</span> <span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span>组件名 <span class="token punctuation">&#125;</span></code></pre><p>A页面传 ： </p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'路由名'</span><span class="token punctuation">,</span>    <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">参数名</span><span class="token operator">:</span>参数值  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>B页面收:  <code> $route.params</code>.参数名</p><h4 id="7-二级路由"><a href="#7-二级路由" class="headerlink" title="7.二级路由"></a>7.二级路由</h4><p>1.在router&#x2F;index.js中配置二级路由规则</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/路径'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span>组件<span class="token punctuation">,</span> <span class="token literal-property property">children</span> <span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 二级路由配置</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span></code></pre><p>2.给页面添加二级路由出口</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span></code></pre><h4 id="8-路由导航守卫"><a href="#8-路由导航守卫" class="headerlink" title="8.路由导航守卫"></a>8.路由导航守卫</h4><h5 id="全局前置路由守卫"><a href="#全局前置路由守卫" class="headerlink" title="全局前置路由守卫"></a>全局前置路由守卫</h5><p><code>beforeEach</code></p><p><strong>何时被调用？</strong><br>1.初始化时被调用<br>2.每次路由被切换之前被调用</p><p><strong>语法：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>         执行代码         <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//同意放行   不写这个调用则是不放行</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//to：去哪里？   meta，程序员自定义配置的属性</span><span class="token comment">//from:从哪来？</span><span class="token comment">//next:是否放行</span></code></pre><h5 id="全局后置路由守卫"><a href="#全局后置路由守卫" class="headerlink" title="全局后置路由守卫"></a>全局后置路由守卫</h5><p><code>afterEach</code></p><p><strong>何时被调用？</strong><br>1.初始化时被调用<br>2.每次路由被切换之后被调用</p><p><strong>语法：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>         执行代码         <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//to：去哪里？   meta，程序员自定义配置的属性</span><span class="token comment">//from:从哪来？</span><span class="token comment">//next:是否放行</span></code></pre><h5 id="独享路由守卫-写在路由配置信息中，与path-component-meta同级"><a href="#独享路由守卫-写在路由配置信息中，与path-component-meta同级" class="headerlink" title="独享路由守卫(写在路由配置信息中，与path,component,meta同级)"></a>独享路由守卫(写在路由配置信息中，与path,component,meta同级)</h5><p><code>beforeEnter</code><br><strong>语法：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">beforeEnter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>         执行代码       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><code>只有前置，没有后置</code><br><code>由于他没有后置路由守卫，那么它可以配合全局的后置路由守卫一起使用</code></p><h5 id="组件内路由守卫"><a href="#组件内路由守卫" class="headerlink" title="组件内路由守卫"></a>组件内路由守卫</h5><p>顾名思义：是写在组件之中的<br><code>beforeRouteEnter</code><br>通过路由规则，进入该组件时被调用</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>         执行代码  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><code>beforeRouteLeave</code><br>通过路由规则，离开该组件时被调用</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>         执行代码<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><strong>路由导航守卫作用：</strong><br>示例1： 有的页面需要登录才能进入， 有的页面不需要。 可以通过导航守卫进行拦截，如果是需要登录权限的。就可以判断用户是否登录。 如果登录了，就正常跳转。 没登录，就主动跳转到登录页。<br>示例2：有的会员页面，需要开通会员才能进入。  可以通过导航守卫进行拦截，当用户想要跳转会员页面的时候，可以判断用户是否已经是会员。 如果是，就正常跳转。 如果不是，就跳转到开通会员页面</p><h4 id="混淆单词"><a href="#混淆单词" class="headerlink" title="混淆单词"></a>混淆单词</h4><p>routes    路由规则 数组<br>router    路由实例对象<br>$route    路由信息（获取参数）<br>$router   路由实例对象( 页面跳转)</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue指令</title>
      <link href="/star/2023/07204488.html"/>
      <url>/star/2023/07204488.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue常用指令"><a href="#Vue常用指令" class="headerlink" title="Vue常用指令"></a>Vue常用指令</h3><p><code>这篇总结主要介绍Vue指令</code></p><span id="more"></span><h4 id="内容渲染指令"><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a>内容渲染指令</h4><p>内容渲染指令用来辅助开发者渲染DOM元素的文本内容</p><h5 id="1-v-text"><a href="#1-v-text" class="headerlink" title="1.v-text"></a>1.<code>v-text</code></h5><p>缺点：会覆盖元素内部原有的内容<br>不会解析标签</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p v<span class="token operator">-</span>text <span class="token operator">=</span> <span class="token string">'name'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>div v<span class="token operator">-</span>text <span class="token operator">=</span> <span class="token string">'sex'</span><span class="token operator">></span>性别<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>        Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'我是大孩'</span><span class="token punctuation">,</span>                <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">'女'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h5 id="2-v-html"><a href="#2-v-html" class="headerlink" title="2.v-html"></a>2.<code>v-html</code></h5><p>会覆盖元素内部原有内容<br>会解析标签</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p v<span class="token operator">-</span>html<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>div v<span class="token operator">-</span>html<span class="token operator">=</span><span class="token string">'sex'</span><span class="token operator">></span>性别<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>        Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;strong>我是大孩&lt;/strong></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">'女'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h5 id="3-插值语法"><a href="#3-插值语法" class="headerlink" title="3.插值语法"></a>3.插值语法</h5><p><code>&#123;&#123;表达式或者数据&#125;&#125;</code><br>不会覆盖元素内部原有内容<br>不会解析标签</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>       <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>       <span class="token operator">&lt;</span>div<span class="token operator">></span>性别<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>sex<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>script<span class="token operator">></span>       Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>       <span class="token keyword">new</span> <span class="token class-name">Vue</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>           <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>           <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>               <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'我是大孩'</span><span class="token punctuation">,</span>               <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">'女'</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="属性绑定指令"><a href="#属性绑定指令" class="headerlink" title="属性绑定指令"></a>属性绑定指令</h4><h5 id="1-v-bind指令"><a href="#1-v-bind指令" class="headerlink" title="1.v-bind指令"></a>1.<code>v-bind</code>指令</h5><p>单向数据绑定<br>语法：<code>v-bind:需要绑定的属性 = &quot;data配置项中的数据名 / 表达式&quot; </code><br>简写：   :需要绑定的属性</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">:</span>placeholder<span class="token operator">=</span><span class="token string">"tips"</span><span class="token operator">></span> <span class="token comment">//简写</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>bind<span class="token operator">:</span>placeholder<span class="token operator">=</span><span class="token string">"tips"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">tips</span><span class="token operator">:</span><span class="token string">'请输入'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="事件绑定指令"><a href="#事件绑定指令" class="headerlink" title="事件绑定指令"></a>事件绑定指令</h4><h5 id="1-需要定义在methods配置对象中"><a href="#1-需要定义在methods配置对象中" class="headerlink" title="1.需要定义在methods配置对象中"></a>1.需要定义在methods配置对象中</h5><h5 id="2-v-on-click-点击事件"><a href="#2-v-on-click-点击事件" class="headerlink" title="2. v-on:click 点击事件"></a>2. v-on:click 点击事件</h5><p><code>v-on:click=&quot;事件处理函数名(实参)&quot;</code><br>简写：<code>@click = &quot;事件处理函数名(实参)&quot;</code><br>可以进行传参</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>值为<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token comment">//传参  实参  事件对象$event</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"add($event,1)"</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token string">"jian"</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token comment">//@符简写</span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">:</span>placeholder<span class="token operator">=</span><span class="token string">"tips"</span> @keydown<span class="token operator">=</span><span class="token string">"ok"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.baidu.com"</span>         target<span class="token operator">=</span><span class="token string">"_blank"</span> @click<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">"tz"</span>        <span class="token operator">></span>百度<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span> <span class="token comment">//  事件修饰符 @click.prevent</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>            <span class="token literal-property property">tips</span><span class="token operator">:</span><span class="token string">'zzz'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//传参 形参</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> ne<span class="token punctuation">.</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token operator">?</span><span class="token string">'red'</span><span class="token operator">:</span><span class="token string">''</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">jian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>tips <span class="token operator">=</span> <span class="token string">'hhh'</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hhh'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h5 id="3-其他事件"><a href="#3-其他事件" class="headerlink" title="3.其他事件"></a>3.其他事件</h5><p><code>v-on:input</code>   输入框事件<br><code>v-on:keydown</code>   键盘事件<br><code>v-on:keyup</code>   键盘事件<br><code>v-on:focus</code>   键盘事件<br>等等<br>同样可以写成简写 <code>@input</code>  <code>@keydown</code>等</p><h5 id="4-事件对象"><a href="#4-事件对象" class="headerlink" title="4.事件对象"></a>4.事件对象</h5><p>实参必须使用 <code>$event</code></p><p>绑定事件时，未加小括号的话会默认有e这个时间对象</p><h5 id="5-事件修饰符"><a href="#5-事件修饰符" class="headerlink" title="5.事件修饰符"></a>5.事件修饰符</h5><p>语法：<code>$click.事件修饰符 = &#39;methods配置对象的方法名&#39;</code></p><p>1.<code>prevent</code>：阻止默认事件，例如网址的跳转<br>2.<code>stop</code>：阻止事件冒泡<br>3.<code>once</code>：事件只触发一次</p><h5 id="6-按键修饰符"><a href="#6-按键修饰符" class="headerlink" title="6.按键修饰符"></a>6.按键修饰符</h5><p>在监听键盘事件时，经常需要判断详细的按键，为案件相关的事件添加案件修饰符<br>例如：<code>@keyup.enter = &#39;methods配置对象的方法名&#39;</code><br><code>@keydown.esc = &#39;methods配置对象的方法名&#39;</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> @keyup<span class="token punctuation">.</span>esc<span class="token operator">=</span><span class="token string">"ku"</span><span class="token operator">></span>   <span class="token comment">//按键修饰符</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>            <span class="token literal-property property">tips</span><span class="token operator">:</span><span class="token string">'zzz'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">ku</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//事件对象</span>                e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="双向数据绑定指令"><a href="#双向数据绑定指令" class="headerlink" title="双向数据绑定指令"></a>双向数据绑定指令</h4><h5 id="1-v-model指令"><a href="#1-v-model指令" class="headerlink" title="1.v-model指令"></a>1.<code>v-model</code>指令</h5><p>双向数据绑定<br>语法：<code>v-model</code><br>只能和表单元素一起使用，例如：<code>input元素，textarea元素，select元素</code></p><h5 id="2-v-model专用修饰符"><a href="#2-v-model专用修饰符" class="headerlink" title="2.v-model专用修饰符"></a>2.<code>v-model</code>专用修饰符</h5><p>语法：<code>v-model.修饰符 = &#39;data配置项中的数据名 / 表达式&#39;</code></p><p><code>lazy</code>：失去焦点再收集数据<br><code>number</code>：输入字符串转为有效的数字<br><code>trim</code>：输入首尾空格过滤</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>姓名：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>user<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token comment">//trim去掉前后空格</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>trim<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>             <span class="token comment">//model中的value值与下面的value进行匹配</span>        <span class="token operator">&lt;</span>select v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"ok"</span><span class="token operator">></span>             <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span>北京<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span>上海<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">></span>广州<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"4"</span><span class="token operator">></span>深圳<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>          <span class="token comment">//number只允许输入数字</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>number<span class="token operator">=</span><span class="token string">"sum1"</span><span class="token operator">></span><span class="token operator">+</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>number<span class="token operator">=</span><span class="token string">"sum2"</span><span class="token operator">>=</span>        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>sum1<span class="token operator">+</span>sum2<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"us"</span><span class="token operator">></span>获取用户名<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>hr<span class="token operator">></span>            <span class="token comment">//lazy，在表单失去焦点后再进行数据更新</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>lazy<span class="token operator">=</span><span class="token string">"okk"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">user</span><span class="token operator">:</span><span class="token string">'hhh'</span><span class="token punctuation">,</span>                <span class="token literal-property property">ok</span><span class="token operator">:</span><span class="token string">'1'</span><span class="token punctuation">,</span>                <span class="token literal-property property">sum1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>                <span class="token literal-property property">sum2</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>               <span class="token literal-property property">okk</span><span class="token operator">:</span><span class="token string">'傻逼'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">us</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h5 id="3-注意点"><a href="#3-注意点" class="headerlink" title="3.注意点"></a>3.注意点</h5><p><code>在与表单元素进行双向数据绑定时，如果type值为text，则v-model则会自动绑定value值</code></p><p><code>如果type值为单选框或则是多选框时，则v-model则自动绑定的是checked值</code></p><h4 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h4><p><code>条件渲染指令用于控制DOM的显示与隐藏</code></p><h5 id="1-v-if"><a href="#1-v-if" class="headerlink" title="1.v-if"></a>1.<code>v-if</code></h5><p>语法：<code>v-if=&#39;判断条件&#39;</code></p><p>原理：每次动态创建或移除元素节点，实现元素的显示与隐藏<br>如果刚进入页面的时候，某些元素默认不需要被展示，而且后期这个元素很可能也不需要被展示出来，此时使用v-if性能更好</p><h5 id="2-v-show"><a href="#2-v-show" class="headerlink" title="2.v-show"></a>2.<code>v-show</code></h5><p>语法：<code>v-show=&#39;判断条件&#39;</code></p><p>原理：动态为元素添加或移除<code>display:none</code>样式，来实现元素的显示与隐藏<br>如果频繁的切换元素的显示状态，用<code>v-show</code>性能会更好</p><h5 id="3-注意"><a href="#3-注意" class="headerlink" title="3.注意"></a>3.注意</h5><p>开发中，绝大多数情况，不用考虑性能问题，直接使用<code>v-if</code>就好了</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"flag"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token comment">//彻底抹除节点</span>        <span class="token operator">&lt;</span>p v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"flag"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token comment">//只是将节点隐藏了</span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"vi"</span><span class="token operator">></span>隐藏元素<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'周江号'</span><span class="token punctuation">,</span>                <span class="token literal-property property">flag</span><span class="token operator">:</span><span class="token boolean">true</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token function">vi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span><span class="token boolean">true</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h5 id="4-v-if配套指令"><a href="#4-v-if配套指令" class="headerlink" title="4.v-if配套指令"></a>4.<code>v-if</code>配套指令</h5><p><code>v-else-if=&#39;判断条件&#39;</code><br><code>v-else    后面不用接判断条件</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>       成绩：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"flags"</span><span class="token operator">></span>       <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"flags==='A'"</span><span class="token operator">></span>优秀<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>       <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"flags==='B'"</span><span class="token operator">></span>良好<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>       <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"flags==='C'"</span><span class="token operator">></span>一般<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>       <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span>差<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>script<span class="token operator">></span>       Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>       <span class="token keyword">new</span> <span class="token class-name">Vue</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>           <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>           <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>               <span class="token literal-property property">flags</span><span class="token operator">:</span><span class="token string">'A'</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h5 id="5-注意"><a href="#5-注意" class="headerlink" title="5.注意"></a>5.注意</h5><p><code>v-if可以和v-else-if，v-else一起使用，但要求结构不能被打断</code></p><pre class="language-none"><code class="language-none">v-if&#x3D;&#39;n&#x3D;&#x3D;&#x3D;1&#39;,&lt;div&gt;@&lt;&#x2F;div&gt;v-else-if &#x3D;&#39;n&#x3D;&#x3D;&#x3D;2&#39;中间插入了一个@符号，结构被打断了，因此，v-else-if不会执行</code></pre><h4 id="列表渲染指令"><a href="#列表渲染指令" class="headerlink" title="列表渲染指令"></a>列表渲染指令</h4><h5 id="1-v-for"><a href="#1-v-for" class="headerlink" title="1.v-for"></a>1.<code>v-for</code></h5><p>用来辅助开发者基于一个数组来循环渲染一个列表结构</p><p>语法：<code>v-for=&#39;数组元素 in 数组&#39;</code><br>数组元素指的是数组每一项<br>数组指的是存储在data配置项中的数组</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ul v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item,index) in arr"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                 <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>subject<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                 <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>score<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#root'</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'古丽扎娜'</span><span class="token punctuation">,</span> <span class="token literal-property property">subject</span><span class="token operator">:</span> <span class="token string">'语文'</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'佟丽丫丫'</span><span class="token punctuation">,</span> <span class="token literal-property property">subject</span><span class="token operator">:</span> <span class="token string">'数学'</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">99</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'马尔扎哈'</span><span class="token punctuation">,</span> <span class="token literal-property property">subject</span><span class="token operator">:</span> <span class="token string">'英语'</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">70</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h5 id="2-key"><a href="#2-key" class="headerlink" title="2.key"></a>2.<code>key</code></h5><p>1.官方建议，只要用到v-for指令，那么一定要绑定一个<code> :key</code> 属性<br>2.<code>key</code>值的类型只能是数字&#x2F;字符串，其他的值是不能当作key值的<br>3.<code>key</code>的值必须是唯一值<br>4.建议把数据项<code>id</code>属性的值作为<code>key</code>值(因为id属性的值具有唯一性)<br>5.使用<code>index</code>值作为key值是没有任何意义的，因为<code>index</code>具有不确定性</p><h5 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3.扩展"></a>3.扩展</h5><p>它不仅仅只能用于数组绑定，还能用于对象，字符串，指定次数</p><p><code>对象：</code><br>语法:<code>v-for=&quot;(value,key) in 对象名&quot;  :key=&quot;key&quot;</code><br><code>value是data数据所配置的对象的属性值</code><br><code>key是data数据所配置的对象的属性名</code></p><p><code>字符串：</code><br>语法:<code>v-for=&quot;(char,index) in 字符串名&quot;  :key=&quot;index&quot;</code></p><p><code>指定次数：</code><br>语法:<code>v-for=&quot;(number,index) in 次数(几次)&quot;  :key=&quot;index&quot;</code></p><h4 id="其他内置指令"><a href="#其他内置指令" class="headerlink" title="其他内置指令"></a>其他内置指令</h4><h5 id="v-cloak指令（没有值）"><a href="#v-cloak指令（没有值）" class="headerlink" title="v-cloak指令（没有值）"></a><code>v-cloak</code>指令（没有值）</h5><p>1.本质是一个特殊属性，vue实例创建完毕并接管容器后，会删掉v-cloak属性<br>2.<code>使用css的[v-cloak]&#123;display:none;&#125;配合v-cloak可以解决网速慢时页面展示出&#123;&#123;xxx&#125;&#125;的问题</code></p><h5 id="v-once指令-（没有值）"><a href="#v-once指令-（没有值）" class="headerlink" title="v-once指令  （没有值）"></a><code>v-once</code>指令  （没有值）</h5><p>1.<code>v-once</code>所在的节点在初次动态渲染后，就视为静态内容了<br>2.以后数据的改变不会引起<code>v-once</code>所在结构的更新，可以用于优化性能</p><h5 id="v-pre指令-（没有值）"><a href="#v-pre指令-（没有值）" class="headerlink" title="v-pre指令     （没有值）"></a><code>v-pre</code>指令     （没有值）</h5><p>1.跳过其所在节点的编译过程<br>2.可利用它跳过：没有使用指令语法，没有使用插值语法的节点，会加快编译</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件插槽&amp;组件补充</title>
      <link href="/star/2023/072057889.html"/>
      <url>/star/2023/072057889.html</url>
      
        <content type="html"><![CDATA[<h3 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h3><p><code>这篇总结主要介绍Vue组件插槽&amp;组件相关的补充</code></p><span id="more"></span><h4 id="1-匿名插槽"><a href="#1-匿名插槽" class="headerlink" title="1.匿名插槽"></a>1.匿名插槽</h4><p><strong>插槽作用</strong> : <code>父组件 传递html结构 给子组件</code><br><strong>插槽语法</strong>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*1.传：父组件&lt;子组件>   html结构   &lt;/子组件>2.收：子组件&lt;slot> 默认结构 &lt;/slot>*/</span></code></pre><h4 id="2-具名插槽"><a href="#2-具名插槽" class="headerlink" title="2.具名插槽"></a>2.具名插槽</h4><p><strong>具名插槽作用</strong>: <code>父组件 传递多个位置html结构 给子组件</code><br><strong>具名插槽语法：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*1.父组件传&lt;子组件>       &lt;template v-slot:插槽名>              html结构      &lt;/template>&lt;/子组件>2.子组件收&lt;slot name="插槽名"> 默认结构 &lt;slot>v-slot指令只能用于 template 标签v-slot:插槽名    简写成   #           */</span></code></pre><h4 id="3-作用域插槽"><a href="#3-作用域插槽" class="headerlink" title="3.作用域插槽"></a>3.作用域插槽</h4><p><strong>作用域插槽作用：</strong> 子组件 传递 数据 给 父组件 的 插槽 使用<br><strong>作用域插槽语法</strong>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*1.传： 子组件&lt;slot 属性名="属性值"> 默认结构 &lt;/slot>2.收 ： 父组件&lt;子组件>       &lt;template v-slot="对象">              html结构      &lt;/template>&lt;/子组件>*/</span></code></pre><h3 id="组件补充"><a href="#组件补充" class="headerlink" title="组件补充"></a>组件补充</h3><h4 id="1-组件使用-v-model"><a href="#1-组件使用-v-model" class="headerlink" title="1.组件使用 v-model"></a>1.组件使用 v-model</h4><p>本质是 语法糖</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*1.父传子 props传递 :value2.子传父 $emit传递 @input*/</span></code></pre><h4 id="2-ref-使用"><a href="#2-ref-使用" class="headerlink" title="2. ref 使用"></a>2. ref 使用</h4><p><strong>作用：</strong><code> 获取 DOM元素 +  子组件实例</code><br><strong>语法：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*(1)声明ref:    &lt;标签 ref="属性名">&lt;/标签>(2)使用ref:   this.$refs.属性名*/</span></code></pre><p><strong>注意点:</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*1.给原生标签使用ref :  获取的是dom对象2.给自定义标签(组件)使用ref:  获取的是vm实例3.应用：在父组件中调用子组件的方法*/</span></code></pre><h4 id="3-nextTick"><a href="#3-nextTick" class="headerlink" title="3.nextTick"></a>3.<code>nextTick</code></h4><p><strong>作用</strong> ： <code>等待当前队列DOM异步更新之后执行</code><br><strong>原因：</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*vue更新视图的过程是异步的：底层是promise微任务因此开发中就会遇到已经修改了数据，但是视图没更新$nextTick:等待当前队列更新完视图之后执行*/</span></code></pre><p>语法：<br><code>this.$nextTick( ()=&gt;&#123;  //代码  &#125; )</code><br><code>await this.$nextTick</code></p><h4 id="4-动态组件"><a href="#4-动态组件" class="headerlink" title="4.动态组件"></a>4.动态组件</h4><p>作用： 多个组件 使用同一个挂载点<br>语法： <code>&lt;component :is=&quot;组件名&quot;&gt;&lt;/component&gt;</code><br>示例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>component <span class="token operator">:</span>is<span class="token operator">=</span><span class="token string">"uname"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">></span>   <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"getUser"</span><span class="token operator">></span>点我切换<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> MyUser <span class="token keyword">from</span> <span class="token string">'@/components/MyUser.vue'</span><span class="token keyword">import</span> MyLogin <span class="token keyword">from</span> <span class="token string">'@/components/MyLogin.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>MyUser<span class="token punctuation">,</span>MyLogin<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">uname</span><span class="token operator">:</span><span class="token string">'MyLogin'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">===</span> <span class="token string">'MyUser'</span><span class="token operator">?</span><span class="token string">'MyLogin'</span><span class="token operator">:</span><span class="token string">'MyUser'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue生命周期</title>
      <link href="/star/2023/072054.html"/>
      <url>/star/2023/072054.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h3><p><code>这篇总结主要介绍Vue生命周期</code></p><span id="more"></span><p><strong>简介</strong><br>1.又名：生命周期回调函数，生命周期函数，生命周期钩子<br>2.是什么？ Vue在关键时刻帮我们调用的一些特殊名称的函数<br>3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的<br>4.生命周期函数中的this指向vm  或  组件实例对象<br>每个生命钩子都与data配置项同级</p><p><strong>1.初始化阶段</strong><br><code>beforeCreate</code>     完成<code>vue</code>初始化，没有创建data<br><code>created</code>                完成data创建，没有创建挂载点<br>常用：最早操作data，一般用于发送ajax请求<br><strong>2.挂载阶段</strong><br><code>beforeMount</code>        创建挂载点，没有把data渲染到挂载点<br><code>mounted</code>                完成初始渲染，把data数据渲染到了挂载点上<br>常用： 最早操作<code>dom</code>元素，一般用于<code>dom</code>操作<br><strong>3.更新阶段</strong><br><code>beforeUpdate</code>      <code>data</code>数据发生变化，页面没有刷新<br><code>updated</code>                 将变化后的数据更新到视图<br><strong>4.销毁阶段</strong><br><code>beforeDestroy</code>      <code>vue</code>实例完成销毁前<br><strong>触发销毁条件:</strong><br>                <code>1.对组件使用v-if</code><br>                <code>2.调用vm.$destroy()</code><br>应用场景： 清除<code>setInterval</code>定时器<br><code>destroyed</code>           <code>vue</code>完成销毁   <code>GG</code></p><p><strong>keep-alive的两个钩子（路由独有）</strong><br>activated      被激活的<br>deactivated   失活的</p><p><strong>nextTick钩子</strong></p><p><strong><code>vue</code>初始渲染会走哪些钩子</strong>： <code> </code> <code>beforeCreate </code> <code>created</code> <code>beforeMount</code>   <code>mounted</code>                              </p><p><strong>你常用过哪些钩子</strong><br><code>created : 发送ajax</code><br><code>mounted : 操作dom</code><br><code>beforeDestroy : 清除永久定时器</code></p><p><strong>父子组件生命周期 :  父子子父</strong><br>初始渲染阶段： 父子子父<br>更新阶段： 父子子父<br>销毁阶段：父子子父</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件传值</title>
      <link href="/star/2023/072057.html"/>
      <url>/star/2023/072057.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue组件传值"><a href="#Vue组件传值" class="headerlink" title="Vue组件传值"></a>Vue组件传值</h3><p><code>这篇总结主要介绍Vue组件传值</code></p><span id="more"></span><h4 id="1-父传子-Props"><a href="#1-父传子-Props" class="headerlink" title="1.父传子      Props"></a>1.父传子      Props</h4><p><strong>语法</strong>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*(1)传：父传&lt;子组件 :属性名="属性值" >&lt;/子组件>(2)收：子收props : &#123;  属性名: 数据类型 &#125;*/</span></code></pre><p><strong>单向数据流</strong><br>概念：<code> 父组件传递给子组件的数据，子组件只能使用，不能修改</code><br>原理： <code>值类型赋值的时候拷贝的是数据，如果修改拷贝后的数据，对原数据没有影响，就会导致组件数据不统一。 如果是引用类型，由于拷贝的是地址，修改拷贝后的数据会影响原数据。</code></p><h4 id="2-子传父-自定义事件配合-emit"><a href="#2-子传父-自定义事件配合-emit" class="headerlink" title="2.子传父    自定义事件配合$emit"></a>2.子传父    自定义事件配合$emit</h4><p>1.语法</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*1.传: 子传this.$emit( '自定义事件名' , 事件对象 )2.收： 父收&lt;子组件 @自定义事件="事件方法">&lt;/子组件>*/</span></code></pre><h4 id="3-Vuex"><a href="#3-Vuex" class="headerlink" title="3.Vuex "></a>3.<code>Vuex </code></h4><p>是什么？一种用于状态管理的官方库</p><p><strong>场景：</strong>1.非父子关系组件传值，2.数据在多个组件中使用</p><p><strong><code>vuex</code>特点</strong><br>a. 响应式 ：  <code> vuex</code>数据变化了，视图会自动更新<br>b. 所有组件共享数据</p><h5 id="vuex语法"><a href="#vuex语法" class="headerlink" title="vuex语法"></a>vuex语法</h5><p><code>state</code><br>作用：负责存储数据<br>语法:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// vuex中</span><span class="token literal-property property">state</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">属性名</span><span class="token operator">:</span>属性值 <span class="token punctuation">&#125;</span><span class="token comment">// 组件中</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>属性名</code></pre><p><code>getters</code><br>作用： 相当于state计算属性<br>语法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// vuex中</span><span class="token literal-property property">getters</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">属性名</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> 属性值   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token comment">//组件中</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>属性名</code></pre><p><code>mutations</code><br>作用：修改state数据，mutations是修改state数据的唯一方式<br>语法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//vuex中</span><span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>     <span class="token function">mutation名</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>payload</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           state<span class="token punctuation">.</span>属性名 <span class="token operator">=</span> payload     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 组件中</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'mutation名'</span> <span class="token punctuation">,</span> payload <span class="token punctuation">)</span></code></pre><p><code>actions</code><br>作用：异步操作更新state<br>语法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//(1)组件 提交dispatch更新actions</span><span class="token comment">//(2)actions：异步操作</span><span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>     <span class="token function">action名</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>payload</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           异步操作           context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'mutation名'</span> <span class="token punctuation">,</span> 异步操作结果<span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//(3)获取异步操作结果，提交mutations更新</span><span class="token comment">//(4)mutations : 同步更新state数据</span></code></pre><p><code>modules</code><br>作用：<code>模块化组织，让vuex中一个模块的数据提取封装在其他js文件中，同时也减少了命名冲突</code></p><p>语法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.把相关代码封装到另一个文件</span><span class="token comment">//2.开启命名空间namespaced:true</span><span class="token comment">//3.在真正的vuex中的modules写入该模块</span></code></pre><h5 id="vuex原始语法-与-辅助函数语法"><a href="#vuex原始语法-与-辅助函数语法" class="headerlink" title="vuex原始语法 与  辅助函数语法"></a><code>vuex</code>原始语法 与  辅助函数语法</h5><p><strong>全局语法</strong><br><code>原始语法</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>属性名<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>属性名<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">' mutations名 '</span>，载荷 <span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'actions名 '</span>，载荷 <span class="token punctuation">)</span></code></pre><p><code>辅助语法</code></p><pre class="language-none"><code class="language-none">自动生成计算属性（computed）...mapState([ &#39; 属性名 &#39; ])...mapGetters([ &#39; 属性名 &#39; ])自动生成方法（methods）...mapMutations([&#39; mutations名 &#39; ])...mapActions([&#39; actions名 &#39; ])</code></pre><p><strong>模块化语法</strong><br><code>原始语法</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>模块名<span class="token punctuation">.</span>属性名<span class="token keyword">this</span><span class="token punctuation">,</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span> <span class="token string">' 模块名/属性名'</span><span class="token punctuation">]</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">' 模块名/mutations名'</span>，载荷<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'模块名/actions名'</span>，载荷<span class="token punctuation">)</span></code></pre><p><code>辅助语法</code></p><pre class="language-none"><code class="language-none">自动生成计算属性（computed）    ...mapState(’模块名‘，[ &#39; 属性名 &#39; ])...mapGetters(’模块名‘，[ &#39; 属性名 &#39; ])自动生成方法（methods）...mapMutations(’模块名‘，[&#39; mutations名 &#39; ])...mapActions(’模块名‘，[&#39; actions名 &#39; ])</code></pre><p><strong>使用模块化语法，必须开启命名空间：<code>namespaced: true</code></strong></p><h4 id="4-EventBus-全局事件总线-实现任意组件的通信"><a href="#4-EventBus-全局事件总线-实现任意组件的通信" class="headerlink" title="4. EventBus &#x2F; 全局事件总线                  实现任意组件的通信"></a>4. <code>EventBus</code> &#x2F; 全局事件总线                  实现任意组件的通信</h4><p><strong>语法：</strong><br>1.在main.js中挂载$bus</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//或者</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>2.在A组件中绑定一个事件，当你点击这个事件时，会触发</p><pre class="language-none"><code class="language-none">this.$bus.$emit(&#39;事件名&#39;,传的值)</code></pre><p>3.在B组件中的created&#x2F;mounted中去监听事件</p><pre class="language-none"><code class="language-none">this.$bus.on(&#39;事件名&#39;,数据)</code></pre><h4 id="如何发布一个订阅模式？"><a href="#如何发布一个订阅模式？" class="headerlink" title="如何发布一个订阅模式？"></a>如何发布一个订阅模式？</h4><p>1.通过 $on 监听&#x2F;订阅一个事件；<br>2.通过 $emit 触发&#x2F;发布一个事件；<br>3.一旦发布就会触发 $on 的回调。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bus <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$emit</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">eventType<span class="token punctuation">,</span> <span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span>    <span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">...</span>rest<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$on</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">eventType<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 收集属性对应的方法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">const</span> $bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong><code>ES6</code>写法</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Vue</span><span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bus <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">$emit</span><span class="token punctuation">(</span><span class="token parameter">eventType<span class="token punctuation">,</span> <span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span>        <span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">...</span>rest<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">$on</span><span class="token punctuation">(</span><span class="token parameter">eventType<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><p>除了这些还有传值方式，这边的话自己去查文档，这些在工作中足够使用了</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue认知基础认知</title>
      <link href="/star/2023/072051.html"/>
      <url>/star/2023/072051.html</url>
      
        <content type="html"><![CDATA[<h2 id="Vue认知基础认知"><a href="#Vue认知基础认知" class="headerlink" title="Vue认知基础认知"></a>Vue认知基础认知</h2><p><code>这篇总结主要介绍Vue认知基础认知</code></p><span id="more"></span><h3 id="1-学习vue最好的方式：看官网"><a href="#1-学习vue最好的方式：看官网" class="headerlink" title="1.学习vue最好的方式：看官网"></a>1.学习<code>vue</code>最好的方式：看官网</h3><p><code>vue3官网</code>： <a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a><br><code>vue2官网</code>： <a href="https://v2.cn.vuejs.org/">https://v2.cn.vuejs.org/</a><br><code>vue风格指南(代码规范)</code> ：<a href="https://v2.cn.vuejs.org/v2/style-guide/">https://v2.cn.vuejs.org/v2/style-guide/</a></p><h3 id="2-vue是什么"><a href="#2-vue是什么" class="headerlink" title="2.vue是什么"></a>2.<code>vue</code>是什么</h3><p><code>一套用于构建用户页面的 渐进式框架</code><br><strong>作用：</strong>构建用户页面。 把数据 渲染到 页面上<br><strong>特点：</strong> 渐进式。 一开始不需要使用所有的功能，只需要导入<code>vue</code>核心功能，随着开发的深入逐步的导入对应的功能。<br><code>框架与库的区别</code><br><strong>库 ：</strong> 一个文件中封装了很多的函数<br><strong>框架</strong> ： 多个库的组合 （ 框架功能更加的强大， 但是有更多的限制）</p><h3 id="3-vue特点"><a href="#3-vue特点" class="headerlink" title="3.vue特点"></a>3.<code>vue</code>特点</h3><p>1.渐进式<br>2.数据 驱动 ： 数据是响应式的, 一旦数据改变了，页面会自动更新，而无需DOM操作<br>3.<code>MVVM</code>设计模式<br><code>M：Model数据</code><br><code>V: View视图</code><br><code>VM: vue实例</code><br><code>MVVM模式通过数据双向绑定，当视图变化数据会更新，数据变化了视图也会更新，而无需DOM操作</code></p><p><strong>观察发现</strong><br><code>1.data中所有的属性，最后都出现在了Vue实例身上</code><br><code>2.vm身上所有的属性及vue原型上的所有属性，在vue模板中都可以直接使用</code></p><h3 id="4-一条重要的内置关系"><a href="#4-一条重要的内置关系" class="headerlink" title="4.一条重要的内置关系"></a>4.一条重要的内置关系</h3><p><code>在你写项目的过程中，只有是new Vue才是vue实例，且只有main.js中存在一个vue实例，其余的都是组件实例，但是组件实例不等于vue实例，那它是如何使用vue身上的方法的呢？</code></p><p><code>vue开发人员在底层将组件原型对象指向了vue原型对象，因此就能够使用了</code></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/star/2023/07205108.html"/>
      <url>/star/2023/07205108.html</url>
      
        <content type="html"><![CDATA[<!-- ---abbrlink: 5108title: Vue3tags: Vuecategories: Vueauther: 冷杨威data: '2021-04-08 22:27'password: lywcxyabstract: 这里有东西被加密了，需要输入密码查看哦。message: 您好，这里需要密码。wrong_pass_message: 抱歉，这个密码看着不太对，请再试试。wrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。--- --><h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1><p>本篇主要总结了vue3的知识与概念</p><span id="more"></span><h2 id="一-常用Composition-API-组合式API"><a href="#一-常用Composition-API-组合式API" class="headerlink" title="一.常用Composition API  (组合式API)"></a>一.常用Composition <code>API  (组合式API)</code></h2><h3 id="1-1拉开序幕的setup"><a href="#1-1拉开序幕的setup" class="headerlink" title="1.1拉开序幕的setup"></a>1.1拉开序幕的setup</h3><p><strong>1.是什么？</strong>是vue3中一个新的配置项，值为一个函数<br><strong>2.理解：</strong>是所有组合式<code>API&quot;表演的舞台&quot;</code><br><strong>3.怎么使用？</strong> 组件中所用到的：数据，方法等等，<strong>均要配置在setup中</strong><br><strong>4.返回值</strong>：setup函数的两种返回值，一个是对象，第二个就是返回一个渲染函数<br><strong>a.若返回一个对象，则对象中的属性，方法，在模板中均可使用（重点）</strong><br>b.若返回的是一个渲染函数：则可以自定义渲染内容（了解）<br><strong>5.注意点：</strong><br>a. <strong>尽量不要和vue2配置混用</strong></p><ol><li><code>vue2配置(data,methods,computed...)中可以访问到setup中的属性与方法</code></li><li><code>但在setup中不能访问到vue2配置的(data,methods,computed...)</code></li><li><code>如果有重名，setup优先</code></li></ol><p>b. <strong>setup不能是一个async函数</strong>，因为返回值不再是return的对象，<br>而是promise，模板看不到return对象中的属性。<br>（<strong>注意：</strong>后期也可以使用返回一个Promise实例，但是需要Suspense和异步组件配合）</p><h4 id="setup参数"><a href="#setup参数" class="headerlink" title="setup参数"></a>setup参数</h4><p>参数：<br><code>props</code>：父组件传过来的，值为对象，包含：组件外部传过来，且组件内部声明接收了的属性</p><p><code>context</code>： 上下文对象</p><table><thead><tr><th align="center">emit</th><th align="center">可以触发父亲的自定义事件</th></tr></thead><tbody><tr><td align="center"><code>attrs</code></td><td align="center">非props属性组成的对象(捡漏)</td></tr><tr><td align="center"><code>slots</code></td><td align="center">插槽信息组成的对象</td></tr></tbody></table><h4 id="说一下你对Vue3的了解"><a href="#说一下你对Vue3的了解" class="headerlink" title="说一下你对Vue3的了解"></a>说一下你对<code>Vue3</code>的了解</h4><p><strong>性能更高了</strong><br>1.响应式原理换成了<code>proxy</code><br>2.<code>VNode Diff</code>的算法进行了优化</p><p><strong>体积更小了</strong><br>1.删除了一些不常用的<code>API</code>，例如<code>filter,EventBus...</code><br>2.所以<code>API</code>都是按需引入，能配合<code>webpack</code>等构建工具支持<code>Tree Shaking</code></p><p><strong>对TS支持更好了</strong> <code>源码就是使用TS写的</code></p><p><strong><code>Compostition API(组合API)</code></strong><br>1.解决了同一功能的数据和业务逻辑复用的问题<br>2.<code>Vue2</code>确实可以通过<code>mixin</code>进行复用，<br>但是<code>mixin</code>容易造成命名冲突和数据来源不清晰等问题</p><p><strong>新特性</strong><br>1.<code>Fragment</code><br>2.<code>Teleport</code><br>3.<code>Suspense</code><br>……</p><h3 id="1-2-ref函数"><a href="#1-2-ref函数" class="headerlink" title="1.2 ref函数"></a>1.2 ref函数</h3><p>作用：定义一个响应式数据<br>语法:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//第一步：按需导入ref函数 </span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>ref<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//第二步：在setup配置项中使用</span><span class="token keyword">const</span> xxx <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'666'</span><span class="token punctuation">)</span><span class="token comment">/*创建了一个包含响应式数据的引用对象(reference对象，简称ref对象)js中操作数据：xxx.value模板中读取数据：不需要使用.value  直接：&#123;&#123;xxx&#125;&#125;*/</span></code></pre><p>备注：<br>1.接收的数据可以是：基本数据类型，也可以是对象类型<br>2.基本数据类型的数据：<br>响应式依然依靠<code>Object.defineProperty()的getter与setter完成的</code>，<br><strong>他只能读取，不能新增和删除</strong><br>3.对象类型的数据：<br>内部使用了vue3中的一个新函数—reactive函数(内部封装es6新增的Proxy的操作)<br>4.<code>ref</code>包裹的内部数据，如果说是一个复杂数据类型，其实他还是一个<code>reactive</code></p><h3 id="1-3-reactive函数"><a href="#1-3-reactive函数" class="headerlink" title="1.3 reactive函数"></a>1.3 reactive函数</h3><p>1.作用：定义一个对象，数组类型的响应式数据（基本数据类型别用他，用ref函数）<br>2.语法：<br>const <strong>代理对象</strong>名 &#x3D; reactive(<strong>源对象</strong>)，接收一个对象(或数组)，<br>返回一个代理对象（Proxy的实例对象，简称proxy对象）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//第一步：按需导入ref函数 </span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>reactive<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//第二步：在setup配置项中使用</span><span class="token keyword">const</span> 对象名 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">属性名</span><span class="token operator">:</span>属性值<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//直接读取，别写.value了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>对象名<span class="token punctuation">.</span>属性名<span class="token punctuation">)</span></code></pre><p>3.<code>reactive</code>定义的响应式数据是’深层次的’<br>4.内部是基于<code>ES6</code>的<code>Proxy</code>实现，通过<strong>代理对象</strong>操作<strong>源对象</strong>内部数据都是响应式的<br>5.<code>reactive</code>包裹的内部数据，如果说是一个复杂数据类型，其实他还是一个<code>reactive</code></p><h3 id="1-4-Vue3中的响应式原理"><a href="#1-4-Vue3中的响应式原理" class="headerlink" title="1.4 Vue3中的响应式原理"></a>1.4 Vue3中的响应式原理</h3><h4 id="vue2的响应式"><a href="#vue2的响应式" class="headerlink" title="vue2的响应式"></a>vue2的响应式</h4><h5 id="实现原理："><a href="#实现原理：" class="headerlink" title="实现原理："></a>实现原理：</h5><p>对象类型：通过Object.defineProperty()对属性的读取，修改进行拦截（数据劫持）<br>数组类型：通过重写更新数组的一系列方法来实现拦截（对数组的变更方法进行了包裹）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>给谁添加属性，<span class="token string">'新增属性的名字'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>                      <span class="token comment">//有人读取新增属性的时候调用</span>                      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> 修改后的值  <span class="token comment">//修改后的值会传给set的形参</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//有人修改新增属性时调用</span>    <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//get，set只能读取，无法捕获到新增和删除，因此在vue中，</span><span class="token comment">//新增，删除操作没有响应式，这就是单向数据流为啥产生的原因</span></code></pre><h5 id="存在的问题："><a href="#存在的问题：" class="headerlink" title="存在的问题："></a>存在的问题：</h5><p>1.新增属性，删除属性，界面不会更新<br>this.$set(添加谁，’属性名’,’属性值’)   Vue.set(添加谁，’属性名’,’属性值’)<br>this.$delete(删除谁，’属性名’)    Vue.delete(删除谁，’属性名’)</p><p>2.直接通过下标修改数组，界面不会自动更新</p><h4 id="vue3的响应式"><a href="#vue3的响应式" class="headerlink" title="vue3的响应式"></a>vue3的响应式</h4><h5 id="实现原理：-1"><a href="#实现原理：-1" class="headerlink" title="实现原理："></a>实现原理：</h5><p>步骤1：<strong>使用Proxy代理对象完成</strong>：通过它去拦截对象中任意属性的变化，包括属性的读写，增删</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>给谁绑定<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token comment">//3个方法get set deleteProperty</span>    <span class="token comment">//有人读取p的某个属性</span>    <span class="token comment">/*    target   就是目标源   也就是给谁绑定的对象    propName  就是增删改查的哪个属性    value    就是你修改过后的值    */</span>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> target<span class="token punctuation">[</span>propName<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//有人修改了p的某个属性，或给p追加某个属性时调用</span>    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        target<span class="token punctuation">[</span>propName<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//有人删除了p的某个属性</span>    <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span>propName</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">delete</span> target<span class="token punctuation">[</span>propName<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>步骤2：<strong>使用Reflect反射对象完成</strong>：对源对象的属性进行操作<br>配合window的内置对象<strong>Reflect  反射   ES6新增的一个内置对象</strong></p><p>除了原始的增删改查，还能使用Reflect内置对象</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//查</span>Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>从哪个对象身上得到<span class="token punctuation">,</span><span class="token string">'得到哪个属性'</span><span class="token punctuation">)</span><span class="token comment">//改  增</span>Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>从哪个对象身上改<span class="token punctuation">,</span><span class="token string">'改哪个属性'</span><span class="token punctuation">,</span><span class="token string">'改成什么'</span><span class="token punctuation">)</span>Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>从哪个对象身上增<span class="token punctuation">,</span><span class="token string">'增哪个属性'</span><span class="token punctuation">,</span><span class="token string">'添加什么'</span><span class="token punctuation">)</span><span class="token comment">//删</span>Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>从哪个对象身上上<span class="token punctuation">,</span><span class="token string">'删哪个属性'</span><span class="token punctuation">)</span></code></pre><p><strong>Proxy配合Reflect实现vue3的响应式</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>给谁绑定<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token comment">//3个方法get set deleteProperty</span>    <span class="token comment">//有人读取p的某个属性</span>    <span class="token comment">/*    target   就是目标源   也就是给谁绑定的对象    propName  就是增删改查的哪个属性    value    就是你修改过后的值    */</span>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//有人修改了p的某个属性，或给p追加某个属性时调用</span>    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">,</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//有人删除了p的某个属性</span>    <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span>propName</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="1-5-reactive和ref"><a href="#1-5-reactive和ref" class="headerlink" title="1.5 reactive和ref"></a>1.5 reactive和ref</h3><p>从定义数据角度对比：<br>1.ref用来定义：基本数据类型<br>2.reactive用来定义：对象和数组类型的数据<br>备注：ref也可以用来定义对象（或数组）类型数据，它内部会自动通过reactive转化为代理对象</p><p>从原理角度对比：<br>1.ref通过Object.defineProperty()的get和set实现响应式（数据劫持）<br>2.reactive是通过Proxy来实现响应式（数据劫持），并通过Reflect操作源对象内部的数据</p><p>从使用角度对比：<br>1.ref定义的数据：操作数据需要 .value ，读取数据时，模板中直接读取不需要 .value<br>2.reactive定义的数据：操作数据和读取数据，均不需要 .value</p><h3 id="1-6计算属性与监视"><a href="#1-6计算属性与监视" class="headerlink" title="1.6计算属性与监视"></a>1.6计算属性与监视</h3><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>与vue2中computed配置功能一致</p><p>语法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//vue3中一定要按需导入computed,才能使用计算属性</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>computed<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"demo"</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            first <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">,</span>            last <span class="token operator">=</span> <span class="token string">'b'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment">//这里的full在页面上能直接使用，p.full</span>        person<span class="token punctuation">.</span>full <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> p<span class="token punctuation">.</span>first <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>last            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                p<span class="token punctuation">.</span>first <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                p<span class="token punctuation">.</span>last <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment">//搞完以后一定要返回出去</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            p        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="watch函数"><a href="#watch函数" class="headerlink" title="watch函数"></a>watch函数</h4><p>与vue2中watch功能一致</p><p>语法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//vue3中一定要按需导入watch,才能使用计算属性</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>watch<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"demo"</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span>        <span class="token comment">/*        监视ref定义的一个响应式数据         watch(你要监视谁,(newVal,oldVal)=>&#123;            console.log('sum改变了',newVal,oldVal)        &#125;)                 watch(sum,(newVal,oldVal)=>&#123;            console.log('sum改变了',newVal,oldVal)        &#125;)        */</span>                <span class="token comment">/*        监视ref定义的多个响应式数据        此时newVal,oldVal返回的是一个数组         watch([sum,msg],(newVal,oldVal)=>&#123;            console.log('sum改变了',newVal,oldVal)        &#125;,&#123;immediate:true,deep:true&#125;)        */</span>                        <span class="token comment">//搞完以后一定要返回出去</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            sum，            msg        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="1-1监视ref定义的一个响应式数据"><a href="#1-1监视ref定义的一个响应式数据" class="headerlink" title="1.1监视ref定义的一个响应式数据"></a>1.1监视ref定义的一个响应式数据</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">watch</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span>oldVal</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sum改变了'</span><span class="token punctuation">,</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h5 id="1-2监视ref定义的多个响应式数据"><a href="#1-2监视ref定义的多个响应式数据" class="headerlink" title="1.2监视ref定义的多个响应式数据"></a>1.2监视ref定义的多个响应式数据</h5><p><strong>此时newVal,oldVal返回的是一个数组</strong>      </p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>sum<span class="token punctuation">,</span>msg<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span>oldVal</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sum改变了'</span><span class="token punctuation">,</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">immediate</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h5 id="2-监视reactive定义的数据"><a href="#2-监视reactive定义的数据" class="headerlink" title="2.监视reactive定义的数据"></a>2.监视reactive定义的数据</h5><p>注意：<br>1.如果监视的是reactive定义的响应式数据时(整个对象，或者使用ref传递的数据是对象)，<br>此处无法正确的获取oldValue，并且强制开启了深度监视(deep配置无效)</p><p>2.如果监视的是reactive定义的响应式数据中的<strong>某个属性</strong>，这个属性是基础数据类型，<br><code>但是需要把数据写成函数返回的代码</code>，例如<code>watch(()=&gt;对象.属性,(newval,oldval)=&gt;&#123;&#125;)</code></p><p>3.如果监视的是reactive定义的响应式数据中的<strong>某些属性</strong>，这个属性是基础数据类型，<br><code>但是需要把数据写成函数返回的代码</code>，<br>例如：<code>watch([()=&gt;对象.属性1,()=&gt;对象.属性2],(newval,oldval)=&gt;&#123;&#125;)</code></p><p>4.如果监视的是reactive定义的响应式数据中的某个属性的值依然是一个对象，<br>这个属性是复杂数据类型，且deep有效</p><p>总结：监听对象类型的数据是拿不到oldVal的</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//vue3中一定要按需导入watch,才能使用计算属性</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>watch<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"demo"</span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token number">666</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>            <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>         <span class="token function">watch</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>value<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span>oldVal</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p1改变了'</span><span class="token punctuation">,</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token function">watch</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span>oldVal</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p改变了'</span><span class="token punctuation">,</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment">//搞完以后一定要返回出去</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            p<span class="token punctuation">,</span>            p1        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="3-对于ref在watch中是否-value去监视"><a href="#3-对于ref在watch中是否-value去监视" class="headerlink" title="3.对于ref在watch中是否.value去监视"></a>3.对于ref在watch中是否.value去监视</h5><p>1.如果是ref定义的<strong>基本数据类型</strong>不要去<code>.value</code>，<br>如果你去<code>.value</code>,那么它侦听的就不是你的属性了，而是你属性的<code>value</code>值</p><p>2.如果是ref定义的<strong>复杂数据类型</strong>要去<code>.value</code>，<br>因为你ref里面写对象，本质上还是要拿到他的reactive对象</p><p>3.如果是ref定义的<strong>复杂数据类型</strong>，你不想写<code>.value</code>，<br>则只需要开启深度监视即可</p><h4 id="watchEffect函数"><a href="#watchEffect函数" class="headerlink" title="watchEffect函数"></a><code>watchEffect</code>函数</h4><p>官方解释：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行。</p><p><code>watch</code>的套路是：既要指明监视的属性，也要指明监视的回调</p><p><code>watchEffect</code>的套路是：不管指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性</p><p><code>watchEffect</code>有点像<code>computed</code><br>但是<code>computed</code>注重的计算出来的值(回调函数的返回值)，所以必须写返回值<br>而<code>watchEffect</code>更注重过程(回调函数的函数体)，所以不用写返回值</p><p><a href="https://cn.vuejs.org/api/reactivity-core.html#watcheffect">watchEffect官方文档</a></p><h3 id="1-7-生命周期"><a href="#1-7-生命周期" class="headerlink" title="1.7 生命周期"></a>1.7 生命周期</h3><p>Vue3中可以继续使用Vue2的生命钩子，但是有两个被更名：</p><table><thead><tr><th align="center">beforeDestroy</th><th align="center">改为</th><th align="center">beforeUnmount</th></tr></thead><tbody><tr><td align="center">destroyed</td><td align="center">改为</td><td align="center">unmounted</td></tr></tbody></table><p>Vue3.0也提供了<strong>组合式API</strong>形式的生命周期钩子，即写在setup中的钩子，与Vue2.0中钩子对应关系如下</p><table><thead><tr><th align="center">Vue2.0</th><th align="center">改变</th><th align="center">Vue3.0</th></tr></thead><tbody><tr><td align="center">beforeCreate</td><td align="center"></td><td align="center">setup</td></tr><tr><td align="center">created</td><td align="center"></td><td align="center">setup</td></tr><tr><td align="center">beforeMount</td><td align="center"></td><td align="center">onBeforeMount</td></tr><tr><td align="center">mounted</td><td align="center"></td><td align="center">onMounted</td></tr><tr><td align="center">beforeUpdate</td><td align="center"></td><td align="center">onBeforeUpdate</td></tr><tr><td align="center">updated</td><td align="center"></td><td align="center">onUpdated</td></tr><tr><td align="center">beforeDestroy</td><td align="center"></td><td align="center">onBeforeUnmount</td></tr><tr><td align="center">destroyed</td><td align="center"></td><td align="center">onUnmounted</td></tr></tbody></table><p>语法：<code>生命周期(()=&gt;执行代码)</code></p><h3 id="1-8-自定义hook函数"><a href="#1-8-自定义hook函数" class="headerlink" title="1.8 自定义hook函数"></a>1.8 自定义hook函数</h3><p>1.什么是hook？本质是一个函数，把setup函数中使用的组合API进行了封装</p><p>2.类似于vue2中的mixin</p><p>优势：复用代码，让setup中的逻辑更清除易懂</p><h3 id="1-9-toRef"><a href="#1-9-toRef" class="headerlink" title="1.9 toRef"></a>1.9 toRef</h3><p>作用：创建一个ref对象，其value值指向另一个对象中的某个属性值</p><p>语法：<code>const name = toRef(操作的对象,&#39;属性&#39;)</code></p><p>应用：要将响应式对象中的某个属性单独提供给外部使用</p><p>扩展：<code>toRefs</code>与<code>toRef</code>功能一致，但是可以批量创建多个ref对象，语法：<code>toRefs(操作对象)</code></p><h2 id="二-其他的组合API（了解）"><a href="#二-其他的组合API（了解）" class="headerlink" title="二.其他的组合API（了解）"></a>二.其他的组合API（了解）</h2><h3 id="1-shallowReactive和shallowRef"><a href="#1-shallowReactive和shallowRef" class="headerlink" title="1. shallowReactive和shallowRef"></a>1. <code>shallowReactive和shallowRef</code></h3><p><code>shallowReactive</code>：只处理对象最外层属性的响应式(只考虑第一层)</p><p><code>shallowRef</code>：只支持处理基本数据类型的响应式，不进行对象响应式处理</p><p>什么时候使用？</p><p>shallowReactive：如果有一个对象数据，结构比较深，但变化时只是外层属性变化 </p><p>shallowRef：如果有一个对象数据，后续功能不会修改该对象中的属性，而是生成新的对象来替换</p><h3 id="2-readonly和shallowReadonly"><a href="#2-readonly和shallowReadonly" class="headerlink" title="2. readonly和shallowReadonly"></a>2. <code>readonly和shallowReadonly</code></h3><p><code>readonly</code>：让一个响应式数据变为只读的（深只读）</p><p><code>shallowReadonly</code>：让一个响应式数据变为只读的（浅只读）</p><p>应用场景：不希望数据被修改时</p><h3 id="3-toRaw和markRaw"><a href="#3-toRaw和markRaw" class="headerlink" title="3. toRaw和markRaw"></a>3. <code>toRaw和markRaw</code></h3><p><code>toRaw</code>：<br>作用：将一个由<code>reactive</code>生成的响应式对象转换为普通对象<br>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所以操作，不会引起页面刷新</p><p><code>markRaw</code>：<br>作用：标记一个对象，使其永远不会再成为响应式<br>应用场景：<br>1.有些值不应该被设置为响应式的，例如第三方库等<br>2.当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能</p><h3 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4. customRef"></a>4. <code>customRef</code></h3><p>作用：创建一个自定义的ref，并对其依赖项跟踪和更新触发进行显式控制</p><p>看官网：<a href="https://cn.vuejs.org/api/reactivity-advanced.html#customref">customRef</a></p><p>track  通知vue追踪数据的变化<br>trigger  通知vue再次解析模板</p><h3 id="5-provide-inject"><a href="#5-provide-inject" class="headerlink" title="5. provide/inject"></a>5. <code>provide/inject</code></h3><p>作用：实现祖与后代通信</p><p>使用：<br>发：provide(‘叫啥’, 数据变量名)<br>收：inject(‘叫啥’)</p><p>两个<code>叫啥</code>必须一致，可以随便叫什么名字</p><p><strong>孙传爷</strong><br>思路：在爷爷中封装一个函数，并且将这个函数通过provide(‘叫啥’, 数据变量名)发送过去，<br>后代通过inject(‘叫啥’)接收，拿到函数后，找到需要时进行调用并传参</p><h3 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h3><p>isRef：检查一个值是否为ref对象<br>isReactive：检查一个对象是否由reactive创建的响应式代理<br>isReadonly：检查一个对象是否是由<code>readonly</code>创建的只读代理<br>isProxy：检查一个对象是否由reactive或者readonly方法创建的代理</p><h2 id="三-组合API的优势"><a href="#三-组合API的优势" class="headerlink" title="三.组合API的优势"></a>三.组合<code>API</code>的优势</h2><p>1.解决了同一功能的数据和业务逻辑复用的问题<br>2.<code>Vue2</code>确实可以通过<code>mixin</code>进行复用，但是<code>mixin</code>容易造成命名冲突和数据来源不清晰等问题</p><h2 id="四-新的组件"><a href="#四-新的组件" class="headerlink" title="四.新的组件"></a>四.新的组件</h2><h3 id="Fragment组件"><a href="#Fragment组件" class="headerlink" title="Fragment组件"></a><code>Fragment</code>组件</h3><p>在vue2中：组件必须有一个根标签</p><p>在vue3中，组件可以没有根标签，内部会将多个标签包含着一个Fragment虚拟元素中</p><p>好处：减少标签层级，减少内存占用</p><h3 id="Teleport组件"><a href="#Teleport组件" class="headerlink" title="Teleport组件"></a><code>Teleport</code>组件</h3><p>是什么？Teleport是一种能够将我们的组件html结构移动到指定的位置的技术</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"child"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dialog v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"bBar"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"handleDialog"</span><span class="token operator">></span>显示弹框<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>    <span class="token keyword">import</span> Dialog <span class="token keyword">from</span> <span class="token string">'./Dialog.vue'</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Child'</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            Dialog<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> bBar <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token keyword">const</span> <span class="token function-variable function">handleDialog</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                bBar<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span>bBar<span class="token punctuation">.</span>value            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                bBar<span class="token punctuation">,</span>                handleDialog<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>解决</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"child"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>teleport to<span class="token operator">=</span><span class="token string">"body"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dialog v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"bBar"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>teleport<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"handleDialog"</span><span class="token operator">></span>显示弹框<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><h3 id="Suspense组件-配合异步组件使用"><a href="#Suspense组件-配合异步组件使用" class="headerlink" title="Suspense组件(配合异步组件使用)"></a><code>Suspense</code>组件(配合异步组件使用)</h3><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p><p><a href="https://cn.vuejs.org/guide/built-ins/suspense.html#suspense">Suspense组件文档</a></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>异步组件名</span><span class="token punctuation">/></span></span>  <span class="token comment">&lt;!-- 在 #fallback 插槽中显示 “正在加载中” --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#fallback</span><span class="token punctuation">></span></span>    Loading...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">></span></span></code></pre><p>在上方存放异步组件，在<code>#fallback</code>中存放异步组件未加载出来时的页面，<br>当上方的异步组件未加载出来时，让他先加载下面的页面</p><h2 id="五-其他"><a href="#五-其他" class="headerlink" title="五.其他"></a>五.其他</h2><h3 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局<code>API</code>的转移</h3><p><code>vue2</code>有许多全局的<code>API</code>和配置，例如注册全局组件，注册全局指令等</p><p><code>vue3</code>中对这些<code>API</code>做出了调整：<br>即：Vue.xxx调整到应用实例(app)上</p><table><thead><tr><th align="center">2.x 全局API(Vue)</th><th align="center">3.x 实例API(app)</th></tr></thead><tbody><tr><td align="center">Vue.config.xxx</td><td align="center">app.config.xxx</td></tr><tr><td align="center">Vue.config.ProductionTip</td><td align="center">移除</td></tr><tr><td align="center">Vue.component</td><td align="center">app.component</td></tr><tr><td align="center">Vue.directive</td><td align="center">app.directive</td></tr><tr><td align="center">Vue.mixin</td><td align="center">app.mixin</td></tr><tr><td align="center">Vue.use</td><td align="center">app.use</td></tr><tr><td align="center">Vue.prototype</td><td align="center">app.config.globalProperties</td></tr></tbody></table><h3 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h3><p>1.data选项应该始终被声明为一个函数</p><p>2.过渡类名的更改</p><p>3.移除了keyCode作为v-on的修饰符，同时也不再支持config.keyCodes</p><p>4.移除v-on.native修饰符</p><p>5.移除过滤器filter</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWA</title>
      <link href="/star/2023/0720589.html"/>
      <url>/star/2023/0720589.html</url>
      
        <content type="html"><![CDATA[<!-- ---abbrlink: 589title: PWAtags:  Web前端扩展categories: Web前端扩展auther: 冷杨威data: '2021-04-08 22:27'password: lywcxyabstract: 这里有东西被加密了，需要输入密码查看哦。message: 您好，这里需要密码。wrong_pass_message: 抱歉，这个密码看着不太对，请再试试。wrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。top: 3--- --><h2 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h2><p><code>这篇总结主要介绍一下PWA</code></p><span id="more"></span><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>1.是什么？是渐进式web应用，Progressive Web App，简称PWA。<br>2.PWA并不是靠特指某一项技术，而是经过应用一些新技术进行改进</p><p>是一个标准的PWA程序，必须包含3个部分。<br>一：https协议或者<a href="http://localhost,/">http://localhost，</a><br>二：manifest.json，<br>三：service worker</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>渐进式-适用于所有浏览器<br>流程-借助Service Worker在离线或网络较差时能够正常访问<br>可安装-用户可以添加常用webapp到桌面<br>原生体验-和app一样，用于首屏加载动画，隐藏地址栏等体验<br>粘性-通过推送离线通知，让用户回流</p><h2 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h2><h3 id="1-web-app-manifest-应用程序清单"><a href="#1-web-app-manifest-应用程序清单" class="headerlink" title="1.web app manifest : 应用程序清单"></a>1.web app manifest : 应用程序清单</h3><p>它是PWA技术集合的一部分，他的主要作用是让网站能够直接安装到设备的主屏幕上，无需下载<br>具体他就是一个JSON文件，在JSON文件去添加一些配置，添加完这些配置，就能将网站添加在桌面上。<br>优势：传统web app 入口需要网址&#x2F;书签&#x2F;收藏&#x2F;直接搜索，才能去访问他的网址，同时粘性不高，用了一次不再使用</p><p>可以添加到页面，有唯一的图标和名称<br>有启动时间，避免生硬的过渡<br>隐藏浏览器相关的UI，比如地址栏</p><h4 id="如何使用manifest"><a href="#如何使用manifest" class="headerlink" title="如何使用manifest"></a>如何使用manifest</h4><p><strong>1.在项目根目录下创建一个manifest.json文件</strong></p><p><strong>2.在index.html中引入manifest.json文件</strong></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manifest.json<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p><strong>3.在manifest文件中提供常见的配置</strong></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Hello PWA"</span><span class="token punctuation">,</span>    <span class="token property">"short_name"</span><span class="token operator">:</span><span class="token string">"PWA"</span><span class="token punctuation">,</span>    <span class="token property">"start_url"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"icons"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"src"</span><span class="token operator">:</span><span class="token string">" "</span><span class="token punctuation">,</span>            <span class="token property">"sizes"</span><span class="token operator">:</span><span class="token string">"144*144"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"image/png"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"background-color"</span><span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">,</span>    <span class="token property">"tieme_color"</span><span class="token operator">:</span><span class="token string">"pink"</span><span class="token punctuation">,</span>    <span class="token property">"display"</span><span class="token operator">:</span><span class="token string">"standalone"</span><span class="token punctuation">&#125;</span></code></pre><p>name：用于指定应用的名称，用户安装横幅提示的名称和启动画面中的汉字<br>short_name：应用的短名称，用于主屏幕显示<br>start_url：指定用户从设备启动应用程序所加载的url，<br>就是你加载哪个页面为首次加载页面，可以是绝对路径与相对路径<br>icons：用于指定可在各种环境中作用应用程序图标的图像对应数组  144*144<br>background-color：用户指定启动动画的背景颜色<br>theme_color：用于指定应用程序的主题颜色，就是顶部背景颜色<br>display：用于指定web app显示模式<br>         fullscreen:全屏显示<br>         standalone:让应用看起来像一个独立的应用程序，包括不同的窗口，<br>         在应用程序启动器中，拥有自己的图标<br>         minimal:让应用看起来像一个独立的应用程序,但会有浏览地址栏</p><p><strong>4.只支持https协议或者<a href="http://localhost下访问项目/">http://localhost下访问项目</a></strong></p><h3 id="2-service-worker：持久的离线缓存"><a href="#2-service-worker：持久的离线缓存" class="headerlink" title="2.service worker：持久的离线缓存"></a>2.service worker：持久的离线缓存</h3><ol><li>是一个标准的PWA程序，必须包含3个部分。<br>一：https协议或者<a href="http://localhost,/">http://localhost，</a><br>二：manifest.json，三：service worker</li><li>service worker允许web应用在网络情况较差或者离线的情况下依旧可以访问</li><li>service worker可以极大的提升web app的用户体验</li><li>service worker是一个独立的worker线程，独立于当前网页进程，是一种特殊的<strong>web worker</strong></li></ol><h4 id="web-worker介绍"><a href="#web-worker介绍" class="headerlink" title="web worker介绍"></a>web worker介绍</h4><p>浏览器中的js是单线程的，同一时间只能做一件事，随着业务的增加，会造成严重的性能问题，<br>因此W3C提出了 web worker，他是脱离主线程之外的，将一些复杂耗时的活交给他，<br>完成通过后通过postMessage方法告诉主线程，web worker是一个独立的运行环境，不能操作DOM和BOM</p><h4 id="web-worker的使用"><a href="#web-worker的使用" class="headerlink" title="web worker的使用"></a>web worker的使用</h4><p>1.创建web worker </p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">'work.js'</span><span class="token punctuation">)</span></code></pre><p>2.在web worker中进行复杂的计算</p><p>3.web worker计算结束后，通过self.postMessage(msg)给主线程发消息</p><p>4.主线程通过worker.onmessage &#x3D; function(msg){}监听消息</p><p>5.主线程也可以通过用同样的方式来给web worker进行通讯</p><p>示例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//在a.js文件夹中</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token comment">/*let sum = 0for(let i = 0;i &lt; 100000000;i++) &#123;    sum+=i&#125;*/</span><span class="token comment">//1.创建worker实例</span><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">'work.js'</span><span class="token punctuation">)</span><span class="token comment">//2.拿到web worker传过来的消息，监听message事件</span>worker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span><span class="token parameter">e</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token comment">//e.data就是work.js给我们发送的消息</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//在work.js文件夹中操作大量运算数据代码，web worker是一个独立的运行环境，不能操作DOM和BOM</span><span class="token comment">//1.运算复杂数据</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sum<span class="token operator">+=</span>i<span class="token punctuation">&#125;</span><span class="token comment">//2.发消息给主线程</span>self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">sum</span><span class="token operator">:</span>sum<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="service-worker介绍"><a href="#service-worker介绍" class="headerlink" title="service worker介绍"></a>service worker介绍</h4><p>web worker是临时的，每次做的事情无法持久存储下来</p><p>而service worker则是不一样的，一旦被创建（install），就会永远存在，<br>除非手动删除（unregister），且用到时可以直接唤醒，不用的时候自动睡眠。</p><p>同时它还可以通过代码拦截请求与响应，缓存文件（他会决定你是读缓存还是读取服务器，<br>并且能够将读取服务器的数据缓存一份在CacheStorage中），因此你网页离线了，就会读取缓存。</p><p>离线内容也能操作，就是你要缓存哪些，不缓存哪些</p><p>必须在https环境下才能工作</p><p>异步实现，内部大部分都是通过promise实现</p><h4 id="service-worker的使用"><a href="#service-worker的使用" class="headerlink" title="service worker的使用"></a>service worker的使用</h4><p>1.在window.onload中注册service worker，防止与其他资源竞争，<br>即在网页加载完成以后再去注册sevice worker<br>2.navigator对象内置了serviceWorker属性<br>3.service worker在老版本的浏览器不支持，需要兼容</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'serviceWorker'</span> <span class="token keyword">in</span> navigator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>4.注册service worker ：**navigator.serviceWorker.register(‘.&#x2F;sw.js’)**，返回一个promise对象</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.在网页加载完成以后再去注册sevice worker</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">//2.检测是否兼容</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'serviceWorker'</span> <span class="token keyword">in</span> navigator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//3.调用方法，并且创建sw.js文件</span>        navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'./sw.js'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>5.操作sw.js文件</p><h5 id="service-worker生命周期事件"><a href="#service-worker生命周期事件" class="headerlink" title="service worker生命周期事件"></a>service worker生命周期事件</h5><p>1.install事件会在service worker注册成功时触发，主要用于缓存<br>2.activate事件会在service worker激活时触发，主要用于删除旧的资源<br>3.fetch事件会在发送请求的时候触发，主要操作缓存或者读取网络资源</p><p>注意：<br>1.如果sw.js文件发生了改变，install事件会被重新触发,其余的时候都不会再触发<br>2.activate事件会在install事件后触发，但如果发现已经存在service worker，<br>那么就处于等待状态，直到当前的service worker终止，才会再次调用<br>3.可以通过**self.skipWaiting()<strong>方法跳过等待，返回一个promise对象<br>4.可以通过</strong>event.waitUntil()<strong>方法扩的参数是一个promise对象，<br>会在promise结束后才会结束当前生命周期函数，防止浏览器在异步操作之前就停止了生命周期<br>5.service worker激活后，会在下一次刷新页面的时候才会生效，<br>可以通过</strong>self.clients.claim()**立即获取控制权</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//self 关键字表示当前的 Service Worker 实例</span>self<span class="token punctuation">.</span><span class="token function">addEventListenter</span><span class="token punctuation">(</span><span class="token string">'install'</span><span class="token punctuation">,</span><span class="token parameter">e</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token comment">//让service worker跳过等待，直接进入activate</span>    <span class="token comment">//让skipWaiting这个异步结束以后，才进入activate</span>    event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token function">skipWaiting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span><span class="token function">addEventListenter</span><span class="token punctuation">(</span><span class="token string">'activate'</span><span class="token punctuation">,</span><span class="token parameter">e</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token comment">//表示service worker激活后，立即获取控制权</span>    <span class="token comment">//让self.clients.claim()这个异步结束以后，才进入fetch</span>    event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span><span class="token function">addEventListenter</span><span class="token punctuation">(</span><span class="token string">'fetch'</span><span class="token punctuation">,</span><span class="token parameter">e</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="fetch-api"><a href="#fetch-api" class="headerlink" title="fetch api"></a>fetch api</h4><p>1.它是js提供的一个网络请求接口，用于访问与操作http管道部分，<br>例如请求与响应，他是基于promise实现的<br>2.fetch(url,config)用于发送http请求，返回一个包含结果的promise<br>3.response(返回的数据)是二进制数据流，需要调用json()方法转换成json数据<br>4.config常见参数：</p><ol><li>body：用于设置请求体</li><li>headers：请求头</li><li>method：请求方式</li></ol><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//由于window对象上有fetch属性</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'请求路径'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">//res请求得到的响应内容是二进制的流</span>    <span class="token comment">//调用res.json()方法，可以把数据变成json格式</span>    <span class="token comment">//它返回的是一个promise</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">//data则是你需要的数据</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="cache-storage"><a href="#cache-storage" class="headerlink" title="cache storage"></a>cache storage</h3><p>1.cacheStorage接口表示Cache对象的存储。配合service worker来实现资源的缓存</p><p>2.caches api类似于数据库的操作：<br>**caches.open(cacheName).then(function(cache）{这里拿到cache对象})**：<br>用于打开缓存，返回一个匹配cacheName的cache对象的promise，类似于连接数据库</p><p>caches.keys()：返回一个promise对象，包括所有的缓存的key（数据库名）</p><p>caches.delete(key)：根据key，删除对应缓存</p><p>3.cache对象常用方法</p><p>cache接口为缓存的request&#x2F;response对象对提供存储机制</p><p>cache put(req,res)：把请求当作key，并且对应的响应存储起来</p><p>cache add(url) ：根据url发送请求，并且把响应存储起来</p><p>cache addAll(urls)：抓取url数组，并且把他们存储起来</p><p>catch math(req)：获取req对应的response</p><h3 id="完整版"><a href="#完整版" class="headerlink" title="完整版"></a>完整版</h3><p>某个js文件</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.在网页加载完成以后再去注册sevice worker</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">//2.检测是否兼容</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'serviceWorker'</span> <span class="token keyword">in</span> navigator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//3.调用方法，并且创建sw.js文件</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> registration <span class="token operator">=</span> navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'./sw.js'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"注册失败"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//页面一进来，看用户是否有网络，没有则给用户一个通知</span><span class="token keyword">if</span><span class="token punctuation">(</span>Notification <span class="token punctuation">.</span>permission <span class="token operator">===</span> <span class="token string">'default'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Notification<span class="token punctuation">.</span><span class="token function">requestPremission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>navigator<span class="token punctuation">.</span>onLine<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span><span class="token string">'提示'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">body</span><span class="token operator">:</span><span class="token string">'你当前没有网络，你访问的是缓存'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//如果有网络</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'online'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>   <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span><span class="token string">'提示'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">body</span><span class="token operator">:</span><span class="token string">'你已连上网络，你访问的是最新数据'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>sw.js文件</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//self 关键字表示当前的 Service Worker 实例</span><span class="token comment">//主要缓存内容</span><span class="token keyword">const</span> <span class="token constant">CACHE_NAME</span> <span class="token operator">=</span> <span class="token string">"cache_v1"</span>self<span class="token punctuation">.</span><span class="token function">addEventListenter</span><span class="token punctuation">(</span><span class="token string">'install'</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token parameter">e</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">//#1 开启一个cache，得到一个cache对象</span>    cosnt cache <span class="token operator">=</span> <span class="token keyword">await</span> caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token constant">CACHE_NAME</span><span class="token punctuation">)</span>    <span class="token comment">//#2 拿到cache对象之后，调用addAll(),将数据存储起来</span>    <span class="token comment">//等待cache把所有资源存起来</span>    <span class="token keyword">await</span> cache<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token string">'/'</span><span class="token punctuation">,</span>   <span class="token comment">// '/index.html'主页，只需要写一个/即可</span>        <span class="token string">'/images/logo.png'</span><span class="token punctuation">,</span>        <span class="token string">'/mainfest.json'</span><span class="token punctuation">,</span>        <span class="token string">'/index.css'</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">await</span> self<span class="token punctuation">.</span><span class="token function">skipWaiting</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">//让service worker跳过等待，直接进入activate</span>    <span class="token comment">//让skipWaiting这个异步结束以后，才进入activate</span>    <span class="token comment">//event.waitUntil(self.skipWaiting())</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//主要清除旧的资源</span>self<span class="token punctuation">.</span><span class="token function">addEventListenter</span><span class="token punctuation">(</span><span class="token string">'activate'</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token parameter">e</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">//#1 获取所有资源的key</span>    cosnt keys <span class="token operator">=</span> <span class="token keyword">await</span> caches<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>keys<span class="token operator">!==</span><span class="token constant">CACHE_NAME</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        caches<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">await</span> self<span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">//表示service worker激活后，立即获取控制权</span>    <span class="token comment">//让self.clients.claim()这个异步结束以后，才进入fetch</span>    <span class="token comment">//event.waitUntil(self.clients.claim())</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//在请求发送时触发</span><span class="token comment">//判断资源是否能够请求成功，如果能够请求成功，</span><span class="token comment">//就响应成功的结果，如果请求失败了，则去读取缓存</span>self<span class="token punctuation">.</span><span class="token function">addEventListenter</span><span class="token punctuation">(</span><span class="token string">'fetch'</span><span class="token punctuation">,</span><span class="token parameter">e</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">//请求对象</span>    <span class="token keyword">const</span> req <span class="token operator">=</span> event<span class="token punctuation">.</span>request    <span class="token comment">//给浏览器响应</span>    event<span class="token punctuation">.</span><span class="token function">respondWith</span><span class="token punctuation">(</span><span class="token function">fn1</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//网络优先</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token comment">//成功，则网络读取资源</span>       cosnt fresh <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>        <span class="token keyword">return</span> fresh    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//失败则去读缓存</span>        <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">await</span> caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token constant">CACHE_NAME</span><span class="token punctuation">)</span>        <span class="token comment">//缓存的内容</span>        <span class="token keyword">const</span> cached <span class="token operator">=</span> <span class="token keyword">await</span> cache<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>        <span class="token keyword">return</span> cached    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 缓存优先</span></code></pre><h4 id="Notification-api"><a href="#Notification-api" class="headerlink" title="Notification api"></a>Notification api</h4><p>Notification api的通知接口用于向用户配置和显示桌面通知</p><p>Notification .permission可以获取当前用户的授权情况<br>    Default：默认的，未授权<br>    Denied：拒绝的。如果拒绝，则无法再次请求授权，也无法获取弹框提醒<br>    Granted：授权的，可以弹窗提醒</p><p>通过Notification.requestPremission()可以请求用户授权</p><p>通过new Notification(‘title’,{body:’ ‘,icon:’ ‘})可以显示通知</p><p>在授权通过的情况下，可以在service worker中显示通知<br>self.registration.showNotification({‘你好’，{body:’msg})</p><p>如何在vue cli 配置，打包出来的 public，自动引入某个文件？</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'copy-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">patterns</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">&#123;</span>            <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">'path/to/your/file'</span><span class="token punctuation">,</span>            <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token string">'path/in/public/directory'</span><span class="token punctuation">,</span>            <span class="token literal-property property">toType</span><span class="token operator">:</span> <span class="token string">'dir'</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>将 <code>path/to/your/file</code> 替换为要自动复制到public目录的文件路径，<br>将 <code>path/in/public/directory</code> 替换为在public目录中要存储文件的路径。</p><p>注意：<code>CopyWebpackPlugin</code> 是一个Webpack插件</p>]]></content>
      
      
      <categories>
          
          <category> Web前端扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pinia</title>
      <link href="/star/2023/0720513.html"/>
      <url>/star/2023/0720513.html</url>
      
        <content type="html"><![CDATA[<h1 id="Pinia在Vue3的使用"><a href="#Pinia在Vue3的使用" class="headerlink" title="Pinia在Vue3的使用"></a>Pinia在Vue3的使用</h1><p>本篇文章主要是总结Pinia在Vue3的使用</p><span id="more"></span><h2 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h2><p>1.安装pinia    <code>npm i pinia</code></p><p>2.在main.js中按需导入<code>createPinia</code>，创建pinia，使用<code>pinia</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// #1</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createPinia <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token comment">// #2</span><span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// #3</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><p>3.创建仓库与使用</p><p>创建store文件夹，创建一个ts文件</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> computed<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">'仓库名字'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// state</span>  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment">// getters</span>  <span class="token keyword">const</span> doubleCount <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// mutation</span>  <span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> count<span class="token punctuation">.</span>value<span class="token operator">++</span>  <span class="token comment">//action</span>  <span class="token keyword">const</span> <span class="token function-variable function">asyncUpdate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      count<span class="token punctuation">.</span>value<span class="token operator">++</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> count<span class="token punctuation">,</span> doubleCount<span class="token punctuation">,</span> update<span class="token punctuation">,</span> asyncUpdate <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>4.使用数据</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> pinia名 <span class="token keyword">from</span> <span class="token string">'./stores/pinia路径'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> storeToRefs <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> count<span class="token punctuation">,</span> sum <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> doClick<span class="token punctuation">,</span> doClickSync <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>storeToRefs将pinia中的数据绑定成响应式</code></p><p><code>方法不需要进行绑定成响应式</code></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="center">Vuex</th><th align="center">Pinia</th></tr></thead><tbody><tr><td align="center">state</td><td align="center">ref和reactive创建的响应式数据</td></tr><tr><td align="center">getters</td><td align="center">computed创建的计算属性</td></tr><tr><td align="center">mutations和actions</td><td align="center">普通函数，同步异步均可</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3配合TypeScript的使用</title>
      <link href="/star/2023/0720512.html"/>
      <url>/star/2023/0720512.html</url>
      
        <content type="html"><![CDATA[<!-- ---abbrlink: 512title: Vue3配合TypeScript的使用tags: Vuecategories: Vueauther: 冷杨威data: '2021-04-08 22:27'password: lywcxyabstract: 这里有东西被加密了，需要输入密码查看哦。message: 您好，这里需要密码。wrong_pass_message: 抱歉，这个密码看着不太对，请再试试。wrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。--- --><h1 id="Vue3配合TypeScript的使用"><a href="#Vue3配合TypeScript的使用" class="headerlink" title="Vue3配合TypeScript的使用"></a>Vue3配合TypeScript的使用</h1><p>这篇文章主要总结了Vue3如何配合TypeScript使用</p><span id="more"></span><h2 id="一-defineProps-泛型函数"><a href="#一-defineProps-泛型函数" class="headerlink" title="一.defineProps&lt;&gt;() 泛型函数"></a>一.defineProps&lt;&gt;() 泛型函数</h2><h3 id="1-defineProps-泛型函数接收值"><a href="#1-defineProps-泛型函数接收值" class="headerlink" title="1.defineProps&lt;&gt;()泛型函数接收值"></a>1.defineProps&lt;&gt;()泛型函数接收值</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token generic-function"><span class="token function">defineProps</span> <span class="token generic class-name"><span class="token operator">&lt;</span> <span class="token punctuation">&#123;</span>        money<span class="token operator">:</span> <span class="token builtin">number</span>        car <span class="token operator">?</span> <span class="token operator">:</span> <span class="token builtin">string</span>    <span class="token punctuation">&#125;</span> <span class="token operator">></span></span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-使用withDefaults指定默认值"><a href="#2-使用withDefaults指定默认值" class="headerlink" title="2.使用withDefaults指定默认值"></a>2.使用withDefaults指定默认值</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">defineProps</span> <span class="token generic class-name"><span class="token operator">&lt;</span> <span class="token punctuation">&#123;</span>       money<span class="token operator">:</span> <span class="token builtin">number</span>       car <span class="token operator">?</span> <span class="token operator">:</span> <span class="token builtin">string</span>   <span class="token punctuation">&#125;</span> <span class="token operator">></span></span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>       car<span class="token operator">:</span> <span class="token string">'小黄车'</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="3-使用解构-defineProps响应式语法糖"><a href="#3-使用解构-defineProps响应式语法糖" class="headerlink" title="3.使用解构+defineProps响应式语法糖"></a>3.使用解构+defineProps响应式语法糖</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>      money<span class="token punctuation">,</span>      car <span class="token operator">=</span> <span class="token string">'小黄车'</span>  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">defineProps</span> <span class="token generic class-name"><span class="token operator">&lt;</span> <span class="token punctuation">&#123;</span>      money<span class="token operator">:</span> <span class="token builtin">number</span>      car <span class="token operator">?</span> <span class="token operator">:</span> <span class="token builtin">string</span>  <span class="token punctuation">&#125;</span> <span class="token operator">></span></span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>该写法需要在vite.config.js中添加以下配置</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>    defineConfig<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vite'</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span><span class="token comment">// https://vitejs.dev/config/</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            reactivityTransform<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="二-defineEmits-泛型函数"><a href="#二-defineEmits-泛型函数" class="headerlink" title="二.defineEmits&lt;&gt;() 泛型函数"></a>二.defineEmits&lt;&gt;() 泛型函数</h2><p>对于子传父时，在子组件中的传递数据时，数据类型检测的校验</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//e表示事件类型</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token generic-function"><span class="token function">defineEmits</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span>e<span class="token operator">:</span><span class="token string">'自定义的事件名'</span><span class="token punctuation">,</span>传播数据名<span class="token operator">:</span>传播数据类型<span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="三-ref-数据-泛型函数"><a href="#三-ref-数据-泛型函数" class="headerlink" title="三.ref&lt;数据类型&gt;(数据)   泛型函数"></a>三.ref&lt;数据类型&gt;(数据)   泛型函数</h2><p>指定ref中的数据类型</p><p>方式1：ref是一个内置的泛型函数，通过泛型函数指定数据类型</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>ref<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>cosnt m <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>方式2：通过Vue内置的泛型工具可以指定初始值的类型  <code>Ref</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Ref<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> m<span class="token operator">:</span>Ref<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><h2 id="四-reactive-数据-泛型函数"><a href="#四-reactive-数据-泛型函数" class="headerlink" title="四.reactive&lt;数据类型&gt;(数据)  泛型函数"></a>四.reactive&lt;数据类型&gt;(数据)  泛型函数</h2><p><code>（之前怎么用，现在就怎么用）</code></p><h2 id="五-computed-数据-泛型函数"><a href="#五-computed-数据-泛型函数" class="headerlink" title="五.computed&lt;数据类型&gt;(数据)  泛型函数"></a>五.computed&lt;数据类型&gt;(数据)  泛型函数</h2><p><code>（之前怎么用，现在就怎么用）</code></p><h2 id="六-如何获取事件对象e的类型"><a href="#六-如何获取事件对象e的类型" class="headerlink" title="六.如何获取事件对象e的类型"></a>六.如何获取事件对象<code>e</code>的类型</h2><p>通过<code>&lt;h1 @mousemove=&quot;e =&gt; hh&quot;&gt;获取面板位置&lt;/h1&gt;</code>的形式拿到<code>e</code>的事件类型</p><p>再通过<code>e: MouseEvent</code>指定他的类型</p><h2 id="七-ref-操作-DOM"><a href="#七-ref-操作-DOM" class="headerlink" title="七.ref 操作 DOM"></a>七.ref 操作 DOM</h2><p><code>!  非空断言，会排除掉undefined和null   </code></p><p><code>?  可选链接，表示前面不为undefined或null时，才会向后面取值</code></p><p><code>如何获取DOM类型？</code>  <strong>一定是原生标签</strong><br>例如：<code>const o = document.querySelector(&#39;img&#39;)</code>，这样能查看img类型</p><p><strong>示例：</strong></p><pre class="language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;pinia.vuejs.org&#x2F;logo.svg&quot; ref&#x3D;&quot;imgRef&quot; &#x2F;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123; ref, onMounted &#125; from &#39;vue&#39;const imgRef &#x3D; ref&lt;HTMLImageElement | null&gt;(null)onMounted(() &#x3D;&gt; &#123;  console.log(imgRef.value?.src)&#125;),&lt;&#x2F;script&gt;</code></pre><h2 id="八-ref-操作组件"><a href="#八-ref-操作组件" class="headerlink" title="八.ref 操作组件"></a>八.ref 操作组件</h2><p><code>如何获取组件类型？</code>  一定是组件标签，不能使用在原生标签</p><p><code>InstanceType</code>是vue3内置的泛型工具   首字母大写</p><p>语法：<code>InstanceType&lt;typeof Children&gt;</code></p><p>例如：<code>const childCmp = ref&lt;InstanceType&lt;typeof Children&gt; | null&gt;(null)</code></p><p><code>示例：</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>section<span class="token operator">></span>      <span class="token operator">&lt;</span>h3<span class="token operator">></span>App<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>      <span class="token operator">&lt;</span>button <span class="token decorator"><span class="token at operator">@</span><span class="token function">click</span></span><span class="token operator">=</span><span class="token string">"handleClick"</span><span class="token operator">></span>click<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Children ref<span class="token operator">=</span><span class="token string">"childCmp"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Children <span class="token keyword">from</span> <span class="token string">'./Children.vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> childCmp <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> Children<span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  childCmp<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="九-！和-？"><a href="#九-！和-？" class="headerlink" title="九. ！和 ？"></a>九. ！和 ？</h2><p><code>！和 ？</code>取值的时候，一般可以通用</p><p><code>！和 ？</code>赋值的时候，一般用<code>!</code></p><h2 id="十-TS-类型声明文件"><a href="#十-TS-类型声明文件" class="headerlink" title="十.TS 类型声明文件"></a>十.TS 类型声明文件</h2><p><code>.ts</code> 文件。</p><ul><li>既包含类型信息又可执行代码，可以被编译为 <code>.js</code> 文件，然后，执行代码。</li><li>用途：编写程序代码的地方。</li></ul><p><code>.d.ts</code> 文件。</p><ul><li><code>只包含类型信息</code>的类型声明文件，专门为 JS 提供类型信息。</li><li>类型声明文件不会生成 <code>.js</code> 文件，仅用于提供类型信息，<br>在 <code>.d.ts</code> 文件中不允许出现可执行的 JS 代码，只用于提供类型。</li></ul><p>总结：.ts 是 <code>implementation</code> （代码实现文件）；<br> <code>.d.ts</code> 是 declaration（类型声明文件），如果要为已有的 JS 库提供类型信息，可以使用 <code>.d.ts</code> 文件。</p><h3 id="自定义的类型声明"><a href="#自定义的类型声明" class="headerlink" title="自定义的类型声明"></a>自定义的类型声明</h3><p> <strong>如果多个 Vue 文件中都用到同一个类型，此时可以创建 <code>.d.ts</code> 文件提供该类型，实现类型共享。</strong></p><p>1.创建 <code>src/types/data.d.ts</code> 类型声明文件。</p><p>2.创建需要共享的类型，并使用 export 导出（TS 中的类型也可以使用 import&#x2F;export 实现模块化功能）。</p><p>3.在需要使用共享类型的 Vue 文件中，通过 import 导入即可（<code>.d.ts</code> 后缀导入时，直接省略）。</p><p><strong>如何为已有 JS 文件提供类型声明？</strong></p><p>说明：TS 项目中也可以使用 <code>.js</code> 文件，在导入 <code>.js</code> 文件时，<br>TS 会自动加载与 <code>.js</code> 同名的 <code>.d.ts</code> 文件，以提供类型声明。</p><p><code>declare</code> 关键字，用于类型声明，为 <code>.js</code> 文件中已存在的变量声明类型，<br>而不是创建一个新的变量。</p><p>1.对于 type、interface 等这些明确就是 TS 类型的（只能在 TS 中使用的），<br>可以省略 <code>declare </code>关键字。</p><p>2.对于 let、function 等具有双重含义（在 JS、TS 中都能用），<br>应该使用 declare，明确指定此处是类型声明。</p><h2 id="十一-Axios-配合TS"><a href="#十一-Axios-配合TS" class="headerlink" title="十一. Axios 配合TS"></a>十一. Axios 配合TS</h2><p>语法：<code>axios.get&lt;类型&lt;&#123;数据：类型&#125;&gt;()</code></p><p>axios.get 的第一个泛型参数可以控制res.data的类型</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/star/2023/0720511.html"/>
      <url>/star/2023/0720511.html</url>
      
        <content type="html"><![CDATA[<!-- ---abbrlink: 511title: TypeScripttags: TypeScriptcategories: TypeScriptauther: 冷杨威data: '2021-04-08 22:27'password: lywcxyabstract: 这里有东西被加密了，需要输入密码查看哦。message: 您好，这里需要密码。wrong_pass_message: 抱歉，这个密码看着不太对，请再试试。wrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。--- --><h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><p>这篇文章主要总结了TypeScript</p><span id="more"></span><h2 id="一-TypeScript-概述"><a href="#一-TypeScript-概述" class="headerlink" title="一.TypeScript 概述"></a>一.<code>TypeScript</code> 概述</h2><p><strong>是什么？</strong>：<code>TS</code>是微软开发的编程语言，他是<code>JS</code>的超集，可以在任何运行JS的地方运行<br><a href="https://www.typescriptlang.org/">官方文档</a>，<a href="https://www.tslang.cn/">中文文档</a></p><p><code>TypeScript</code> &#x3D; <code>Type</code> + <code>JavaScript</code>（在 <code>JS </code>基础之上，为 <code>JS </code>添加了类型支持&#x2F;类型检测）</p><h3 id="1-优势："><a href="#1-优势：" class="headerlink" title="1.优势："></a>1.优势：</h3><p><strong>背景：</strong><br><code>JS</code>是弱类型语言，而在代码中很多错误都是类型错误,<br>他不像其他强类型语言一样有类型检测，比如<code>JAVA</code>,因此出现了<code>TS</code></p><p>1.发现错误的时机更早，即TS在编译时，即代码执行前就会出现类型检测</p><p>2.代码提示，<code>JS</code>代码没有代码提示，需要插件才能支持代码提示</p><p>3.支持最新的<code>ECMAScript语法</code></p><p>4.<code>Vue3</code>源码使用TS重写，React 也与 TS 完美配合</p><h3 id="2-安装并编译TS"><a href="#2-安装并编译TS" class="headerlink" title="2.安装并编译TS"></a>2.安装并编译<code>TS</code></h3><pre class="language-none"><code class="language-none">1.安装命令：npm i -g typescript 或者 yarn global add typescript2.验证是否安装成功：tsc –v（查看 TypeScript 的版本）3.创建 hello.ts 文件（注意：TS 文件的后缀名为 .ts）。4.将 TS 编译为 JS：在终端中输入命令，tsc hello.ts（此时，在同级目录中会出现一个同名的 JS 文件）。5.执行 JS 代码：在终端中输入命令，node hello.js。说明：所有合法的 JS 代码都是 TS 代码，有 JS 基础只需要学习 TS 的类型即可。注意：由 TS 编译生成的是 JS 文件，生成的代码中就没有类型相关的信息了。</code></pre><h3 id="3-创建Vue-TS项目"><a href="#3-创建Vue-TS项目" class="headerlink" title="3.创建Vue TS项目"></a>3.<code>创建Vue TS项目</code></h3><p>在基于 Vite 的项目中可以直接验证 TS 代码结果，因为已经配置好了 TS 环境。</p><pre class="language-none"><code class="language-none"># npm 6.xnpm create vite@latest my-vue-ts-app --template vue-ts# npm 7+, extra double-dash is needed:npm create vite@latest my-vue-ts-app -- --template vue-ts# yarnyarn create vite my-vue-ts-app --template vue-ts# pnpmpnpm create vite my-vue-ts-app --template vue-ts</code></pre><h2 id="二-TS基础"><a href="#二-TS基础" class="headerlink" title="二.TS基础"></a>二.TS基础</h2><h3 id="1-原始类型"><a href="#1-原始类型" class="headerlink" title="1.原始类型"></a>1.原始类型</h3><p>语法：<code>const 变量名：数据类型 = 与数据类型匹配的值</code></p><p><code>与数据类型匹配的值</code>的意思时，比如数据类型写的数字，那么你的值必须写数字</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'龚贤龙'</span><span class="token keyword">const</span> b<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">const</span> u<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token keyword">const</span> n<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token comment">//const big:bigint = 888888888888888n</span><span class="token comment">//console.log(big)</span><span class="token keyword">const</span> sym<span class="token operator">:</span> <span class="token builtin">symbol</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-数组类型"><a href="#2-数组类型" class="headerlink" title="2.数组类型"></a>2.数组类型</h3><p>语法1：<code>const 变量名: Array&lt;number&gt; = [ 1, 2, 3 ]</code></p><p>语法2：<code>const 变量名: number[] = [ 1, 2, 3, 4 ]</code></p><p><code>这两句代码表示该变量现在为数字组成的数组</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> list<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token keyword">const</span> list1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">]</span></code></pre><h3 id="3-联合类型"><a href="#3-联合类型" class="headerlink" title="3.联合类型"></a>3.联合类型</h3><p>语法：<code>const 变量名: (number | string)[] = [ 1, 2, &#39;3&#39;, &#39;4&#39; ]</code></p><p><code>这句代码表示该变量限制类型为数字和字符串组成的数组</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> arr<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span> <span class="token punctuation">]</span><span class="token keyword">const</span> arr1<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span> <span class="token punctuation">]</span></code></pre><h3 id="4-类型别名"><a href="#4-类型别名" class="headerlink" title="4.类型别名"></a>4.类型别名</h3><p>语法：<code>type 类型别名 = 数据类型</code><br>let 变量名 ：类型别名 &#x3D; 数据</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">uname</span> <span class="token operator">=</span> String<span class="token keyword">let</span> zname<span class="token operator">:</span> uname <span class="token operator">=</span> <span class="token string">'龚贤龙'</span><span class="token keyword">type</span> <span class="token class-name">arr2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">const</span> arr3<span class="token operator">:</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'gh'</span><span class="token punctuation">,</span> <span class="token string">'sf'</span> <span class="token punctuation">]</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span></code></pre><h3 id="5-函数类型"><a href="#5-函数类型" class="headerlink" title="5.函数类型"></a>5.函数类型</h3><p><code>函数如果不指定返回值，默认void类型</code><br><code>主要是分别指定参数与返回值的类型</code></p><h4 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//普通函数声明</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> num2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">&#125;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//函数表达式</span><span class="token keyword">const</span> sum1 <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> num2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">&#125;</span><span class="token function">sum1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span></code></pre><h4 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//同时指定参数与返回值，只适用于函数表达式</span><span class="token keyword">type</span> <span class="token class-name">TFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> num2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token keyword">const</span> sum3<span class="token operator">:</span> <span class="token function-variable function">TFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">&#125;</span><span class="token function">sum3</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span></code></pre><h3 id="6-void类型"><a href="#6-void类型" class="headerlink" title="6.void类型"></a>6.void类型</h3><p>作用：<code>当一个函数没有给他的返回值指定类型时，它默认是void类型</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="7-可选参数"><a href="#7-可选参数" class="headerlink" title="7. ? 可选参数"></a>7. ? 可选参数</h3><p>注意1：<code>可选参数必须放在必选参数后面</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> end<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>注意2：<code>数组默认参数 不能和可选参数一起使用</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">slice1</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> end<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token function">slice1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">slice1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">slice1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><h3 id="8-对象类型指明参数类型"><a href="#8-对象类型指明参数类型" class="headerlink" title="8.对象类型指明参数类型"></a>8.对象类型指明参数类型</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> obj<span class="token operator">:</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'龚贤龙'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">&#125;</span></code></pre><p><strong>或者</strong></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'龚贤龙'</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj<span class="token operator">:</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o </code></pre><h3 id="9-interface接口与extends继承"><a href="#9-interface接口与extends继承" class="headerlink" title="9.interface接口与extends继承"></a>9.interface接口与extends继承</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Point2D</span> <span class="token punctuation">&#123;</span>    x<span class="token operator">:</span> <span class="token builtin">number</span>    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用 `extends`（继承）关键字实现了接口 Point3D 继承 Point2D</span><span class="token comment">// 继承后，Point3D 就有了 Point2D 的所有属性和方法（此时，Point3D 同时有 x、y、z 三个属性）</span><span class="token keyword">interface</span> <span class="token class-name">Point3D</span> <span class="token keyword">extends</span> <span class="token class-name">Point2D</span> <span class="token punctuation">&#123;</span>    z<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span></code></pre><h3 id="10-interface与type"><a href="#10-interface与type" class="headerlink" title="10.interface与type"></a>10.interface与type</h3><p><strong>相同点：</strong><br>1.都可以描述对象和函数<br>2.都可以进行类型扩展，但语法不一样</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//interface用的extends</span><span class="token comment">//type用的&amp;符号，形成的叫交叉类型</span></code></pre><p><strong>不同点：</strong><br>1.<code>type</code>可以描述任意类型，interface做不到<br>2.相同的interface会合并，相同的type会报错</p><p><strong>总结</strong><br>一般用于<code>interface</code>描述对象，用<code>type</code>来描述类型之间的关系</p><h3 id="11-字面量类型"><a href="#11-字面量类型" class="headerlink" title="11.字面量类型"></a>11.字面量类型</h3><p>字面量类型往往配合联合类型一起使用</p><p>使用场景：用来表示一组明确的可选值列表，比如在贪吃蛇游戏中，<br>游戏方向的值只能是上、下、左、右中的一个。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Direction</span> <span class="token operator">=</span> <span class="token string">'up'</span> <span class="token operator">|</span> <span class="token string">'down'</span> <span class="token operator">|</span> <span class="token string">'left'</span> <span class="token operator">|</span> <span class="token string">'right'</span><span class="token keyword">function</span> <span class="token function">changeDirection</span><span class="token punctuation">(</span>direction<span class="token operator">:</span> Direction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>direction<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">changeDirection</span><span class="token punctuation">(</span><span class="token string">'up'</span><span class="token punctuation">)</span> <span class="token comment">// 调用函数时，会有类型提示</span></code></pre><p>解释：参数<code>direction</code>的值只能是 <code>up/down/left/right </code>中的任意一个。</p><p>优势：<strong>相比于 string 类型，使用字面量类型更加精确、严谨</strong>。</p><h3 id="12-类型断言-as"><a href="#12-类型断言-as" class="headerlink" title="12.类型断言   as"></a>12.类型断言   <code>as</code></h3><p>往往把一个宽泛的类型断言为一个更加具体的类型，为使用这个更加具体的属性和方法</p><p>语法1：<code>const oLink = document.getElementById(&#39;link&#39;) as HTMLAnchorElement</code></p><p>语法2：<code>const oLink = &lt;HTMLAnchorElement&gt;document.getElementById(&#39;link&#39;)</code></p><p>第二种语法了解即可</p><h3 id="13-特殊类型-any-unknown-never"><a href="#13-特殊类型-any-unknown-never" class="headerlink" title="13.特殊类型    any/unknown/never"></a>13.特殊类型    <code>any/unknown/never</code></h3><p>1.<code>unknown</code>是更加安全的<code>any</code>类型（有一些可能导致程序的报错的操作会提示出来）</p><p>2.任何类型都可以给any，<code>any</code>也可以给任何类型</p><p>3.任何类型都可以给<code>unknown</code>，<code>unknown</code>只能给<code>unknown</code>和<code>any</code></p><p>4.<code>unknown</code>一般配合类型收窄一起使用（<code>typeof</code> 可以类型收窄，as断言可以类型收窄）</p><p>5.<code>never</code>不可能实现的类型</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Test</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token comment">// 也可以当做函数的返回值，表示不会执行到头</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="三-TS泛型"><a href="#三-TS泛型" class="headerlink" title="三.TS泛型"></a>三.TS泛型</h2><h3 id="1-泛型别名"><a href="#1-泛型别名" class="headerlink" title="1.泛型别名"></a>1.泛型别名</h3><p>定义类型别名后，加上 <code>&lt;类型参数&gt;</code> 就是泛型别名语法，<br>使用的时候传入具体的类型即可，然后类型别名内就可以使用这个类型参数。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 对后台返回的数据进行类型定义</span><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">Goods</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    goodsName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">Data<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    code<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用类型</span><span class="token keyword">type</span> <span class="token class-name">UserData</span> <span class="token operator">=</span> Data<span class="token operator">&lt;</span>User<span class="token operator">></span>   <span class="token comment">//把user作为参数传递给T</span><span class="token keyword">type</span> <span class="token class-name">GoodsData</span> <span class="token operator">=</span> Data<span class="token operator">&lt;</span>Goods<span class="token operator">></span>   <span class="token comment">//把goods作为参数传递给T</span></code></pre><h3 id="2-泛型接口"><a href="#2-泛型接口" class="headerlink" title="2.泛型接口"></a>2.泛型接口</h3><p>接口也可以配合泛型来使用，以增加其灵活性，增强其复用性</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">User<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token constant">T</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> user<span class="token operator">:</span> User<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'ifer'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//数组泛型接口的实现</span><span class="token comment">// 这其实也是通过泛型接口的形式来定义的数组类型</span><span class="token keyword">const</span> arr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">// 模拟实现</span><span class="token keyword">interface</span> <span class="token class-name">IArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 索引签名</span>    <span class="token comment">// 只要是 number 类型的键都可以出现在数组中，或者说数组中可以有任意多个元素</span>    <span class="token comment">// 同时也符合数组索引是 number 类型这一前提</span>    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> arr<span class="token operator">:</span> IArray<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span></code></pre><h3 id="3-泛型函数"><a href="#3-泛型函数" class="headerlink" title="3.泛型函数"></a>3.泛型函数</h3><p>定义时宽泛、不确定的类型，需要使用者去主动传入</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">id</span><span class="token generic class-name"><span class="token operator">&lt;</span>Type<span class="token operator">></span></span></span><span class="token punctuation">(</span>value<span class="token operator">:</span> Type<span class="token punctuation">)</span><span class="token operator">:</span> Type <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value<span class="token punctuation">&#125;</span><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token generic-function"><span class="token function">id</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token generic-function"><span class="token function">id</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment">//就是把&lt;number>传给&lt;type></span><span class="token comment">//简化</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 省略 &lt;number> 调用函数</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment">// 省略 &lt;string> 调用函数</span></code></pre><h3 id="4-泛型工具"><a href="#4-泛型工具" class="headerlink" title="4.泛型工具"></a>4.泛型工具</h3><h4 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a><code>Partial</code></h4><p>作用：都变为可选，加上？</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Props</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token builtin">string</span>    children<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">PartialProps</span> <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>Props<span class="token operator">></span>     <span class="token comment">//Partial 可选</span></code></pre><h4 id="Required"><a href="#Required" class="headerlink" title="Required"></a><code>Required</code></h4><p>作用：都变为必选，去掉？</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Props</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    id<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>    children<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">PartialProps</span> <span class="token operator">=</span> Required<span class="token operator">&lt;</span>Props<span class="token operator">></span>     <span class="token comment">//Requored 必选</span></code></pre><h4 id="ReadOnly"><a href="#ReadOnly" class="headerlink" title="ReadOnly"></a><code>ReadOnly</code></h4><p>作用：变为只读</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Props</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token builtin">string</span>    children<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">ReadonlyProps</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Props<span class="token operator">></span>   <span class="token comment">//Readonly 只读</span><span class="token keyword">let</span> props<span class="token operator">:</span> ReadonlyProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>props<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'2'</span> <span class="token comment">//此时的props.id = '2'是无法将id改为2的，因为设置了只读的泛型工具，只允许你读取，无法修改</span></code></pre><h4 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a><code>Pick</code></h4><p>作用：选择一组属性构造新类型，过滤掉不使用的属性</p><p>两个变量：1.表示选择谁的属性，2.表示选择哪几个属性</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token builtin">string</span>    title<span class="token operator">:</span> <span class="token builtin">string</span>    children<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">// 摘出 id 和 title</span><span class="token keyword">type</span> <span class="token class-name">PickProps</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Props<span class="token punctuation">,</span> <span class="token string">'id'</span> <span class="token operator">|</span> <span class="token string">'title'</span><span class="token operator">></span></code></pre><h4 id="Omit"><a href="#Omit" class="headerlink" title="Omit"></a><code>Omit</code></h4><p>作用：与pick相反，过滤掉选择的属性，使用不选择的属性</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 排除 id 和 title</span><span class="token keyword">type</span> <span class="token class-name">OmitProps</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>Props<span class="token punctuation">,</span> <span class="token string">'id'</span> <span class="token operator">|</span> <span class="token string">'title'</span><span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Cli脚手架</title>
      <link href="/star/2023/072055.html"/>
      <url>/star/2023/072055.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue-cli脚手架"><a href="#Vue-cli脚手架" class="headerlink" title="Vue-cli脚手架"></a>Vue-cli脚手架</h3><p><code>这篇总结主要介绍Vue-Cli脚手架</code></p><span id="more"></span><p><strong>概念:</strong><br>1.<code>vue-cli </code>:  组件化开发工具，底层基于<code>webpack</code><br>2.脚手架 :  规范的<code>vue</code>项目目录</p><p><code>如何创建一个vue?</code>:<code>vue create 项目名称</code><br><strong>脚手架目录</strong></p><pre class="language-none"><code class="language-none">node_modules : 第三方包资源文件publicfavicon.ico : 网站图标index.html : 网站首页srcassets: 静态资源(图片)logo.pngcomponents: 组件App.vue :  根组件main.js :  入口文件.gitignore:  git忽略文件babel.config.js :  js版本降级package.json :  依赖包列表+版本README.md : 项目说明文件package-lock.json : 包下载地址vue.config.js : 项目webpack配置</code></pre><p>​</p><h4 id="1-组件"><a href="#1-组件" class="headerlink" title="1.组件"></a>1.组件</h4><p>是什么 ?</p><pre class="language-none"><code class="language-none">1.HTML :  自定义标签2.文件 ：  .vue文件3.内存 ： vue实例对象4.页面：  盒子</code></pre><p><strong>组件作用</strong> : <code>盒子复用</code></p><p><strong>组件三要素</strong></p><pre class="language-none"><code class="language-none">HTML结构:  &lt;template&gt;js代码:  &lt;script&gt;css样式:  &lt;style&gt;</code></pre><h4 id="2-脚手架流程"><a href="#2-脚手架流程" class="headerlink" title="2.脚手架流程"></a>2.脚手架流程</h4><pre class="language-none"><code class="language-none">(0)创建项目： vue create 项目名称(1)关闭eslint ( 代码规范检查)   LintOnSave:false(2)删除欢迎页面   删除 components&#x2F;HelloWorld.vue   清空App.vue代码(3)运行项目： 根目录  npm run serve(4)掌握vue调试技巧   数据  dev tools 工具   方法 debugger</code></pre><h4 id="3-组件注册"><a href="#3-组件注册" class="headerlink" title="3.组件注册"></a>3.组件注册</h4><p>局部组件：<strong>在哪里导入，只能在哪里使用</strong></p><pre class="language-none"><code class="language-none">1.导入组件：  import 组件名 from &quot;组件路径&quot;2. 注册组件:  components : &#123; 组件名 &#125;3. 使用组件: &lt;子组件&gt;&lt;&#x2F;子组件&gt;    全局组件：main.js 导入，任何.vue文件可以用    1.导入组件 ：  import 组件名 from &quot;组件路径&quot;    2.注册组件: Vue.component( &#39;标签名&#39; , 组件名)    这行代码底层原理是把组件放入Vue.prototype 中4. 使用组件: &lt;子组件&gt;&lt;&#x2F;子组件&gt;</code></pre><h4 id="组件css作用域：scoped"><a href="#组件css作用域：scoped" class="headerlink" title="组件css作用域：scoped"></a>组件css作用域：scoped</h4><p>1.<code>scoped</code>作用： 设置子组件css作用域，避免子组件样式被父组件覆盖<br>2.<code>scoped</code>原理： 给子组件添加自定义属性<code>data-v-xxxx </code>, 通过属性选择器增加<code>css</code>权重</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this</title>
      <link href="/star/2023/072036.html"/>
      <url>/star/2023/072036.html</url>
      
        <content type="html"><![CDATA[<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p><code>这篇总结主要讲解了this指向与如何修改</code></p><span id="more"></span><h4 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h4><pre class="language-none"><code class="language-none">1.普通函数                指向window2.对象的方法              该方法所属对象3.构造函数                实例对象4.事件绑定函数            绑定事件的对象5.定时器函数              指向window6.立即执行函数            指向window</code></pre><h4 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a>函数上下文</h4><p>局部变量+this指向<br><code>默认情况下，函数内部的this是由调用决定的。无法修改</code><br><strong>解决办法</strong>：<code>函数上下文进行修改</code></p><p><strong>call</strong><br>语法：<code>函数名.call(this指向谁,实参1，实参2......)</code><br>应用场景：万能数据类型检测</p><p>1.typeof 数据 : 有两种数据类型无法检测<br>null和数组无法检测,结果都是 ‘object’<br>2.解决方案:万能数据类型检测<br>Object.prototype.toString.call(数据)</p><p>数组原型的toString是转字符串的<br>Object原型的toString是检测数据类型的</p><p><strong>apply</strong><br>函数名.apply(this指向谁, 数组或伪数组 )<br>apply会自动帮你遍历数组，然后按照顺序逐一传参<br>函数名.apply(this指向谁, [实参1，实参2…..])<br><strong>bind</strong><br><strong>语法：</strong><code>函数名.bind(this指向谁)</code><br>bind不会立即执行函数,而是返回一个修改this之后的新函数<br><strong>场景：</strong>一般用于修改不需要立即执行的函数，例如：定时器，事件处理函数</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git工作该如何处理？</title>
      <link href="/star/2023/07203295.html"/>
      <url>/star/2023/07203295.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git工作该如何处理？"><a href="#Git工作该如何处理？" class="headerlink" title="Git工作该如何处理？"></a>Git工作该如何处理？</h1><p><code>该文章主要总结了工作中常见的git问题，以及如何解决？</code></p><span id="more"></span><p>本地有一份代码，如何团队协作开发。</p><p><code>master</code>（主分支，项目上线的时候用的）、<code>release</code>（测试分支）、<code>develop</code>（开发分支，并不是让你直接在这个分支写代码，而是一般基于此分支再开一个自己的功能分支，真正写代码的时候，每个人都在自己的功能分支上面写，写完之后再合并到此 develop 分支）、<code>feature/news</code>（自己的功能分支）。</p><p>1、<code>项目经理</code>在 <code>Gitlab</code> 新建一个仓库。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 初始化仓库</span><span class="token function">git</span> init<span class="token comment"># 添加远程仓库地址</span><span class="token function">git</span> remote <span class="token function">add</span> origin 远程仓库地址 <span class="token comment"># 查看添加的远程仓库地址</span><span class="token function">git</span> remote <span class="token parameter variable">-v</span>  <span class="token comment"># 添加到暂存区</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token comment"># 本地提交</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">'init'</span><span class="token comment"># 第一次加 -u，后续在此分支推送的时候，直接 git push 即可</span><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master <span class="token comment"># 创建并切换到 release 测试分支</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> release <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin release<span class="token comment"># 创建并切换到 develop 开发分支</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> develop <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin develop</code></pre><p>2、组员操作。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 你刚到公司，会给你 Gitlab 的邮箱和用户名，仓库地址，你需要克隆下来。</span><span class="token comment"># 配置一下系统的 Git 用户名</span><span class="token comment"># git config --global user.name 老大给的账号 </span><span class="token comment"># 配置一下系统的 Git 邮箱</span><span class="token comment"># git config --global user.email 老大给的邮箱 </span><span class="token function">git</span> clone 老大给的地址 <span class="token comment"># 默认克隆下来的是主分支</span> <span class="token comment"># 如果本地有 release 就切换到本地的 release，</span> <span class="token comment">#如果本地没有就拉取远端的 release 并切换到 release</span><span class="token function">git</span> checkout release <span class="token comment"># 如果本地有 develop 就切换到本地的 develop，</span> <span class="token comment">#如果本地没有就拉取远端的 develop 并切换到 develop</span><span class="token function">git</span> checkout develop<span class="token comment"># 假如老大给你布置了一个任务，开发新闻模块</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature/news <span class="token comment"># 创建并切换到 feature/news 分支</span><span class="token comment"># 在自己的功能分支写代码，写呀写...</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">'feat: news 列表'</span><span class="token comment"># 保证先处于 develop，因为待会要把自己的功能分支合并到这儿</span><span class="token function">git</span> checkout develop <span class="token function">git</span> pull <span class="token comment"># 建议最好先拉取一下 develop 的代码，因为同事可能提交了</span><span class="token function">git</span> merge feature/news<span class="token function">git</span> push <span class="token comment"># git push -u origin develop</span></code></pre><p>3、怎么测试？怎么打包上线？</p><p>测试：<code>自测（自己认知范围内，到处点一点，保证自己的功能没有问题）</code>、专门的测试人员去测；</p><p>一般会有项目经理（前端老大）做如下操作。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout develop <span class="token comment"># 先处于 develop</span><span class="token function">git</span> pull <span class="token comment"># 拉取所有人的代码</span><span class="token function">git</span> checkout release <span class="token comment"># 切换到测试分支</span><span class="token comment"># 通知测试人员：代码写好了，可以测试了</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> hotfix/news <span class="token comment"># 开了一个专门的 Bug 分支</span><span class="token comment"># 解 Bug ...</span><span class="token comment"># 假如 release 我没有权限</span><span class="token comment"># git push origin hotfix/news # 推到远端，告知老大已解决</span><span class="token comment"># 假如 release 经过测试也没问题，老大合并到 master</span><span class="token function">git</span> checkout master<span class="token function">git</span> merge release<span class="token comment"># 生成 dist 文件，交给后台人员去部署（一般用的是 Nginx）</span><span class="token function">npm</span> run build</code></pre><p>4、自己的代码刚写一半，老大通知我其他分支有一个紧急的需求&#x2F;Bug 要我去处理，应该怎么办呢？</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash <span class="token comment"># 在自己的功能分支，暂存一下没有写完的代码</span><span class="token comment"># 切换到其他分支去解 Bug 吧，完事之后再回到曾经的功能分支</span><span class="token function">git</span> checkout feature/user<span class="token function">git</span> stash apply <span class="token comment"># 应用曾经暂存的代码，接着开发</span></code></pre><p>5.自己写好了代码，如何再次与远程仓库建立连接？</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin 远程仓库地址 </code></pre><p>6.报错了该如何处理？<br>报错很正常，有很多种原因会造成报错，你看不到报错信息又该怎么办？<br>复制报错信息到百度，前三篇文章必定解决你的问题<br>如果实在不行，利用科学上网？不会？后面会详细写一篇关于科学上网的文章<br>科学上网也不行？这个时候，你赶紧跟你组长说，别拖了项目进度，到时候拖了，那么你就是背锅侠!!!</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html</title>
      <link href="/star/2023/07201.html"/>
      <url>/star/2023/07201.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p><code>HTML这篇笔记是关于html的一些语法，它包含了对html的认知与使用</code></p><span id="more"></span> <h2 id="一-html基础认知"><a href="#一-html基础认知" class="headerlink" title="一.html基础认知"></a>一.html基础认知</h2><p><strong>1.什么是html</strong>：他是超文本标记语言<br><strong>2.web标准三大组成部分？</strong>：结构html,表现css,行为js<br><strong>3.html注释</strong>：<code>&lt;!--  --&gt;</code>或者快捷键：Ctrl+&#x2F;<br><strong>4.注释的作用</strong>：用于解释说明标签的描述信息</p><h2 id="二-html标签"><a href="#二-html标签" class="headerlink" title="二.html标签"></a>二.html标签</h2><p>标签构成：<strong>双标签</strong>和<strong>单标签</strong></p><p>标签与标签的关系：<br>1.父子(嵌套):<code>&lt;head&gt;</code>与<code>&lt;title&gt;</code>的关系<br>2.兄弟(并列):<code>&lt;head&gt;</code>与<code>&lt;body&gt;</code>的关系</p><h3 id="html标签学习"><a href="#html标签学习" class="headerlink" title="html标签学习"></a>html标签学习</h3><h4 id="1-1-排版标签"><a href="#1-1-排版标签" class="headerlink" title="1.1 排版标签"></a>1.1 排版标签</h4><p><strong>标题标签</strong>：<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code><br>特点：1.文字加粗变大，h1文字最大，依次递减,，2.独占一行<br><strong>段落标签</strong>：<code>&lt;p&gt;&lt;/p&gt;</code><br>特点：1.独占一行，2.文字多时浏览器会自动换行</p><p><strong>换行标签</strong>：<code>&lt;br&gt;</code><br>特点：1.单标签，2.让文字强制换行<br><strong>水平线标签</strong>：<code>&lt;hr&gt;</code><br>特点：1.单标签，2.在页面中显示一条水平线</p><h4 id="1-2-文本格式化标签"><a href="#1-2-文本格式化标签" class="headerlink" title="1.2 文本格式化标签"></a>1.2 文本格式化标签</h4><p><strong>标签名</strong>：</p><p>1.<code>&lt;b&gt;</code>和<code>&lt;strong&gt;</code>             加粗<br>2.<code>&lt;u&gt;</code>和<code>&lt;ins&gt;</code>                   下划线<br>3.<code>&lt;i&gt;</code>和<code>&lt;em&gt;</code>                      倾斜<br>4.<code>&lt;s&gt;</code>和<code>&lt;del&gt;</code>                    删除线</p><p><strong>特点</strong>：标签内容会在一行显示</p><h4 id="1-3标签的属性"><a href="#1-3标签的属性" class="headerlink" title="1.3标签的属性"></a>1.3标签的属性</h4><p>&lt;开始标签  属性名&#x3D;’属性值’&gt;&lt;&#x2F;结束标签&gt;<br><strong>注意点</strong>：</p><p>1.标签的属性写在开始标签的内部<br>2.允许存在多个属性<br>3.属性之间空格隔开<br>4.标签名与属性之间必须用空格隔开<br>5.属性之间没有顺序之分</p><h4 id="1-4媒体标签"><a href="#1-4媒体标签" class="headerlink" title="1.4媒体标签"></a>1.4媒体标签</h4><p><strong>img图片标签</strong>：<code>&lt;img&gt;</code></p><p>1.src用于显示图片，值是图片路径<br>2.alt替换文本，图片加载失败时才会显示对应的文字信息<br>3.title鼠标悬停在图片上面时显示的文字信息</p><h4 id="1-5路径"><a href="#1-5路径" class="headerlink" title="1.5路径"></a>1.5路径</h4><p>1.绝对路径(不常用)：指目录下的绝对位置，可直接达到目标位置，通常以盘符开始的路径</p><pre class="language-none"><code class="language-none">例如1:D:&#x2F;1666&#x2F;777例如2:完整的网络地址</code></pre><p>2.相对路径：从当前文件开始出发找目标文件的过程</p><pre class="language-none"><code class="language-none">同级目录:  .&#x2F;上级目录:  ..&#x2F;下级目录:  &#x2F;</code></pre><h4 id="1-6音频与视频"><a href="#1-6音频与视频" class="headerlink" title="1.6音频与视频"></a>1.6音频与视频</h4><p><strong>音频标签</strong>：<code>&lt; audio&gt;</code><br>常见属性：</p><pre class="language-none"><code class="language-none">src        路径controls   显示播放的控件autoplay   自动播放loop       循环播放muted      静音播放</code></pre><p> <strong>视频标签</strong>：<code>&lt; video&gt;</code><br>常见属性：</p><pre class="language-none"><code class="language-none">src        路径controls   显示播放的控件autoplay   自动播放  配合muted静音播放loop       循环播放muted      静音播放poster&#x3D;” “ 加载等待的画面图片</code></pre><p><strong>a标签</strong>：<code>&lt;a href=&#39;&#39;&gt;内容&lt;a&gt;</code><br>常见属性：</p><pre class="language-none"><code class="language-none">href   跳转路径target 设置目标链接的打开方式,两种值：_self,_blank_self  默认值_blank 新窗口打开 不会覆盖原网页</code></pre><p><strong>空链接</strong> ：<code>&lt;a href=&#39;#&#39;&gt;内容&lt;a&gt;</code></p><h4 id="1-7列表标签"><a href="#1-7列表标签" class="headerlink" title="1.7列表标签"></a>1.7列表标签</h4><p><strong>无序列表</strong>：<code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code>         <strong>并列关系,无顺序之分</strong><br><strong>有序列表</strong>：<code>&lt;ol&gt;&lt;li&gt;&lt;/li&gt;&lt;/ol&gt;</code>          <strong>有顺序之分，主要用于排名</strong><br><strong>自定义列表</strong>： 一般用于网页底部，  简单理解就是一个大哥带着几个小弟，dl是自定义列表的框架，dt是大哥，dd是小弟<br><code>&lt;dl&gt;     &lt;dt&gt;我是大哥&lt;/dt&gt;     &lt;dd&gt;我是小弟1号&lt;/dd&gt;     &lt;dd&gt;我是小弟2号&lt;/dd&gt;  &lt;/dl&gt;</code></p><h4 id="1-8表格标签"><a href="#1-8表格标签" class="headerlink" title="1.8表格标签"></a>1.8表格标签</h4><p><strong>表格结构标签</strong>：table表格整体，tr行，td单元格<br><code>&lt;table&gt;</code><br>        <code>&lt;tr&gt;</code><br>            <code>&lt;td&gt;序号&lt;/td&gt;</code><br>            <code>&lt;td&gt;姓名&lt;/td&gt;</code><br>        <code>&lt;/tr&gt;</code><br><code>&lt;/table&gt;</code></p><p><strong>表格属性</strong></p><pre class="language-none"><code class="language-none">boder 边框        width   heightalign left right center 表格对齐方式（写入table标签中）cellpadding  表格中文字与边框的距离cellspacing  表格中边框与边框之间的间距  </code></pre><p><strong>表格标题和表头单元格标签</strong><br> 1.caption 表格标题，写在table里面<br> 2.th 表头单元格，里面文字会居中且加粗<br><strong>表格结构标签(了解)</strong></p><pre class="language-none"><code class="language-none">thead  表格头部区域标签tbody  表格主体区域标签tfoot 表格底部</code></pre><p><strong>合并单元格</strong><br> 注意：<strong>合并属性是写在单元格td，th上，不能跨结构标签合并：thead  tbody  tfooter</strong><br> <strong>colspan</strong>   跨列合并     以左侧单元格作为目标单元格<br> <strong>rowspan</strong>  跨行合并     以上侧单元格作为目标单元格<br> 最后删除多余的单元格</p><h4 id="1-9表单标签"><a href="#1-9表单标签" class="headerlink" title="1.9表单标签"></a>1.9表单标签</h4><p><strong>input系列</strong></p><pre class="language-none"><code class="language-none">1.text文本框       placeholder占位符，提示输入文本2.password密码框   placeholder占位符，提示输入文本3.radio单选框        name   相同的name属性值的单选框为一组        checked   默认选中4.checkbox多选框        checked   默认选中5.file文件选择框        multiple  默认只能选择一个文件，选择多个则需要multiple6.按钮        submit提交按钮        reset重置按钮        button普通按钮        注意：如果需要实现以上按钮，需要配合form标签使用        value属性可以设置文字</code></pre><p><strong>button按钮标签</strong></p><p>submit提交按钮： <code>&lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</code></p><p>reset重置按钮：<code> &lt;button type=&quot;reset&quot;&gt;重置&lt;/button&gt;</code></p><p>button普通按钮</p><p>注意：如果需要实现以上按钮，需要配合form标签使用</p><p><strong>select下拉框</strong></p><p>标签组成：select标签和option标签<br>默认显示：selected，在option里面添加</p><p><strong>textarea标签</strong><br>属性：cols 宽度  ，rows 行的数量<br>textarea文本域</p><p><strong>label标签</strong></p><p>作用：<strong>光标聚焦</strong><br>表单聚焦：<code>&lt;label for=&quot;fullname&quot;&gt;姓名：&lt;/label&gt;&lt;input type=&quot;text&quot; id=&quot;fullname&quot;&gt;</code></p><p>单选聚焦：<code>&lt;label&gt;男：&lt;input type=&quot;radio&quot;&gt;&lt;/label&gt;</code></p><p><strong>语义化标签</strong><br>1.没有语义的标签</p><pre class="language-none"><code class="language-none">div独占一行span不独占一行</code></pre><p>2.语义化标签(了解)</p><pre class="language-none"><code class="language-none">header 网页头部footer 网页底部section 区块nav 导航栏aside 网页侧边栏article 网页文章</code></pre><p>  <strong>字符实体</strong><br>   <code>&amp;nbsp;</code>  空格<br>   <code>&amp;gt;</code> 大于<br>   <code> &amp;lt;</code> 小于</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础</title>
      <link href="/star/2023/07203.html"/>
      <url>/star/2023/07203.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><p><code>JavaScript基础这篇笔记是关于JavaScript基础语法的总结</code></p><span id="more"></span><h2 id="1-js基础语法"><a href="#1-js基础语法" class="headerlink" title="1.js基础语法"></a>1.js基础语法</h2><h3 id="1-1js介绍"><a href="#1-1js介绍" class="headerlink" title="1.1js介绍"></a>1.1js介绍</h3><p>是什么？：是一种运行在客户端的编程语言，实现人机交互<br>作用：网页特效，表单验证，数据交互，服务端编程<br>组成：<code>ECMAScript</code>，<code>Web APIS</code></p><h3 id="1-2-js的书写位置"><a href="#1-2-js的书写位置" class="headerlink" title="1.2 js的书写位置"></a>1.2 js的书写位置</h3><p>1.内联  写在标签里面<br>2.内部  直接写在html文件  放入底部<br>3.外部  写在js文件中  <code>&lt;script src=&quot;&quot;&gt;</code><br>注意：引入的<code>script</code>标签中间就不要写代码了</p><h3 id="1-3js的注释"><a href="#1-3js的注释" class="headerlink" title="1.3js的注释"></a>1.3js的注释</h3><p>1.单行注释  <code>//</code>   快捷键<code>Ctrl+/</code><br>2.多行注释 <code>/* */</code></p><h3 id="1-4js的结束符"><a href="#1-4js的结束符" class="headerlink" title="1.4js的结束符"></a>1.4js的结束符</h3><p>1.代表语句结束   英文分号<br>2.换行符会自动标识为结束符</p><h3 id="1-5js输入输出语法"><a href="#1-5js输入输出语法" class="headerlink" title="1.5js输入输出语法"></a>1.5js输入输出语法</h3><p>1.向<code>body</code>输出内容 <code>document.write(&#39;输出内容&#39;)</code><br>2.页面弹出警示框  <code>alert（‘输出内容’）</code><br>3.控制台输出语法  <code>console.log(&#39;输出内容&#39;)</code><br>4.<code>prompt()</code>输入语法</p><h3 id="1-6变量"><a href="#1-6变量" class="headerlink" title="1.6变量"></a>1.6变量</h3><p>1.<strong>是什么？</strong>存储数据的容器，注意：<strong>变量不是数据本身，而是存储数据的容器</strong><br>2.声明变量  :  <code>let 变量名;</code>  赋值： <code>变量名 = 18;</code><br>变量初始化<code> let age =18;</code><br><strong>let不允许多次声明一个变量</strong><br>3.<strong>变量的本质</strong>  是内存中的一块空间，用来存储数据<br>4.<strong>变量名规则与规范</strong></p><pre class="language-none"><code class="language-none">规则：1.不能出现关键字            2.只能用下划线，字母，数字，$符号组成，且不能数字开头            3.字母严格区分大小写规范：1.见名知意            2.遵循小驼峰命名法</code></pre><p>5.<strong>变量扩展-数组</strong></p><pre class="language-none"><code class="language-none">1.保存多个数据2.let 变量名 &#x3D; [数据1,数据2,数据3]3.数组中的每个数据都有自己的编号，第一个编号是从0开始</code></pre><h3 id="1-7数据类型"><a href="#1-7数据类型" class="headerlink" title="1.7数据类型"></a>1.7数据类型</h3><h4 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h4><p><strong>number</strong> 数字型<br><strong>string</strong>  字符串型</p><pre class="language-none"><code class="language-none">1.引号必须成对  推荐使用单引号2.外单内双，外双内单3.转义符  \4.字符串拼接  console.log(变量名1+变量名2)5.模板字符串 &#96;我叫$&#123;name&#125;&#96;</code></pre><p><strong>boolean</strong>  布尔型  true  false<br><strong>undefined</strong> 未定义<br><strong>null</strong>  空引用</p><h4 id="2-引用数据类型"><a href="#2-引用数据类型" class="headerlink" title="2.引用数据类型"></a>2.引用数据类型</h4><p>对象，函数，数组</p><p><strong>检测数据类型</strong><br><code>typeof</code>    例如：<code>console.log(typeof 123)</code></p><h3 id="1-8类型的转换"><a href="#1-8类型的转换" class="headerlink" title="1.8类型的转换"></a>1.8类型的转换</h3><p><strong>隐式转换</strong></p><pre class="language-none"><code class="language-none">+号两边只要有一个是字符串，那么就会把另一个转换为字符串除了+以外的算数运算符,-*&#x2F;等都会把数据转换为数字类型+号作为正号解析时，可以转换为数字类型</code></pre><p><strong>显式转换</strong></p><pre class="language-none"><code class="language-none">1.转换为数字型       Number(&#39;10&#39;)       parseInt(&#39;10&#39;)   转换为数字型，只保留整数，没有四舍五入       parseFloat(&#39;10.99&#39;) 转换为数字型，会保留小数区别1.1Number()：只能放数字类型的字符，否则返回NaN1.2pasreFloat(): 能放以数字开头的所有类型的字符串，pasreFloat 会自动过滤，只返回数字2.转换为字符型       1.String(数据)       2.变量.toString(进制)</code></pre><h2 id="2-流程控制"><a href="#2-流程控制" class="headerlink" title="2.流程控制"></a>2.流程控制</h2><h3 id="2-1运算符"><a href="#2-1运算符" class="headerlink" title="2.1运算符"></a>2.1运算符</h3><p><strong>算数运算符</strong>  +  -  *  &#x2F;  %<br>优先级 ：*&#x2F; %同等级，先乘除后加减，有括号先算括号<br><strong>赋值运算符</strong></p><pre class="language-none"><code class="language-none">&#x3D; 赋值+&#x3D;    num +&#x3D; 1  等同于 num &#x3D; num + 1-&#x3D;  *&#x3D;  &#x2F;&#x3D;  %&#x3D;</code></pre><p><strong>一元运算符</strong></p><pre class="language-none"><code class="language-none">++ 自增++num  前置自增  先自加，再使用  等同于num +&#x3D; 1num++  后置自增  先使用，再自加  等同于num +&#x3D; 1--  自减</code></pre><p><strong>比较运算符</strong><br>     &gt;  &lt;  &gt;&#x3D;  &lt;&#x3D;<br><strong>相等运算符</strong></p><pre class="language-none"><code class="language-none">&#x3D;&#x3D;  左右两边值是否相等，不管数据类型&#x3D;&#x3D;&#x3D; 左右两边数据类型 ，值， 引用地址全等  常用！&#x3D;&#x3D; 值不等于得到的结果true  flase注意：       1.NaN不等于任何值，包括它本身       2.尽量不要比较小数       3.不同类型之间比较会发生隐式转换       4.开发中请用&#x3D;&#x3D;&#x3D;</code></pre><p><strong>逻辑运算符</strong></p><pre class="language-none"><code class="language-none">&amp;&amp;  并且  一假则假|| 或者  一真则真！ 取反 真变假 假变真逻辑运算符里的短路  只存在于&amp;&amp;和||&amp;&amp;左边为假flase就不判断右边了||左边为真true就不判断右边了注意：有5个值是当false来看的      false为假      数字0为假      ‘’ 空字符串为假      undefined为假      null 为假      NaN为假</code></pre><p><strong>运算符优先级</strong><br><strong>小括号&gt; 一元运算符和取反！&gt; 算数运算符&gt;比较运算符&gt;相等运算符&gt;&amp;&amp;&gt;||&gt;赋值运算符&#x3D;&gt;逗号</strong></p><h3 id="2-2语句"><a href="#2-2语句" class="headerlink" title="2.2语句"></a>2.2语句</h3><p>   顺序语句 从上到下依次执行</p><h3 id="2-3分支语句"><a href="#2-3分支语句" class="headerlink" title="2.3分支语句"></a>2.3分支语句</h3><p><strong>2.3.1if分支语句</strong><br>       <code>if()&#123;&#125; else if()&#123;&#125; else&#123;&#125;</code><br> <strong>三元表达式</strong><br>       条件？输出1：输出2<br><strong>switch语句</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">switch</span><span class="token punctuation">(</span>数据<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> 数据<span class="token number">1</span><span class="token operator">:</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'取款'</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">case</span> 数据<span class="token number">2</span><span class="token operator">:</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'存款'</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'重新输入'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span></code></pre><p><strong>2.3.2循环语句</strong><br><strong>while循环</strong> </p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">//变量起始值</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//变量终止条件</span>     document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hh</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        i<span class="token operator">++</span>   <span class="token comment">//变量变化</span>    <span class="token punctuation">&#125;</span></code></pre><p><strong>for循环</strong><br>       1.<code>for(let i = 1; i &lt;= 10; i++) &#123;循环体&#125;</code><br>       2.<code>for循环的嵌套</code><br><strong>continue和break的区别</strong><br>      1.<code>continue</code> 结束本次循环，继续下一次循环<br>       2.<code>break</code> 直接退出本次循环</p><h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3.数组"></a>3.数组</h2><p>语法：<code>let 数组名 = []</code><br>数组长度   <code>数组名.length</code><br><strong>添加数组</strong></p><pre class="language-none"><code class="language-none">arr.push(元素1，元素2)   在数组后面添加  返回新数组arr.unshit(元素1，元素2)  在数组前面添加  返回新数组</code></pre><p><strong>删除数组</strong></p><pre class="language-none"><code class="language-none">arr.pop()  只能删除最后一个元素  返回新数组arr.shift()  只能删除第一个元素  返回新数组arr.splice(从哪里删,删除几个)  删除指定元素</code></pre><h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4.函数"></a>4.函数</h2><h3 id="4-1函数的基础使用"><a href="#4-1函数的基础使用" class="headerlink" title="4.1函数的基础使用"></a>4.1函数的基础使用</h3><p><strong>是什么？</strong>执行特定任务的代码块，可以实现代码复用<br><code>function  函数名() &#123; 函数体 &#125;</code>     调用函数：<code>函数名()</code></p><h3 id="4-2函数传参"><a href="#4-2函数传参" class="headerlink" title="4.2函数传参"></a>4.2函数传参</h3><p>作用：提高函数的灵活性<br><code>function  函数名(形参1,形参2) &#123; 函数体 &#125;</code>     调用函数:<code>函数名(实参1,实参2)</code></p><h3 id="4-3函数的返回值"><a href="#4-3函数的返回值" class="headerlink" title="4.3函数的返回值"></a>4.3函数的返回值</h3><p><strong>return</strong></p><pre class="language-none"><code class="language-none">1.函数内部可以有多个return，但返回值只能有一个，return后面的数据不要换行写2.return会立即结束当前函数3.函数可以没有return，但返回值会是undefined4.return只能返回一个值     例如  return a,b 那么此时，不会返回b     解决:写成数组  return[a,b]</code></pre><h3 id="4-4作用域"><a href="#4-4作用域" class="headerlink" title="4.4作用域"></a>4.4作用域</h3><p><strong>全局作用域</strong><br>整个script标签内部或者一个独立的文件，全局作用域下的变量谁都能使用<br><strong>局部作用域</strong><br>函数内的代码环境，因为跟环境有关，也被称为函数作用域，局部作用域只能在局部使用<br><strong>块级作用域</strong><br><code>块级作用域由&#123; &#125;包括，if语句，for语句等</code>，块级作用域只能在块级之中用</p><pre class="language-none"><code class="language-none">注意1：如果函数内部或者块级作用域内部，没有用let声明的变量，却直接使用，也要把它当作全局变量注意2：函数内部的形参可以看做是局部变量总结一句话：全局&gt;局部&#x3D;块级</code></pre><h3 id="4-5作用域链"><a href="#4-5作用域链" class="headerlink" title="4.5作用域链"></a>4.5作用域链</h3><p>是什么？根据在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问，就称为作用域链<br><strong>查找变量的原则</strong>：就近原则<br><strong>匿名函数(函数表达式)</strong><br>语法:<code>let fn  =  function (x,y) &#123;函数体&#125;</code>    调用:<code>fn(x,y)</code><br><strong>立即执行函数</strong>     立即执行，无需调用<br><strong>作用</strong>：能有效避免全局变量之间的污染<br>两种写法：<br><code>(function (x,y) &#123;函数体&#125;)(x,y);</code><br><code>(function (x,y) &#123;函数体&#125;(x,y));</code><br><strong>注意：必须加分号；结束符</strong></p><p><strong>arguments</strong></p><pre class="language-none"><code class="language-none">1.伪数组，无法使用数组中的方法2.有length3.仅仅只在函数内有效</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//示例：</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>              <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><p><strong>在写了实参却没有写形参时，可以使用argument伪数组</strong></p><h2 id="5-对象"><a href="#5-对象" class="headerlink" title="5.对象"></a>5.对象</h2><h3 id="5-1什么是对象"><a href="#5-1什么是对象" class="headerlink" title="5.1什么是对象"></a>5.1什么是对象</h3><pre class="language-none"><code class="language-none">1.无序的数据集合2.是一种数据类型3.是由属性和方法组成</code></pre><h3 id="5-2对象的基本使用"><a href="#5-2对象的基本使用" class="headerlink" title="5.2对象的基本使用"></a>5.2对象的基本使用</h3><p><code>let 对象名 = &#123;属性名:属性值,方法名:匿名函数&#125;</code><br><strong>对象两种访问属性的方法</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> goods <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'小米10'</span><span class="token punctuation">,</span>            <span class="token literal-property property">num</span><span class="token operator">:</span><span class="token number">1000128164</span><span class="token punctuation">,</span>            <span class="token literal-property property">weight</span><span class="token operator">:</span><span class="token string">'0.55kg'</span><span class="token punctuation">,</span>            <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">'中国大陆'</span>        <span class="token punctuation">&#125;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>goods<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>goods<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> <strong>访问方法：</strong></p><pre class="language-none"><code class="language-none">1.对象名.属性名2.对象名[&#39;属性名&#39;]3.对象访问方法    对象.方法名()</code></pre><h3 id="5-3操作对象"><a href="#5-3操作对象" class="headerlink" title="5.3操作对象"></a>5.3操作对象</h3><p><strong>查</strong></p><pre class="language-none"><code class="language-none">对象名.属性名对象名[&#39;属性名&#39;]</code></pre><p><strong>增</strong></p><pre class="language-none"><code class="language-none">对象名.新属性名&#x3D; 新属性值</code></pre><p><strong>改</strong></p><pre class="language-none"><code class="language-none">对象.属性名 &#x3D; 值对象.方法 &#x3D; 匿名函数</code></pre><p><strong>删</strong></p><pre class="language-none"><code class="language-none">delete 对象名.属性</code></pre><h3 id="5-4遍历对象"><a href="#5-4遍历对象" class="headerlink" title="5.4遍历对象"></a>5.4遍历对象</h3><pre class="language-none"><code class="language-none">1.对象没有数组的length属性，无法确定长度2.对象里面是无序的键值对，没有规律，不想数组有下标</code></pre><p><strong>语法</strong>：<code>for(let k(变量名) in  对象名) &#123;&#125;</code><br><strong>k是变量名</strong><br>       因此，获得对象属性的是k<br>       获得对象值是obj[k]<br><strong>遍历数组对象</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;table>    &lt;caption>&lt;h2>学生信息&lt;/h2>&lt;/caption>    &lt;tr>        &lt;th>序号&lt;/th>        &lt;th>姓名&lt;/th>        &lt;th>年龄&lt;/th>        &lt;th>性别&lt;/th>        &lt;th>家乡&lt;/th>    &lt;/tr>    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小民'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">'河北'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小民'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">'河北'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小民'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">'河北'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小民'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">'河北'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小民'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">'河北'</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">            &lt;tr>                &lt;td></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/td>                &lt;td></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/td>                &lt;td></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/td>                &lt;td></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/td>                &lt;td></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>address<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/td>            &lt;/tr>            </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span>`<span class="token punctuation">)</span></code></pre><h3 id="5-5内置对象"><a href="#5-5内置对象" class="headerlink" title="5.5内置对象"></a>5.5内置对象</h3><p><strong>数学对象Math</strong><br>math.pi  圆周率</p><p>math.abs  绝对值  如果是字符串的’-1’,输出也会是1，隐式转换</p><p>math.max 取最大值<br>如果未输入数字进去，返回-Infinity，<br>如果输入数字进去，则是取最大值<br>如果输入数字和字符串混合的，则是NAN</p><p>math.min  取最小值<br>math.ceil  向上取整<br>math.floor 向下取整</p><p>math.round 四舍五入  0.5  是往大的方向四舍五入</p><p>math.random（） 随机数<br>返回一个0-1之间随机的小数，包括0，不包括1<br>这个方法里面不跟参数</p><p>1-10之间的随机数<br>return Math.floor(Math.random() * (max-min+1)+min);</p><h3 id="5-6数据类型的存储方式"><a href="#5-6数据类型的存储方式" class="headerlink" title="5.6数据类型的存储方式"></a>5.6数据类型的存储方式</h3><p>简单数据类型按照值存储   存放在栈<br>复杂数据类型按照地址存储  存放在堆</p><p>复杂数据类型的地址</p><p>简单数据类型的值</p><p>总结：简单数据类型开辟的地址是不同的，无论几个简单数据去开辟同样的值，那他的地址照样不会改</p><p>总结：复杂数据类型的值是存放在堆里面的，而找到堆的值要通过栈的复杂数据类型的地址，复杂数据1只要赋值于复杂数据2，那么就获得了与复杂数据1同样的地址，同时能够读取到堆里面的值，而复杂数据2如果一改变，则会通过栈里面的地址找到堆里面的数据，同时会改变对里面数字的值，而此时复杂数据1的值也会因此改变</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js</title>
      <link href="/star/2023/0720477.html"/>
      <url>/star/2023/0720477.html</url>
      
        <content type="html"><![CDATA[<h2 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h2><p><code>这篇总结了node.js的基本概念与使用,如果公司需要，建议去查相关文档</code></p><span id="more"></span><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>是什么？</strong>是一个基于谷歌V8引擎的开源的，跨平台的JS运行时环境<br><strong>作用</strong>：让js可以做后端功能<br><strong>如何运行？</strong>打开终端，输入       node js文件路径</p><h4 id="前端js与后端js的区别"><a href="#前端js与后端js的区别" class="headerlink" title="前端js与后端js的区别"></a>前端js与后端js的区别</h4><p>前端js三部分  ECMAScript ，DOM , BOM<br>后端js一个部分： ECMAScript</p><h4 id="node-js模块化开发"><a href="#node-js模块化开发" class="headerlink" title="node.js模块化开发"></a>node.js模块化开发</h4><p><strong>是什么？</strong>把一个大文件按照功能拆分为小文件，，再使用特定的语法(模块化语法)组合在一起</p><p><strong>优点</strong>：<br>1.按需导入，节省内存资源<br>2.避免全局变量污染，每个模块都是一个独立的作用域<br>3.业务分离：每个模块只负责某一个功能，便于维护</p><p>语法：CommonJS<br>导出：module.exports &#x3D; { }<br>导入：const 对象名 &#x3D; require(‘文件路径’)</p><h3 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h3><p>作用：读写文件<br><strong>语法1：读取文件</strong><br>第一步：导入：const 对象 &#x3D; require(‘fs’)<br>第二步：使用：对象.readFile(‘文件路径’，’文件编码’，回调函数)<br>读取文件的文件编码默认是二进制</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> 对象名 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>  <span class="token comment">//fs是模块名</span>对象名<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'文件路径'</span><span class="token punctuation">,</span><span class="token string">'文件编码'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> <span class="token comment">//失败与成功</span>    err<span class="token operator">?</span><span class="token keyword">throw</span> <span class="token literal-property property">error</span><span class="token operator">:</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fd<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/aaa.txt'</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> error    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><strong>语法2：写入文件</strong><br>第一步：导入：const 对象 &#x3D; require(‘fs’)<br>第二步：使用：对象.writeFile(‘文件路径’，’要写入的数据’，’文件编码’，回调函数)<br>写入文件的文件编码默认是数据编码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.导入模块</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment">//2.使用模块</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./data/ddd.txt'</span><span class="token punctuation">,</span><span class="token string">'肾虚哥肾虚了'</span><span class="token punctuation">,</span><span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> err    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入成功'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>decodeURL()  将乱码转换为原本的样子</p><h3 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h3><p>作用：处理路径<br>导入：const 对象名 &#x3D; require(‘path’)</p><p>常用语法：<br>拼接绝对路径：path.resolve(‘文件名’)     需要导入path模块<br>文件夹绝对路径：_ _dirname              不需要导入path模块</p><h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h3><p>作用：搭建服务器</p><p>语法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.导入http模块</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token comment">//2.创建服务器</span><span class="token keyword">const</span> app <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//3.开启服务器</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'端口号'</span><span class="token punctuation">,</span><span class="token string">'主机名(ip地址)'</span><span class="token punctuation">,</span>成功的回调<span class="token punctuation">)</span></code></pre><p>端口号：识别具体软件的编号<br>ip地址：每一个电脑在网络中都有一个唯一的身份标识<br>res.writeHeader(响应码，对象)   改变请求头<br>res.end(‘显示页面的内容’)     显示页面的内容</p><p>示例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//导入http模块</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token comment">//创建服务器</span><span class="token keyword">const</span> app <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token operator">===</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">writeHeader</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>            <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span><span class="token string">'text/html;charset=utf8'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'我是首页'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/list'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">writeHeader</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>            <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span><span class="token string">'text/html;charset=utf8'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'李小2'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">writeHeader</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>            <span class="token string-property property">'Content-type'</span><span class="token operator">:</span><span class="token string">'text/html;charset=utf8'</span><span class="token punctuation">,</span>            <span class="token string-property property">'location'</span><span class="token operator">:</span><span class="token string">'http://127.0.0.1:3000'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//开启服务器</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器已开启'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="综合代码"><a href="#综合代码" class="headerlink" title="综合代码"></a>综合代码</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token operator">===</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>__dirname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/www/index.html</span><span class="token template-punctuation string">`</span></span>          <span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> err            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>__dirname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/www/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">decodeURI</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>          <span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> err            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器已开启'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>WEB特点01 ：  html中所有的外部资源(src href)都会变成网络请求<br>要想HTML页面可以加载静态资源(css、图片、音视频),服务器就需要响应这些文件</p><p>WEB特点02 :  静态资源网络请求url 一般与 文件路径 一致, 一般会自动拼接文件路径响应返回<br>静态资源服务器 : 自动响应返回页面每一个静态资源请求</p>]]></content>
      
      
      <categories>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js面向对象</title>
      <link href="/star/2023/072046.html"/>
      <url>/star/2023/072046.html</url>
      
        <content type="html"><![CDATA[<h2 id="js面向对象"><a href="#js面向对象" class="headerlink" title="js面向对象"></a>js面向对象</h2><p><code>这篇总结主要讲解了js面向对象，编程思想+构造函数+原型对象</code></p><span id="more"></span><h3 id="1-编程思想"><a href="#1-编程思想" class="headerlink" title="1.编程思想"></a>1.编程思想</h3><h4 id="面向过程编程-POP"><a href="#面向过程编程-POP" class="headerlink" title="面向过程编程  POP"></a>面向过程编程  POP</h4><p>面向过程就是分析解决问题所需要的步骤，然后把这些步骤一步一步实现，使用的时候再一个一个依次调用</p><pre class="language-none"><code class="language-none">例子：将大象装进冰箱，面向过程做法1.打开冰箱门2.把大象装进去3.关上冰箱门</code></pre><p><strong>面向过程，就是按照我们分析好了的步骤，按照步骤解决问题</strong></p><h4 id="面向对象编程-OOP"><a href="#面向对象编程-OOP" class="headerlink" title="面向对象编程  OOP"></a>面向对象编程  OOP</h4><p>面向对象是把事务分解成一个个对象，然后由对象之间分工与合作</p><pre class="language-none"><code class="language-none">1.大象对象  进去2.冰箱对象 打开关闭3.使用大象和冰箱的功能</code></pre><p><strong>面向对象是以对象功能划分问题，而不是步骤</strong></p><p><code>面向对象本质是</code>：面向过程的封装<br>面向对象特征</p><pre class="language-none"><code class="language-none">1.封装性：  a.把代码放入对象的方法中  b.解决代码复用  c.避免全局变量的污染2.继承性：一个对象拥有另一个对象  所有成员3.多态性：一个对象在不同情况下的不同状态</code></pre><h3 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="2.构造函数"></a>2.构造函数</h3><p><strong>特点</strong>：<br><code>1.构造函数体现了面向对象的封装性</code><br><code>2.构造函数实例创建的对象彼此独立，互不影响</code><br><strong>构造函数的问题</strong>：构造函数方法好用，但存在浪费内存问题(存复杂数据类型)</p><p><strong>new在执行时会做四件事情：</strong><br>            <code>1.在内存中创建一个新的空对象</code><br>            <code>2.让this指向这个新对象</code><br>            <code>3.执行构造函数里面的代码，给这个新对象添加属性和方法</code><br>            <code>4.返回这个新对象（所有构造函数中不需要return）</code></p><p><strong>规范：命名首字母大写</strong></p><p><strong>构造函数return的使用</strong><br>            <code>1.如果return的是值类型则无效</code><br>            2.<code>如果return的是引用类型则有效，会覆盖new创建的对象</code></p><h3 id="3-原型对象"><a href="#3-原型对象" class="headerlink" title="3.原型对象"></a>3.原型对象</h3><p><strong>作用：</strong><code>解决构造函数浪费内存+变量污染的问题</code></p><h4 id="原型prototype"><a href="#原型prototype" class="headerlink" title="原型prototype"></a>原型prototype</h4><p><strong>原型的作用：</strong><code>共享方法与继承</code><br>是构造函数的一个属性，本质也是一个对象，也称prototype原型对象<br><strong>特点</strong>：</p><pre class="language-none"><code class="language-none">1.构造函数通过原型分配的函数是所有对象所共享的2.js规定，每一个构造函数都有prototype属性，指向另一个对象3.我们可以把那些不变的方法，直接定义在prototype对象上，这样所有对象的实例就可以共享这些方法</code></pre><p><strong>注意一：</strong><br><code>1.prototype就是一个对象，这个对象所有的方法和属性都会被构造函数所拥有</code><br><code>2.构造函数里面的this指向是实例对象</code><br><code>3.原型对象里面的this指向的还是实例对象</code><br>注意二：<br><code>1.公共的属性写在构造函数里面</code><br><code>2.公共的方法写在原型对象身上，构造函数名.prototype.方法名  = function()&#123;&#125;</code></p><h4 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h4><p><code>对象原型proto  和 构造函数prototype原型对象中，里面有一个constructor属性</code><br><code>constructor我们称为构造函数，因为它指回构造函数本身</code><br><strong>目的：</strong><code>主要是记录该对象引用哪个构造函数，它可以让原型对象重新指向原来的构造函数</code><br><strong>注意:</strong><br><code>1.上面被注释起来的意思是  Star的原型对象prototype的sing方法，是将sing方法添加进入原型对象自带的方法中</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token class-name">Star</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sing</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token class-name">Star</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">dance</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></code></pre><p><code>2.当把方法都放在prototype对象中时，prototype对象 = 那些方法，而那些方法就相当于复制给了prototype对象，因此里面原本存在的constructor方法就会被覆盖掉，因此，我们需要自己指回</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token class-name">Star</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">constructor</span><span class="token operator">:</span>Star    <span class="token function-variable function">sing</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">dance</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><p><code>3.手动指回：</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">constructor：构造函数名</code></pre><h4 id="对象原型-proto"><a href="#对象原型-proto" class="headerlink" title="对象原型_ _ proto _ _"></a>对象原型_ _ proto _ _</h4><p>1.对象都会有一个<code> _ _ proto _ _</code>属性，指向构造函数的<code>prototype</code>原型对象<br>2.<code>_ _ proto _ _</code>的存在，就可以直接去构造函数原型对象<code>prototype</code>中找<br><strong>注意:</strong><br>1.<code>_ _proto_ _</code>是<code>js</code>非标准属性<br>2.<code>[[prototype]]和_ _proto_ _意义相同</code><br>3.<code>用来表明当前实例对象指向哪个原型对象</code><br>4.<code>_ _proto_ _对象原型里面也有一个constructor属性，指向创建该实例对象的构造函数</code></p><h4 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h4><p>父构造函数   子构造函数<br>子类的原型对象 &#x3D;  new  父类</p><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p>原型链就是一个查找规则,遵循就近原则<br><code>每一个实例对象都会有自己的原型，而原型的也是对象，那么它也拥有自己的原型，以此类推形成的链式结构，我们称为原型链</code></p><p><code>instanceof</code>检测构造函数的原型对象是否出现在某个对象的原型链上<br>语法：实例对象 <code>instanceof </code>构造函数</p><h4 id="扩展内置对象"><a href="#扩展内置对象" class="headerlink" title="扩展内置对象"></a>扩展内置对象</h4><p>可以通过原型对象，对原来的内置对象进行扩展自定义方法，比如给数组增加自定义求偶数和的功能<br><strong>注意：</strong><br>1.<code>数组和字符内置对象不能给原型对象覆盖操作Array.prototype = &#123;&#125;</code><br>2.<code>只能Array.prototype.xxx = function() &#123;&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm和跨域</title>
      <link href="/star/2023/07204484.html"/>
      <url>/star/2023/07204484.html</url>
      
        <content type="html"><![CDATA[<h1 id="npm和跨域"><a href="#npm和跨域" class="headerlink" title="npm和跨域"></a><code>npm</code>和跨域</h1><p><code>这篇主要总结了npm的使用以及对跨域的解释</code></p><span id="more"></span><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a><code>npm</code></h2><p><strong>是什么？</strong>包管理工具<br>作用：下载&#x2F;删除&#x2F;更新包</p><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><p><strong>1.初始化<code>npm</code></strong><br> 在你的项目根目录下：<code>npm init -y</code><br> 会生成项目的配置文件：<code>package.json</code></p><p><strong>2.下载(安装)包</strong> ： <code>npm install</code> 包名  或者 <code>npm install</code> 包名@版本号<br> 1.去<code>npm</code>官网搜索这个包名<br> 2.如果可以搜索到，就会找这个包的下载地址<br> 3.下载包的一切资源<br> 4.生成<code>node_modules</code>文件夹 和 <code>package-lock.json</code>文件</p><p><strong>3.使用包</strong></p><p>模块化语法导入包<br>语法去官网查看</p><p><code>package.json</code>:项目配置文件，记录项目信息，使用哪些包及版本node_modules:包资源文件夹，存放包所有的资源及对应的依赖包<br><code>package-lock.json</code>:记录包的下载地址，提高包的更新速度</p><h3 id="npm包的种类"><a href="#npm包的种类" class="headerlink" title="npm包的种类"></a><code>npm</code>包的种类</h3><p><code>npm</code>包根据使用范围分为全局包和本地包<br>本地包又根据使用时间分为开发依赖包和生产依赖包</p><h4 id="全局包"><a href="#全局包" class="headerlink" title="全局包"></a>全局包</h4><p>安装在c盘，对整个电脑生效<br>语法：<code>npm install 包名 -g</code></p><h4 id="本地包"><a href="#本地包" class="headerlink" title="本地包"></a>本地包</h4><p>安装在项目node_modules中<br>语法：<code>npm install 包名</code></p><p>开发依赖包：包只在开发阶段使用，在上线之后不需要使用了<br>语法：<code>npm i 包名 -D</code></p><p>生产依赖包：即在开发阶段使用，也会在上线之后使用</p><h3 id="npm命令总结"><a href="#npm命令总结" class="headerlink" title="npm命令总结"></a><code>npm</code>命令总结</h3><pre class="language-none"><code class="language-none">初始化npm                 npm init -y下载包                         npm i 包名根据package.json下载所有的包    npm i切换镜源  npm inpm config set registry&#x3D;https:&#x2F;&#x2F;registry.npmmirror.com&#x2F;   淘宝镜像源          npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;    查看镜像源            npm config list    删除包                         npm  uninstall 包名下载全局包                 npm i 包名 -g下载开发依赖包         npm i 包名 -D更新你电脑当前的     npm  npm install npm -g查看node安装目录   where node查看npm安装目录    where npm查看全局包安装路径 npm list -g --deptch</code></pre><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>是什么？<strong>指 <code>ajax</code>地址 和 页面地址 不同源</strong></p><p><strong>注意：</strong><br><code>ajax</code>地址：跨域只会出现在<code>ajax</code>请求中<br>页面地址：<code>location.href </code></p><h4 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h4><p>两个地址的 协议名 域名 端口号 都一致</p><p><strong>为什么会有同源策略？</strong><br>为了用户安全，如果<code>ajax</code>地址 与 页面地址不同源，浏览器认为你给不同的服务器发送请求，可能会遭受攻击，浏览器就拒绝接收服务器响应的数据</p><p>跨域的过程：请求发出去了，服务器也接收了，服务器也响应了，但浏览器拒绝接收服务器数据</p><p>如何解决跨域？<br>1<code>.CORS </code>             <code>res.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;)</code><br>2.jsonp技术<br>3.代理服务器</p>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6模块化和Webpack</title>
      <link href="/star/2023/072035.html"/>
      <url>/star/2023/072035.html</url>
      
        <content type="html"><![CDATA[<h1 id="ES6模块化和Webpack"><a href="#ES6模块化和Webpack" class="headerlink" title="ES6模块化和Webpack"></a>ES6模块化和Webpack</h1><p><code>这篇总结主要讲解了ES6模块化和CommonJS模块化以及Webpack</code></p><span id="more"></span><h2 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h2><h4 id="默认导入导出"><a href="#默认导入导出" class="headerlink" title="默认导入导出"></a>默认导入导出</h4><p>导出：export default 对象<br>导入：import 对象名 from ‘js文件路径’</p><p><strong>注意</strong>：<br>变量名应该与文件名一致<br>export default在同一个页面只能使用一次</p><h4 id="按需导入导出"><a href="#按需导入导出" class="headerlink" title="按需导入导出"></a>按需导入导出</h4><p>导出：export  const 变量名  &#x3D;  值<br>导入：import {变量名1，变量名2} from ‘js文件路径’<br>修改别名：import {变量名 as 新名称} from ‘js文件路径’</p><p>注意：<br>按需导出可以导出多次<br>按需导出 和 默认导出 是相互独立，互不影响，因此他们是可以同时使用</p><h4 id="统一导入导出"><a href="#统一导入导出" class="headerlink" title="统一导入导出"></a>统一导入导出</h4><p>统一导出：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> nam <span class="token operator">=</span> <span class="token string">'3'</span><span class="token keyword">const</span> ag <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">const</span> se <span class="token operator">=</span> <span class="token string">'1'</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>nam<span class="token punctuation">,</span>ag<span class="token punctuation">,</span>se<span class="token punctuation">&#125;</span></code></pre><p>统一导入：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m <span class="token keyword">from</span> <span class="token string">'./toods.js'</span></code></pre><p>这里的m会拿到export 所有导出数据，产生一个对象<br>不要去和按需导出同时使用</p><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><p>是什么？是一个静态模块打包工具<br>作用：压缩与混淆 代码</p><p><strong>使用流程：</strong><br>第一步：初始化npm 和 安装局部开发依赖的webpack<br>npm init -y      npm i webpack webpack-cli -D<br>第二步：在项目的根目录下打开终端 ，输入打包命令：npx webpack</p><p>默认入口文件: .&#x2F;src&#x2F;index.js<br>默认出口文件: .&#x2F;dist&#x2F;main.js<br>webpack只会打包入口文件，如果要打包其他文件，则需要与入口文件生成依赖关系</p><h4 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h4><p><strong>1.根目录下新建文件</strong>：webpack.config.js</p><p><strong>2.导出配置对象</strong>：module.exports &#x3D; { 配置项 }</p><p><strong>3.常用配置项</strong>：<br>打包模式mode：默认production，生产模式(压缩版本)<br>                              development，开发模式(不压缩)<br>入口文件：entry:’文件路径’<br>出口文件：output:{path:’文件夹路径’，filename:’文件路径’}</p><p><strong>示例</strong>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token comment">//webpack.config.js文件下</span><span class="token comment">//node导出语法</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//打包模式  开发版(不压缩) 而production则是生产模式(压缩版)</span>    <span class="token literal-property property">mode</span><span class="token operator">:</span>development<span class="token punctuation">,</span>    <span class="token comment">//设置入口文档</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>__dirname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/src/tool.js</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token comment">//设置出口文档</span>    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token comment">//设置出口文档文件夹</span>        <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>__dirname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/aaa</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token comment">//设置出口文档文件</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">'out.js'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token comment">// 打包输出HTML</span>             <span class="token literal-property property">minify</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 压缩HTML文件</span>              <span class="token literal-property property">removeComments</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 移除HTML中的注释</span>              <span class="token literal-property property">collapseWhitespace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 删除空白符与换行符</span>                 <span class="token literal-property property">minifyCSS</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">// 压缩内联css</span>             <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>             <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./public/index.html</span><span class="token template-punctuation string">`</span></span>             <span class="token comment">// 指定压缩哪一个html文件, 相对于根目录</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>     <span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token literal-property property">module</span><span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token comment">// 处理非js模块</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span><span class="token punctuation">[</span> <span class="token comment">// 规则</span>          <span class="token punctuation">&#123;</span>            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 正则测试</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span> <span class="token comment">// loader</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>     <span class="token comment">// 正则匹配，以.less结尾的文件</span>    <span class="token comment">// 如果发现是.less文件，则由如下三个loader来处理</span>    <span class="token comment">// 处理的顺序是   从右向左</span>    <span class="token comment">// less-loader: 作用是加载less文件，会帮你less转成css</span>    <span class="token comment">// css-loader: 作用是允许.js中引入.css</span>    <span class="token comment">// style-loader:作用是在.html上创建style标签，把css代码输入进去</span>    <span class="token comment">// 匹配成功，使用指定的loader</span>    <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>4.npm run build 与 npm run dev 配置</strong><br>package.json的script对象中:   “build” : “webpack”<br>相当于给node环境增加一个命令：<strong>npm run build</strong><br><strong>作用是按照webpack.config.js文件配置对项目进行打包</strong></p><p>package.json的script对象中:   “dev” : “webpack –config vue.config.js”<br>相当于给node环境增加一个命令：<strong>npm run dev</strong><br><strong>作用是按照vue.config.js文件配置对项目进行打包</strong></p><h4 id="npm-run-build-打包流程"><a href="#npm-run-build-打包流程" class="headerlink" title="npm run build 打包流程"></a>npm run build 打包流程</h4><p>1.他会先去package.json中找build配置<br>2.如果有，就读取build配置，并执行真正的webpack命令：npx webpack 配置文件。反之报错<br>3.检查有没有配置文件，如果有就优先加载设置的配置文件，如果没有就加载默认配置文件webpack.config.js<br>4.根据配置文件得到配置参数<br>5.根据配置参数找到入口文件，并开始构建依赖关系图<br>6.开始打包：压缩，混淆<br>7.将打包后的代码放入配置参数的出口文件中</p><h4 id="loader与plugin的区别"><a href="#loader与plugin的区别" class="headerlink" title="loader与plugin的区别"></a>loader与plugin的区别</h4><p>loader作用：让webpack能够处理非js和json文件（默认情况下，webpack只能处理js和json文件，项目中其他类型的文件就需要使用loader来处理）</p><p>plugin作用：执行范围更广的任务，例如：打包优化，资源管理，注入环境变量</p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础</title>
      <link href="/star/2023/072032906.html"/>
      <url>/star/2023/072032906.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p><code>本篇主要是git版本管理工具的注册,使用,符号的代表含义，以及其他的git操作</code></p><span id="more"></span><p><strong>是什么？</strong>git是一个版本管理工具</p><p>下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>配置用户信息</p><p>1.安装完git之后，要做的第一件事情就是设置自己的 用户名 和 邮件地址<br>相当于是登录git账号操作<br>2.<code>如何获取git账号</code> :   可以在 码云注册一个账号<br>码云地址：<a href="https://gitee.com/">https://gitee.com/</a></p><p>3.<code>配置用户信息命令如下</code>：<br>git config –global user.email “你的码云账号邮箱”<br>git config –global user.name “你的码云用户名(可以随便写)”</p><h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><p><strong>git分为工作区，暂存区，git仓库</strong><br><code>工作区</code>：处理工作的区域<br><code>暂存区</code>：已完成的工作的临时存放区域，等待被提交<br><code>git仓库</code>：最终的存放区域</p><p><code>文件右边出现U        则表示这个文件是新增的    此时需要初始化仓库</code><br><code>文件右边出现        A         则表示这个文件已放入暂存区 </code><br><code>文件右边A消失，则代表本次文档已结束</code><br><code>文件右边出现       M         则表示这个文件已修改</code></p><p><strong>git init</strong>             初始化git仓库<br><strong>git add .</strong>           把你的代码放入暂存区<br><strong>git commit -m”描述信息”</strong>    你的暂存区代码的描述信息，且把这个暂存区                          的文件提交到本地仓库中<br><strong>git log</strong>    查看详细存档日志   配合Enter键查询    Q键退出<br><strong>git log –oneline</strong>       查看简略版的存档日志   与git  reset –hard配合使用<br><strong>git reset –hard 版本号</strong>        可以让你的文件回退到历史某一个版本</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p><strong>是什么</strong>？远程仓库其实就是远程的服务器，帮助我们存储代码</p><p><strong>git clone ‘远程仓库地址’</strong>     克隆远程仓库      把远程仓库所有文件下载到本地<br><strong>git push</strong>     推送代码到远程仓库           把当前电脑已经commit过的代码上传到远程仓库<br><strong>git pull</strong>       拉取远程仓库别人的代码到本地         把远程仓库上别人push的代码同步到自己的本地电脑(只有多人开发才生效)</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1.在远程服务器上(码云)上新建仓库<br>2.git clone 远程仓库地址    把远程仓库下载到本地<br>3.git add .    代码添加到暂存区<br>4.git commit -m”描述信息”    提交文档到本地仓库<br>5.git push  把本地仓库的代码提交到远程仓库     一定要先添加到本地仓库了，才能进行提交至远程仓库<br>6.git pull     把远程仓库上别人push的代码同步到自己的本地电脑(只有多人开发才生效)</p><h3 id="远程仓库SSH配置"><a href="#远程仓库SSH配置" class="headerlink" title="远程仓库SSH配置"></a>远程仓库SSH配置</h3><h4 id="1-远程仓库有两种访问方式，分别是HTTPS与SSH"><a href="#1-远程仓库有两种访问方式，分别是HTTPS与SSH" class="headerlink" title="1,远程仓库有两种访问方式，分别是HTTPS与SSH"></a>1,远程仓库有两种访问方式，分别是<code>HTTPS</code>与<code>SSH</code></h4><p>HTTPS：<code>零配置</code>；但是每次访问仓库时，需要重复输入 Github 的账号和密码才能访问成功</p><p>SSH：<code>需要进行额外的配置</code>；但是配置成功后，每次访问仓库时，不需重复输入 Github 的账号和密码</p><p>实际开发推荐使用SSH方式访问远程仓库</p><h4 id="2-SSH-介绍"><a href="#2-SSH-介绍" class="headerlink" title="2.SSH 介绍"></a>2.SSH 介绍</h4><p>SSH key 的作用：实现本地仓库和 Github 之间免登录的加密数据传输。</p><p>SSH key 的好处：免登录身份认证、数据加密传输。</p><p>SSH key 由两部分组成，分别是：</p><ul><li>id_rsa（私钥文件，存放于客户端的电脑中即可）</li><li>id_rsa.pub（公钥文件，需要配置到 Github 中）</li></ul><h4 id="3-SSH配置流程"><a href="#3-SSH配置流程" class="headerlink" title="3.SSH配置流程"></a>3.SSH配置流程</h4><p>(1)打开 Git Bash</p><p>(2)输入命令： ssh-keygen -t rsa -b 4096 -C “你的码云邮箱”</p><p>(3)连续敲击 3 次回车，即可在 C:\Users\用户名文件夹.ssh 目录中生成 id_rsa 和 id_rsa.pub 两个文件</p><p>(4)使用记事本打开 id_rsa.pub 文件，复制里面的文本内容</p><p>(5)在你的远程仓库网址, <code>点击头像 -&gt; 设置 -&gt; SSH 公钥 -&gt; 粘贴</code></p><h3 id="远程仓库使用流程总结"><a href="#远程仓库使用流程总结" class="headerlink" title="远程仓库使用流程总结"></a>远程仓库使用流程总结</h3><p>1.新建远程仓库<br>2.git clone 远程仓库<br>3.在本地电脑编码 git add .   git commit -m””<br>4.git pull<br>5.git push</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p><strong>git branch 分支名</strong>    新建分支名     分支名不需要加引号<br><strong>git checkout 分支名</strong>   切换分支名<br><strong>git merge</strong> 分支名      合并分支</p><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><p>1.创建分支 git branch 分支名<br>2.切换分支  git  checkout  分支名<br>3.查看当前分支 git  branch<br>4.切换到你创建分支之后，你就可以开始写你的代码，照样通过以前的方式进行  文件放入暂存区&#x3D;&gt;文件提交给本地仓库&#x3D;&gt;文件上传至远程仓库<br>示例：git add . &#x3D;&gt; git commit -m”文件信息” &#x3D;&gt;git push  通过反复操作，完善分支文件功能<br>5.当文件反复进行上传，直到你完成这个分支的所有功能,此时你就能进行主支与分支合并<br>6.先通过git checkout  主支(master)，切换到主支上，通过git merge 分支名<br>将分支新写的功能合并到主支<br>7.然后通过git add .放入本地暂存区，通过git commit -m”文件信息” ，将文件提交给本地仓库，最后git push提交给远程仓库，就ok了</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/star/2023/072037406.html"/>
      <url>/star/2023/072037406.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax概念"><a href="#Ajax概念" class="headerlink" title="Ajax概念"></a>Ajax概念</h1><p><code>该文章总结了ajax知识+axios请求的发送+Promise+事件循环+文件上传等知识</code></p><span id="more"></span><h2 id="1-前后端交互流程"><a href="#1-前后端交互流程" class="headerlink" title="1. 前后端交互流程"></a>1. 前后端交互流程</h2><p>浏览器发送请求<br>服务器处理请求<br>服务器响应数据</p><h2 id="2-ajax"><a href="#2-ajax" class="headerlink" title="2. ajax"></a>2. <code>ajax</code></h2><p>是什么？在页面不刷新的情况下，向服务器请求数据<br>作用：页面的局部刷新</p><h2 id="3-接口文档三要素"><a href="#3-接口文档三要素" class="headerlink" title="3. 接口文档三要素"></a>3. 接口文档三要素</h2><p><code>url</code>：统一资源定位符<br><code>method</code>：请求方法<br>请求参数：浏览器发给服务器的额外参数</p><h2 id="4-浏览器访问服务器的4种方式"><a href="#4-浏览器访问服务器的4种方式" class="headerlink" title="4. 浏览器访问服务器的4种方式"></a>4. 浏览器访问服务器的4种方式</h2><p>直接在浏览器中输入网址<br>标签<code>href，src</code>属性<br><code>location.href = &#39;网址&#39;</code><br><code>ajax技术</code></p><h2 id="5-url组成部分"><a href="#5-url组成部分" class="headerlink" title="5.url组成部分"></a>5.<code>url</code>组成部分</h2><p>是什么？统一资源定位符<br>协议  域名  端口号  资源存放路径</p><h2 id="6-HTTP协议"><a href="#6-HTTP协议" class="headerlink" title="6. HTTP协议"></a>6. <code>HTTP协议</code></h2><p>是什么?网络传输协议<br>作用：约定浏览器数据格式<br>组成部分：请求报文和响应报文</p><h3 id="6-1请求报文"><a href="#6-1请求报文" class="headerlink" title="6.1请求报文"></a>6.1请求报文</h3><p>是什么？浏览器发送给服务器的数据的格式    请求行+请求头+请求体<br>请求行：请求方法+<code>URL</code><br>请求头：浏览器发送的数据格式，有json格式和文件格式<br>请求体：<code>send</code>中请求的参数</p><h3 id="6-2响应报文"><a href="#6-2响应报文" class="headerlink" title="6.2响应报文"></a>6.2响应报文</h3><p><strong>是什么？</strong>服务器响应浏览器数据的格式   响应行+响应头+响应体<br><strong>响应行</strong>：响应状态码，服务器<code>IP</code><br><strong>响应状态码</strong></p><pre class="language-none"><code class="language-none">2xx  请求成功 3xx  重定向(服务器主动修改浏览器地址)      302重定向4xx   前端出错 400参数错误  401未验证(用户未登录)  403没有权限(用户没有权限访问，例如vip功能)     404响应行错误413文件大小超出限制5xx   服务器出错(后端出错)502服务器维护</code></pre><p>响应头：服务器响应的数据格式<br>响应体：<code>response</code>   响应回来的数据</p><h2 id="7-get和post区别"><a href="#7-get和post区别" class="headerlink" title="7. get和post区别"></a>7. <code>get</code>和<code>post</code>区别</h2><p><strong>1.传参方式不同</strong><br>get：直接url后面拼接(请求行)，url发送过去了，那么参数就过去了<br>post：请求体中传输，会切片，数据流传输</p><p><strong>2.传参速度不同</strong><br>get速度快</p><p><strong>3.数据大小不同</strong><br>get有大小限制<br>post没有大小限制，想传多少传多少</p><p><strong>4.安全性不同</strong><br>get是一次性传输，数据容易被一次性拦截，安全性低<br>post由于切片，数据一点一点的传，安全性高</p><h1 id="Ajax代码流程"><a href="#Ajax代码流程" class="headerlink" title="Ajax代码流程"></a>Ajax代码流程</h1><h4 id="原生XMLHttpRequest工作流程"><a href="#原生XMLHttpRequest工作流程" class="headerlink" title="原生XMLHttpRequest工作流程"></a>原生<code>XMLHttpRequest</code>工作流程</h4><p>作用：发送ajax请求的   请求request  响应response</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>1.创建XML对象实例<br>2.设置请求<br>3.发送请求<br>4.注册回调函数</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//示例 </span><span class="token comment">//创建xhr实例</span> <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//设置请求</span> xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>‘请求方式’<span class="token punctuation">,</span><span class="token string">'url地址'</span><span class="token punctuation">)</span> <span class="token comment">//发送请求</span> xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//注册响应事件</span> xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></code></pre><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p><strong>1.<code>get</code>请求</strong><br><code>get</code>方法进行传参，例如： <code>xhr.open(&#39;请求方式&#39;,&#39;url地址？参数名=参数值&#39;)</code></p><p><strong>2.<code>post</code>请求</strong><br>post方法进行传参，需要把参数写在xhr.send()中<br>第一步：设置一个固定的请求头<br><code>xhr.setRequestHeader(...)</code><br>第二步：<code>xhr.send(&#39;参数名=参数值&amp;参数名=参数值&#39;)</code></p><h2 id="axios第三方库工作流程"><a href="#axios第三方库工作流程" class="headerlink" title="axios第三方库工作流程"></a>axios第三方库工作流程</h2><h4 id="1-基地址"><a href="#1-基地址" class="headerlink" title="1.基地址"></a>1.基地址</h4><p><code>axios.defaults.baseURL = &#39;基地值&#39;</code><br><code>简化url，axios会自动拼接</code></p><p><strong>注意</strong>：基地址只能设置一个</p><h4 id="2-ajax请求数据的5种方式"><a href="#2-ajax请求数据的5种方式" class="headerlink" title="2.ajax请求数据的5种方式"></a>2.<code>ajax</code>请求数据的5种方式</h4><pre class="language-none"><code class="language-none">增post  删delete  改：全局改put    局部改path  查get</code></pre><p><strong>三种传参方式</strong>：<br><code>请求行传参：axios.delete(&#39;路径&#39;, &#123; params:&#123; 参数名:参数值&#125;  &#125;  )</code><br><code>请求体传参：axios.delete(&#39;路径&#39;, &#123; data:&#123; 参数名:参数值&#125;  &#125;  )</code><br><code>路径参数：axios.delete(&#39;url路径/参数值&#39;)</code></p><p>主要是看接口文档</p><h4 id="发送axios方式1"><a href="#发送axios方式1" class="headerlink" title="发送axios方式1"></a>发送<code>axios</code>方式1</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'请求方法'</span><span class="token punctuation">,</span>        <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'请求路径'</span><span class="token punctuation">,</span>        <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">参数名</span><span class="token operator">:</span><span class="token function">‘参数值’</span> <span class="token punctuation">(</span><span class="token keyword">get</span>参数<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>             属性名：‘属性值’<span class="token punctuation">,</span>             <span class="token function">属性名：‘属性值’</span>       <span class="token punctuation">(</span>post参数<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        成功的回调 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token operator">=></span>失败的回调 error就是错误的信息<span class="token punctuation">)</span></code></pre><p><strong>注意：</strong><br><code>1.在axios中，res并不是服务器响应的数据，而是axios自己包的对象</code><br><code>2.res.data:真正的服务器响应的数据</code><br><code>3.then方法底层自动给你转JSON</code><br><code>4.方法是get，可以省略不写</code></p><h4 id="发送axios方式2"><a href="#发送axios方式2" class="headerlink" title="发送axios方式2"></a>发送<code>axios</code>方式2</h4><p>发送get请求</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'请求路径'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">get</span>参数<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>发送post请求</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'请求路径'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>post参数<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="文件上传FormData"><a href="#文件上传FormData" class="headerlink" title="文件上传FormData()"></a>文件上传<code>FormData()</code></h4><p><strong>步骤</strong>：</p><pre class="language-none"><code class="language-none">给file表单注册一个change事件1.获取文件数据：this.files[0]2.使用formdata处理文件const fd &#x3D; new FormData()fd.append(&#39;参数名‘，参数值)a.修改请求头为文件格式b.把file对象转化成二进制3.发送ajax请求，参数就是fd4.服务器响应图片地址，赋值给img标签src属性</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.upload'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://hmajax.itheima.net/api/uploadimg'</span><span class="token punctuation">,</span>fd<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.my-img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>url    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="文件预览步骤"><a href="#文件预览步骤" class="headerlink" title="文件预览步骤"></a>文件预览步骤</h4><p>文件预览: 给file表单注册一个change事件<br>1.获取文件数据    this.files[0]<br><code>2.内置对象把file转成url     URL.createObjectURL( file对象 )</code><br>3.把本地url赋值给img标签src属性</p><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p><strong>是什么？</strong>本质是一个构造函数，里面保存着某个未来才会结束的事件<br><strong>作用</strong>：解决回调地狱<br>如何解决？(方法1，现在基本不用这种方法，下面会说新的方法)<br><code>promise是通过链式调用来解决回调地狱</code><br><code>链式调用：在上一个then里面，返回下一个promise实例，就可以在后面继续.then</code></p><h3 id="promise的工作原理"><a href="#promise的工作原理" class="headerlink" title="promise的工作原理"></a>promise的工作原理</h3><p><strong>promise原理</strong>：<br>        (1)promise对象有三个状态.<br>            a. pending（进行中）<br>            b. fulfilled（已成功）<br>            c. rejected（已失败）<br>        (2)Promise对象的状态改变， 只有两种可能：<br>            a. resolve()：从pending变为fulfilled<br>            b. 执行 reject()：从pending变为rejected<br>        (3)promise在创建实例的时候,里面的代码会立即执行.<br>            promise自己是同步的,只有then方法才是异步的</p><h3 id="promise其他语法"><a href="#promise其他语法" class="headerlink" title="promise其他语法"></a>promise其他语法</h3><p><strong>静态方法<code>Promise.all([p1,p2,p3])</code></strong><br><code>Promise.all() </code>: 将多个promise合并成一个,等待所有promise全部执行完毕才会执行then</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span>       p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>   <span class="token comment">//返回的数组</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'完成'</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><strong>静态方法<code>Promise.race([p1,p2,p3])</code></strong><br><code>Promise.race()</code>: 将多个promise合并成一个,谁先成功，promise执行完毕就执行then，如果有一个失败，则会走catch</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> p4 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span>      p4<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'完成'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><code>.then().cath().finally()</code></p><h2 id="async异步函数"><a href="#async异步函数" class="headerlink" title="async异步函数"></a><code>async</code>异步函数</h2><h4 id="async-await"><a href="#async-await" class="headerlink" title="async  &#x2F;   await"></a><code>async</code>  &#x2F;   <code>await</code></h4><p><code>async</code>作用：修饰函数，让函数内部使用await<br>await  作用：取代then  并且拿到then的结果     他仅仅只是<strong>取代了</strong>promise中的then , 而<strong>未取代catch</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//语法</span><span class="token keyword">async</span> <span class="token keyword">function</span>  <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span>  res <span class="token operator">=</span> <span class="token keyword">await</span>  p<span class="token punctuation">&#125;</span><span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="await和promise互换"><a href="#await和promise互换" class="headerlink" title="await和promise互换"></a>await和promise互换</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span>  后面的代码下面的代码<span class="token keyword">new</span> <span class="token class-name">promise</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>后面的代码<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            下面的代码<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="axios底层原理"><a href="#axios底层原理" class="headerlink" title="axios底层原理"></a><code>axios</code>底层原理</h2><p>当我们掌握promise和<code>ajax</code>请求的发送，你就可以大概的写出<code>axios</code>的底层了</p><p><strong><code>axios</code>底层原理</strong> : promise + <code>XMLHttpRequest</code><br>    (1)<code>axios方法本质是返回一个Promise对象</code><br>    (2)<code>promise内部是原生XHR发送Ajax请求</code><br>    (3)请求成功用resolve返回给Promise对象结果给外面then</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//写一个类似于axios的get方法</span><span class="token keyword">const</span> lywaxios <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token comment">//拿到形参url</span>            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//调用1</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> lywaxios   <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://123.57.109.30:3999/api/categoryfirst'</span><span class="token punctuation">)</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token comment">//调用2</span>lywaxios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://123.57.109.30:3999/api/categoryfirst'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>你看看调用方式2是否与你使用的<code>axios</code>有点相似</strong></p><h2 id="try-catch"><a href="#try-catch" class="headerlink" title="try&#x2F;catch"></a>try&#x2F;catch</h2><p>Error()对象      内置对象，错误信息<br>throw关键字    抛出异常，可以让控制台变红。throw错误信息</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span>  <span class="token string">'错误信息'</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>  <span class="token comment">//无论成功或失败都会执行</span><span class="token punctuation">&#125;</span></code></pre><p>场景<br>结束forEach循环<br>捕捉await错误信息</p><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><h4 id="异步代码"><a href="#异步代码" class="headerlink" title="异步代码"></a>异步代码</h4><p><strong>微任务</strong>       promise的then     await下面的代码</p><p><strong>宏任务</strong>         script标签          事件处理            函数定时器      ajax</p><p>js是一门单线程的语言</p><p>所有的同步任务都在主线程上执行，行成一个执行栈。</p><p>除了主线程之外，还存在一个任务列队，只要异步任务有了运行结果，就在任务列队中植入一个时间标记。</p><p>主线程完成所有任务(执行栈清空），就会读取任务列队，先执行微任务队列在执行宏任务队列。</p><p>重复上面三步。</p><p> 只要主线程空了，就会读取任务列队，这就是js的运行机制，也被称为 event loop（事件循环）</p>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS-移动端第一篇</title>
      <link href="/star/2023/07205.html"/>
      <url>/star/2023/07205.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-移动端第一篇"><a href="#CSS-移动端第一篇" class="headerlink" title="CSS-移动端第一篇"></a>CSS-移动端第一篇</h1><p><code>CSS-移动端第一篇这篇笔记主要总结了2D+3D+flex布局+CSS移动端</code></p><span id="more"></span><h2 id="1-字体图标-平面转换-渐变"><a href="#1-字体图标-平面转换-渐变" class="headerlink" title="1.字体图标&#x2F;平面转换&#x2F;渐变"></a>1.字体图标&#x2F;平面转换&#x2F;渐变</h2><h3 id="1-1-字体图标"><a href="#1-1-字体图标" class="headerlink" title="1.1 字体图标"></a>1.1 字体图标</h3><p><strong>作用</strong>：取代了精灵图， 展示的是图标，本质是字体<br><strong>线下用法</strong>：<br>1.利用类名使用(重要)<br>2.利用伪元素使用<br>3.利用unicode使用</p><p><strong>线上用法</strong>：线上的引入方式记得添加http:</p><h3 id="1-2-平面转换"><a href="#1-2-平面转换" class="headerlink" title="1.2 平面转换"></a>1.2 平面转换</h3><h4 id="transform属性"><a href="#transform属性" class="headerlink" title="transform属性"></a>transform属性</h4><p><strong>1.2.1 位移</strong><br>语法：<code>transform:translate(水平移动,垂直移动)</code><br><strong>位移在移动时不占位置，不脱标</strong><br>取值：px 或者 百分比(参照物是以自身的大小)<br>盒子垂直水平居中</p><pre class="language-none"><code class="language-none">方法1：子绝父相+margin:left&#x2F;top;  固定宽高的盒子居中方法2：子绝父相+transfrom方法3：子绝父相(子盒子上下左右都赋值为0)+margin:auto;</code></pre><p><strong>1.2.2 旋转</strong><br>语法：<code>transform:rotate(角度)  </code><br>角度单位：<code>deg 度</code>,<code>turn 圈</code><br><strong>正值是顺时针，负值是逆时针</strong></p><p><strong>1.2.3 转换原点</strong><br>语法：<code>transform-origin:原点水平位置，原点垂直位置;</code><br>取值：<code>数值px</code>，方位名词，百分比</p><p><strong>1.2.4 缩放</strong><br><strong>语法</strong>：<code>transform:scale(x轴缩放倍数,y轴缩放倍数)</code><br>一般情况，只为scale设置一个值，表示x，y轴等比缩放<br><strong>语法</strong>：transform:scale(2)<br>倍数1以上和倍数-1以上的值是放大，倍数1以下和倍数-1以下的值是缩小，不管正负号，只比较值<br>倍数1和倍数-1效果一致，盒子不变<br>图片加了缩放，层级会比定位默认的层级大</p><p><strong>1.2.5 倾斜</strong><br><code>transform:skew(50deg)</code><br>注意：</p><pre class="language-none"><code class="language-none">1.正值向右倾斜，负值向左倾斜2.倾斜会把盒子撑大3.倾斜的盒子不要为直角transform复合写法：transform：translate()  rotate() scale() skew();</code></pre><h3 id="1-3-渐变"><a href="#1-3-渐变" class="headerlink" title="1.3 渐变"></a>1.3 渐变</h3><p><strong>线性渐变色</strong>，默认从上往下，开始渐变<br><strong>语法</strong>：</p><pre class="language-none"><code class="language-none">background-image:linear-gradient(颜色1,颜色2);background-image:linear-gradient(to bottom,颜色1,颜色2);background-image:linear-gradient(60deg,颜色1,颜色2);常用写法：background-image:linear-gradient(transparent,rgba(0,0,0,.5));</code></pre><p><strong>径向渐变</strong><br><code>background-image:radial-gradient(颜色1,颜色2);</code></p><pre class="language-none"><code class="language-none">形状1：正方形-&gt;圆形形状2：长方形-&gt;椭圆只能从内往外</code></pre><h2 id="2-空间转换-动画"><a href="#2-空间转换-动画" class="headerlink" title="2. 空间转换&#x2F;动画"></a>2. 空间转换&#x2F;动画</h2><p><strong>空间转换(了解</strong>)<br><code>位移</code></p><pre class="language-none"><code class="language-none">transform:translate3d(x,y,z)z轴在默认状态下无法擦看解决办法perspective属性实现透视效果透视的内容要居中，如果不放在盒子中间，会导致内容发生倾斜加给父级perspective：值；   数值一般在800-1200像素透视不会使盒子变大</code></pre><p><code>旋转</code></p><pre class="language-none"><code class="language-none">transform:rotate3d(x,y,z,角度度数)取值0-1之间的数字x轴上下转，正值从下往上转，负值从下往上y轴左右转，正值从左往右，负值从右往左z轴，正轴顺时针，负值逆时针开启3dtransform-style:preserve-3d;推荐给父元素加</code></pre><p><code>缩放</code><br><code>transform:scale3d(倍数)</code></p><p><strong>动画</strong><br>​补间动画</p><p><strong>步骤</strong></p><pre class="language-css" data-language="css"><code class="language-css">1.定义动画<span class="token atrule"><span class="token rule">@keyframes</span> 动画名称</span>  <span class="token punctuation">&#123;</span>    <span class="token selector">from</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token selector">to</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> 动画名称</span>  <span class="token punctuation">&#123;</span>    <span class="token selector">0%</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token selector">10%</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token selector">30%</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token selector">100%</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">2.使用动画animation:动画名称，动画花费时长animation: 动画名称   持续时间  动画曲线   何时开始   动画重复次数  是否逆向播放 规定动画结束后状态逐帧动画steps(帧数)配合精灵图使用</code></pre><h2 id="3-移动端布局"><a href="#3-移动端布局" class="headerlink" title="3. 移动端布局"></a>3. 移动端布局</h2><h3 id="3-1-移动端需了解的知识"><a href="#3-1-移动端需了解的知识" class="headerlink" title="3.1 移动端需了解的知识"></a>3.1 移动端需了解的知识</h3><p>1.分辨率</p><pre class="language-none"><code class="language-none">物理分辨率是生产屏幕时就固定的，它是不可被改变的逻辑分辨率是由软件（驱动）决定</code></pre><p>2.二倍图<br>3.视口</p><pre class="language-none"><code class="language-none">布局视口     980px   手机自带视觉视口     手机设备的大小理想视口     设备有多宽，网页显示多宽       布局视口+视觉视口保持一致</code></pre><pre class="language-none"><code class="language-none">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;移动端视口适配标签    viewport   视口宽度&#x3D;设备宽度  width&#x3D;device-width缩放倍数默认一倍  initial-scale&#x3D;1.0最大缩放倍数为一倍  maximum-scale&#x3D;1.00和no表示不允许用户缩放，yes表示允许用户缩放  user-scalable&#x3D;0百分比布局:宽度使用百分比，高度固定</code></pre><h3 id="3-2-flex布局"><a href="#3-2-flex布局" class="headerlink" title="3.2 flex布局"></a>3.2 <code>flex布局</code></h3><p>1.作用<br>​避免浮动布局中脱离文档流现象发生<br>​Flex布局非常适合结构化布局<br>2.<code>不脱标</code><br>3.弹性容器    <code>加入了display:flex;的盒子</code><br>​<code>弹性盒子是弹性容器的子元素</code><br>4.设置方式<br>​<code>给父元素添加  display：flex</code><br>5.弹性盒子不会区分你是否是块级&#x2F;行内&#x2F;行内块元素</p><p><strong>flex排列方式</strong></p><p><strong>1.主轴排列方式</strong><br><code>justify-content属性</code></p><pre class="language-none"><code class="language-none">加在父元素上flex-end         终点开始依次排列center           水平居中space-around     外边距1:2排列盒子，自适应space-between    两边靠边，中间自适应space-evenly     外边距1:1排列 自适应</code></pre><p><strong>2.单行侧轴排列方式</strong><br><code>align-items属性</code></p><pre class="language-none"><code class="language-none">加在父元素上center             沿侧轴居中排列默认值  stretch     子元素未设高时，子元素高度默认和父元素一致flex-end           侧轴终点开始排列flex-start         默认值   侧轴起点排列</code></pre><p><code>align-self</code></p><pre class="language-none"><code class="language-none">加在子元素上center                沿侧轴居中排列默认值  stretch        子元素未设高时，子元素高度默认和父元素一致flex-end              侧轴终点开始排列flex-start  默认值     侧轴起点排列</code></pre><p><strong>3.伸缩比</strong><br>属性：flex:值；<br>取值：数值(整数)<br>在子元素没设置宽的情况下，这个属性是用来替换宽度的<br><strong>注意</strong></p><pre class="language-none"><code class="language-none">1.只占用父盒子剩余尺寸2.给子盒子添加3.比例会优先于宽度生效</code></pre><p><strong>应用场景</strong></p><pre class="language-none"><code class="language-none">圣杯布局左右两边的大小固定不变，中间宽度自适应给一个宽度最小值</code></pre><p><strong>4.修改主轴方向</strong><br><code>flex-direction属性</code><br><code>row</code>：行, 水平(默认值)<br><code>column</code>：列, 垂直<br><code>row-reverse</code>：行, 从右向左<br><code>column-reverse</code>：列, 从下向上<br><strong>5.弹性盒子换行</strong><br><code>flex-wrap：wrap；</code><br>弹性盒子默认是不换行的<br>换行的前提就是给子盒子设置固定的宽度</p><p><strong>6.多行侧轴排列方式</strong><br><code>align-content</code>:<br><code>center</code>                             垂直居中<br><code>space-around</code>                垂直方向外边距1:2排列盒子，自适应<br><code>space-between</code>              垂直方向两边靠边，中间自适应<br><code>space-evenly </code>                垂直方向外边距1:1排列 自适应</p><h2 id="4-注意点"><a href="#4-注意点" class="headerlink" title="4. 注意点"></a>4. 注意点</h2><p><strong>1.<code>display</code>无法触发过渡</strong></p><p>使用<code>display:none(block)</code>对<code>div</code>的隐藏与显示应用于过渡属性上，但是<code>transition</code>完全失效，没有过渡效果。<br><code>div</code>元素使用<code>display:none(block)</code>实现隐藏与显示的时候，会与<code>transition</code>属性冲突，导致过渡效果无效。<code>display会破坏transition</code>。</p><p>原因:<br><code>display:none</code>的时候，页面文档流中将不会存在该元素，<code>display:block</code>的时候，文档流中才存在该元素。<code>transition</code>属性无法对一个从无到有的元素进行过渡显示。</p><p>解决方案<br>使用<code>visibility</code>替代<code>display</code>，或者<code>opacity</code>也可以</p><p><strong>2.子级为伪元素，必须通过亲父亲进行查找</strong></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">*</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.bigbox</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 390px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box img</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> all 1s<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box:hover img</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box a::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>transparent<span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>.5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 99<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box a:hover::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bigbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../images/huawei.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../images/huawei.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../images/huawei.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>3. 涉及陌生单词</strong></p><p><code>evenly</code>   均匀的</p><p><code>space </code>     空间</p><p><code>justify</code>  使每行排齐</p><p><strong>4. <code>flex</code>圣杯布局常用</strong></p><p><code>min-width</code>  最小值  <code>min-with:100px</code>  最小值不会小于100</p><p><code>max-width</code>   最大值     <code>min-with:500px</code>  最大值不会大于500</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS-移动端第二篇</title>
      <link href="/star/2023/07206.html"/>
      <url>/star/2023/07206.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-移动端第二篇"><a href="#CSS-移动端第二篇" class="headerlink" title="CSS-移动端第二篇"></a>CSS-移动端第二篇</h1><p><code>本篇文章主要总结了移动端适配+less预处理+BootStrap框架</code></p><span id="more"></span><h2 id="1-移动适配"><a href="#1-移动适配" class="headerlink" title="1. 移动适配"></a>1. 移动适配</h2><p><code>rem</code>   相对单位<br>默认  <code>1rem = 16px</code>，<strong>只跟html的字体大小有关</strong></p><h3 id="如何计算"><a href="#如何计算" class="headerlink" title="如何计算"></a>如何计算</h3><p>1.<code>确定设计稿对应的设备的html标签的字体大小</code><br>2.<code>rem = 你测量的值 / 基准字号(ui的设计稿来决定)</code><br>3.<code>rem推荐我们把屏幕分成10份，1html=当前屏幕的10分之一</code></p><h2 id="2-less预处理"><a href="#2-less预处理" class="headerlink" title="2. less预处理"></a>2. less预处理</h2><p>1.css预处理器，less文件后缀.less<br>2.注释： &#x2F;&#x2F;       &#x2F;**&#x2F;<br>3.运算 + - * &#x2F;</p><p><strong>注意</strong>：&#x2F; 除法记得加小括号，因为编译会把它当路径来看<br>如果运算的值的单位各不相同，以第一个为准</p><h3 id="less生成后代选择器"><a href="#less生成后代选择器" class="headerlink" title="less生成后代选择器"></a>less生成后代选择器</h3><pre class="language-less" data-language="less"><code class="language-less"><span class="token selector">父选择器</span> <span class="token punctuation">&#123;</span>    <span class="token selector">子选择器</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="less中的伪类和伪元素"><a href="#less中的伪类和伪元素" class="headerlink" title="less中的伪类和伪元素"></a>less中的伪类和伪元素</h3><pre class="language-less" data-language="less"><code class="language-less"><span class="token selector">&amp;：hover</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token selector">.box a:hover</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>    <span class="token selector">a</span> <span class="token punctuation">&#123;</span>        <span class="token selector">&amp;:hover</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="less变量定义"><a href="#less变量定义" class="headerlink" title="less变量定义"></a>less变量定义</h3><p><strong>语法</strong><br>    1.定义变量    @变量名:变量值;<br>    2.使用变量:变量名;<br><strong>导入其他less文件</strong><br>方法1： <code>@import ‘less文件路径’;</code><br>方法1： <code>@import url(less文件路径);</code><br><strong>导出css文件</strong><br>方法1   写在第一行   <code> // out:../css/</code><br>方法2     配置插件： 设置 → <code>搜索EasyLess</code> → <code>在setting.json</code>中编辑 → 添加代码（注意，必须是双引号）<br><strong>禁止导出</strong><br><code>语法：//  out:false;</code><br><code>不会生成css文件</code></p><h3 id="vw-vh-相对单位"><a href="#vw-vh-相对单位" class="headerlink" title="vw&#x2F;vh    相对单位"></a>vw&#x2F;vh    相对单位</h3><p>相对视口的尺寸自动计算结果<br><code>1vw = 1/100视口宽度</code><br><code>1vh= 1/100视口高度</code><br>实际开发中，只会使用其中一个<br>vmin   横屏和竖屏谁小就用谁<br>让屏幕在竖屏和横屏内容的大小保持一致<br>vmax   横屏和竖屏谁大就用谁</p><p><strong>em</strong><br>默认，1em&#x3D;16px<br>与他的父元素或本身元素的字体大小有关，优先级：本身&gt;父元素</p><h2 id="3-媒体查询"><a href="#3-媒体查询" class="headerlink" title="3. 媒体查询"></a>3. 媒体查询</h2><p><strong>作用</strong>：能够检测视口宽度<br><strong>语法</strong>：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span>媒体查询特性<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">css选择器</span> <span class="token punctuation">&#123;</span>        font-size：20px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">width</span><span class="token punctuation">:</span>375px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">css选择器</span> <span class="token punctuation">&#123;</span>        font-size：20px<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>​<strong>max-width</strong>   表示对应值在区间以下   从大到小去写<br>​<strong>min-width</strong>    表示对应值在区间以上    从小到大去写</p><h2 id="4-BootStrap"><a href="#4-BootStrap" class="headerlink" title="4. BootStrap"></a>4. <code>BootStrap</code></h2><h3 id="快速开发响应式网页"><a href="#快速开发响应式网页" class="headerlink" title="快速开发响应式网页"></a>快速开发响应式网页</h3><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><p>​1.引入bootstrap.css<br>​2.调用固定类名</p><h4 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h4><p><strong>container</strong>：内容固定在中心，<code>会自带15px的padding值</code><br><strong>container-fluid</strong>：<code>通栏00%</code>，<code>会自带15px的padding值</code><br><strong>row    行</strong>：内补父元素内边距    通过设置左右的负外边距清除父元素内边距<br><strong>col    列     每行12列，多的列会换行</strong></p><pre class="language-none"><code class="language-none">大屏  &gt;1200      col-lg-份数中屏  &gt;992        col-md-份数小屏  &gt;&#x3D;768      col-sm-份数超小屏  &lt;&#x3D;768  col- xs-份数</code></pre><p><strong>列偏移</strong></p><pre class="language-none"><code class="language-none">只能向右偏移offset语法：col-lg-offset-份数会自带15px的padding值</code></pre><p><strong>嵌套列</strong></p><pre class="language-none"><code class="language-none">在col中再去嵌套row显示与隐藏visible-屏幕hidde-屏幕lg   md  sm  xs</code></pre><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p><strong>1.过渡加在默认状态，就会有去有回，过渡在hover状态添加，就只有去的效果</strong></p><p><strong>2.<code>display无法触发过渡</code></strong></p><p>使用<code>display:none(block)对div的隐藏与显示应用于过渡属性上</code>，但是<code>transition</code>完全失效，没有过渡效果。<br><code>div元素使用display:none(block)实现隐藏与显示的时候，会与transition属性冲突，导致过渡效果无效。display会破坏transition。</code></p><p>原因<br><code>display:none的时候，页面文档流中将不会存在该元素，display:block的时候，文档流中才存在该元素。transition属性无法对一个从无到有的元素进行过渡显示。</code></p><p>解决方案<br><code>使用visibility替代display，或者opacity也可以</code></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS-web端</title>
      <link href="/star/2023/07202.html"/>
      <url>/star/2023/07202.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-web端"><a href="#CSS-web端" class="headerlink" title="CSS-web端"></a>CSS-web端</h1><p><code>CSS-web端这篇笔记是关于web端能够使用到的css样式语法</code></p><span id="more"></span><h2 id="一-CSS基础认知"><a href="#一-CSS基础认知" class="headerlink" title="一.CSS基础认知"></a>一.CSS基础认知</h2><p><strong>是什么？</strong>：层叠样式表<br><strong>作用</strong>：专门给html设置样式<br><strong>语法规则</strong>：<br>1.选择器  {color:red;}<br>2.css符号都是英文<br>3.键值对写完以后需要加分号<br><strong>css引入方式</strong>：<br>内嵌式：将css代码写在html文件中<br>                <code>一般写在title标签下面，&lt;style&gt;&lt;/style&gt;</code></p><p>外联式：写在单独的css文件中<br>                通过link标签在html文件中引入</p><p>行内式：<code>写在目标标签的开始标签中，style=&#39;color:red;&#39;</code></p><h2 id="二-选择器"><a href="#二-选择器" class="headerlink" title="二.选择器"></a>二.选择器</h2><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><h4 id="1-标签选择器"><a href="#1-标签选择器" class="headerlink" title="1.标签选择器"></a>1.标签选择器</h4><p><strong>标签名 {css属性}</strong><br>特点：<strong>找到页面中所有的这个标签</strong></p><h4 id="2-类选择器"><a href="#2-类选择器" class="headerlink" title="2.类选择器"></a>2.类选择器</h4><p><strong>.类名 {css属性}</strong>           class的属性值成为类名<br>特点：<br>        1.仅仅只找该类名的标签<br>        2.不能以数字，中划线开头<br>        3.类名可以有数字，字母，下划线，中划线<br>        4.标签中可以有多个类名</p><h4 id="3-id选择器"><a href="#3-id选择器" class="headerlink" title="3.id选择器"></a>3.id选择器</h4><p><strong>#id属性值 {css属性}</strong><br>特点：<strong>一个id选择器只能选择到一个标签</strong></p><h4 id="4-通配符选择器"><a href="#4-通配符选择器" class="headerlink" title="4.通配符选择器"></a>4.通配符选择器</h4><p><code>* &#123;css属性&#125;</code><br>特点：<strong>找到页面上所有标签，设置样式</strong></p><h3 id="选择器的进阶"><a href="#选择器的进阶" class="headerlink" title="选择器的进阶"></a>选择器的进阶</h3><p><strong>复合选择器</strong><br><code>1.后代选择器</code>：选择器1 选择器2 { css属性 }<br><strong>作用</strong>：寻找所有的后代，包括孙子<br><code>2.子代选择器</code>：选择器1&gt;选择器2{css属性}<br><strong>作用</strong>：仅仅只寻找子代，不会找到孙子<br><code>3.并集选择器</code>：选择器1，选择器2 {css属性}  中间逗号分隔<br><strong>作用</strong>：选中选择器1和选择器2选中的标签，设置样式<br><code>4.交集选择器</code>：选择器1选择器2 {css选择器}<br><strong>作用</strong>：找到页面一个标签内同时拥有选择器1和选择器2的标签，<br><code>&lt;p class=&#39;red&#39;&gt;小哥哥&lt;/p&gt;</code>       p.red {css属性}<br><strong>注意</strong>：交集选择器中如果有标签选择器，标签选择器必须写在最前面<br><code>5. hover伪类选择器</code>：选择器:hover{css属性}<br>在鼠标悬停在元素上时触发<br><code>6.emmet语法</code> ：内部文本    ul&gt;li{我是li的内容}，能够快速生成结构，需要的自己查一下文档。</p><h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><p>1.<code>父盒子 子盒子:first-child &#123;&#125;</code><br>2.<code>父盒子 子盒子:last-child &#123;&#125;</code><br>3.<code>父盒子 子盒子:nth-child(n) &#123;&#125;</code></p><pre class="language-none"><code class="language-none">偶数  2n  even奇数 2n-1 odd前5个  -n+5后五个 n+5</code></pre><p>4.<code>父盒子 子盒子:nth-last-child(n) &#123;&#125;</code><br>5.<code>父盒子 子盒子:nth-of-type(n) &#123;&#125;</code><br><strong>区别：</strong><br>:nth-child → 直接在所有孩子中数个数<br>:nth-of-type → 先通过该 类型 找到符合的一堆子元素，然后在这一堆子元素中数个数</p><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>伪元素：通过css模拟出来的html标签<br>::before   ::after<br><strong>注意：</strong><br>1.必须设置content属性才能生效<br>2.伪元素默认是行内元素<br>3.只有双标签才可以使用伪元素</p><h2 id="三-字体和文本样式"><a href="#三-字体和文本样式" class="headerlink" title="三.字体和文本样式"></a>三.字体和文本样式</h2><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><pre class="language-none"><code class="language-none">font-size        字体大小font-weight      文本粗细    400为正常font-family      文本字体font-style       文本风格    normal  正常    italic  斜体font连写方式    font:文本风格   文本粗细   字体大小&#x2F;行高   字体注意：1.必须保留font-size和font-family属性，否则font属性不起作用    2.要把单独的样式写在连写的下面，不然会被覆盖</code></pre><h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><pre class="language-none"><code class="language-none">color  文字颜色text-align  文本水平居中 只能给大盒子使用text-decoration 下划线样式         1.none  默认，用于a标签的取消下划线2.underline  下划线text-indent属性  首行缩进      单位emline-height  行高</code></pre><h2 id="四-背景属性"><a href="#四-背景属性" class="headerlink" title="四.背景属性"></a>四.背景属性</h2><pre class="language-none"><code class="language-none">背景颜色  background-color背景图片  background-img:url()盒子比图片大，会出现平铺的效果背景平铺  background-repeat1.no-repeat  不平铺2.repeat-x  水平方向平铺3.repeat-y  垂直方向平铺背景位置   background-position:水平方向  垂直方向向右走为正值向下走为正值背景属性的复合写法：background:color url() no-repeat position</code></pre><h2 id="五-元素的显示模式"><a href="#五-元素的显示模式" class="headerlink" title="五.元素的显示模式"></a>五.元素的显示模式</h2><h3 id="1-块级元素"><a href="#1-块级元素" class="headerlink" title="1.块级元素"></a>1.块级元素</h3><p><strong>特点：</strong><br>1.独占一行<br>2.如果不设置宽高，那么他的宽度由父元素决定，高度由内容撑开<br>3.可以设置宽高<br><strong>如何转换？</strong>转换块级元素   display:block;<br><strong>哪些是块级元素：</strong>div,p h系列，列表， 表格，form…</p><h3 id="2-行内元素"><a href="#2-行内元素" class="headerlink" title="2.行内元素"></a>2.行内元素</h3><p><strong>特点：</strong><br>1.不独占一行,可放多个<br>2.不能设置宽高<br>3.宽高由内容决定<br><strong>如何转换？</strong>转换为行内块元素  display:inline;<br><strong>哪些是行内元素</strong>：a,span,b,i,u…..</p><h3 id="3-行内块元素"><a href="#3-行内块元素" class="headerlink" title="3.行内块元素"></a>3.行内块元素</h3><p><strong>特点：</strong><br>1.一行显示多个<br>2.可以设置宽高<br><strong>如何转换？</strong>转换为行内块元素  display：inline-block<br><strong>哪些是行内块元素</strong>img，input等所有表单元素</p><h2 id="六-CSS特性"><a href="#六-CSS特性" class="headerlink" title="六.CSS特性"></a>六.CSS特性</h2><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>1.字体系列，文本系列控制的属性都能继承<br>2.width，height不能被继承<br>3.a标签无法继承color<br>4.h系列标签无法继承font-size</p><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>1.给同一个标签设置不同的样式 → 此时样式会层叠叠加 → 会共同作用在标签上</p><p>2.给同一个标签设置相同的样式 → 此时样式会层叠覆盖 → 最终写在最后的样式会生效<br>    注意：当样式冲突时，只有当选择器优先级相同时，才能通过层叠性判断结果</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>1.当同一个元素指定多个选择器，就会有优先级<br>2.！important&gt;行类样式&gt;id选择器&gt;类选择器，伪类选择器&gt;基础选择器&gt;通配符&gt;继承<br>3.!important放在声明后面，声明会变成最大优先级<br>4.选择器 {属性名:属性值 !important;}</p><h2 id="七-盒子模型"><a href="#七-盒子模型" class="headerlink" title="七.盒子模型"></a>七.盒子模型</h2><p><strong>组成：内容+内边距+边框+外边距</strong><br><strong>内边距 padding</strong><br>            1.padding一般都会撑大盒子<br>            2.不会撑大的情况<br>                1.不给子元素设置宽，默认是父盒子的宽<br>                2.给子元素设置padding和border都不会撑大盒子<br><strong>边框 border</strong><br><strong>外边距 margin</strong><br><strong>自动内减 box-sizing: border-box;</strong> 怪异盒子</p><h4 id="1-外边距折叠现象"><a href="#1-外边距折叠现象" class="headerlink" title="1.外边距折叠现象"></a>1.外边距折叠现象</h4><p><strong>① 合并现象</strong><br>1.场景：垂直布局 的 块级元素，上下的margin会合并<br>2.结果：最终两者距离为margin的最大值<br>3.解决方法：只给其中一个盒子设置margin即可<br><strong>② 塌陷现象</strong><br>1.场景：互相嵌套 的 块级元素，子元素的 margin-top 会作用在父元素上<br>2.结果：导致父元素一起往下移动<br>3.解决办法：<br>3.1：给父元素设置border-top 或者 padding-top（分隔父子元素的margin-top）<br>3.2：给父元素设置overflow：hidden<br>3.3：给父元素转换成行内块元素<br>3.4：给父元素设置浮动</p><h4 id="2-行内元素的margin和padding无效情况"><a href="#2-行内元素的margin和padding无效情况" class="headerlink" title="2.行内元素的margin和padding无效情况"></a>2.行内元素的margin和padding无效情况</h4><p>1.场景：给行内元素设置margin和padding时<br>2.结果：<br>2.1：水平方向的margin和padding布局中有效！<br>2.2：垂直方向的margin和padding布局中无效！</p><h2 id="八-标准流"><a href="#八-标准流" class="headerlink" title="八.标准流"></a>八.标准流</h2><p>1.块级元素：从上往下，垂直布局，独占一行</p><p>2.行内元素 或 行内块元素：从左往右，水平布局，空间不够自动折行</p><h2 id="九浮动"><a href="#九浮动" class="headerlink" title="九浮动"></a>九浮动</h2><p><strong>浮动的作用：</strong>1.图文环绕 ，2.网页布局<br><strong>语法：</strong>float:left&#x2F;right;<br><strong>特点：</strong><br>1.浮动元素会脱标，在标准流中不占位置<br>2.浮动元素比标准流高出半个级别，可以覆盖标准流中的元素<br>3.浮动找浮动，下一个浮动元素会在上一个浮动元素后面左右浮动<br>4.浮动元素有特殊的显示效果：① 一行可以显示多个 ② 可以设置宽高</p><p><strong>注意:浮动的元素不能通过text-align:center或者margin:0 auto</strong></p><h3 id="如何清除浮动？"><a href="#如何清除浮动？" class="headerlink" title="如何清除浮动？"></a>如何清除浮动？</h3><p><strong>1.单伪元素清除浮动</strong></p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix::after</span> <span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>2.双伪元素清除法</strong></p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix::before,.clearfix::after</span> <span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">.clearfix::after</span> <span class="token punctuation">&#123;</span>     <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre><p><strong>3.给父盒子设置一个高</strong><br><strong>4.给父元素设置overflow:hidden;</strong><br><strong>5.额外标签法</strong><br>5.1：在父元素内容的最后添加一个块级元素<br>5.2：给添加的块级元素设置 clear:both</p><h2 id="十-定位"><a href="#十-定位" class="headerlink" title="十.定位"></a>十.定位</h2><p>定位场景：1.盒子层叠，2.固定盒子位置</p><h3 id="第一步：设置position"><a href="#第一步：设置position" class="headerlink" title="第一步：设置position"></a>第一步：设置position</h3><p><strong>relative  相对定位</strong>：相对于自己之前的位置移动<br>特点：1.占位置，未脱标。2.配合边偏移使用。3.子绝父相</p><p><strong>absolute  绝对定位</strong>：默认浏览器可视区进行移动<br>如果其祖先元素有定位的属性，就相对于最近的祖先定位元素来移动，祖先定位可以是（绝对，相对，固定）<br>特点：1.不占位置，脱标。2.配合边偏移使用。3.子绝父相<br><strong>水平垂直居中</strong>：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">left</span><span class="token punctuation">:</span>50% <span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>fixed 固定定位</strong>：相对于浏览器可视区进行移动<br>特点：1.不占位置，脱标。2.配合边偏移使用。3.让盒子固定在屏幕中的某个位置</p><p><strong>z-index</strong>：z-index：1；数值越大，越在上面。要结合定位使用，不能单独使用</p><h3 id="第二步：设置边偏移"><a href="#第二步：设置边偏移" class="headerlink" title="第二步：设置边偏移"></a>第二步：设置边偏移</h3><p>left  right  top  bottom</p><h2 id="十一-装饰"><a href="#十一-装饰" class="headerlink" title="十一.装饰"></a>十一.装饰</h2><h3 id="1-垂直对齐方式"><a href="#1-垂直对齐方式" class="headerlink" title="1.垂直对齐方式"></a>1.垂直对齐方式</h3><p><strong>语法：vertical-align:top&#x2F;middle&#x2F;bottom</strong><br><strong>只能设置给行内&#x2F;行内块元素，设置给图片</strong><br><strong>注意：</strong><br>1.行内&#x2F;行内块的元素都有基线对齐的问题<br>2.不推荐使用行内块让div一行显示，因为可能出现基线对齐的问题<br><strong>解决：</strong>方法1:使用vertical-align<br>           方法2：将行内&#x2F;行内块元素转换为块级元素</p><h3 id="2-cursor-鼠标光标"><a href="#2-cursor-鼠标光标" class="headerlink" title="2.cursor  鼠标光标"></a>2.cursor  鼠标光标</h3><p>这个自己查文档去</p><h3 id="3-圆角边框"><a href="#3-圆角边框" class="headerlink" title="3.圆角边框"></a>3.圆角边框</h3><p>1.border-radius:10px;  数值越大，就越圆<br>2.圆形   50%<br>3.胶囊按钮  设置盒子高度的一半</p><h3 id="4-overflow"><a href="#4-overflow" class="headerlink" title="4.overflow"></a>4.overflow</h3><p>处理溢出的部分</p><pre class="language-none"><code class="language-none">hidden  隐藏visible  默认值  溢出的部分显示scroll  将溢出的部分设置为滚动条，不管内容是否溢出，都会出现auto  根据内容多少来决定，如果内容溢出才触发滚动条</code></pre><h3 id="5-显示与隐藏"><a href="#5-显示与隐藏" class="headerlink" title="5.显示与隐藏"></a>5.显示与隐藏</h3><p><strong>display属性</strong></p><pre class="language-none"><code class="language-none">block 显示none   隐藏注意：隐藏以后不占位置</code></pre><p><strong>visibility属性</strong></p><pre class="language-none"><code class="language-none">hidden  隐藏visible 显示占位置</code></pre><p><strong>opacity元素透明度</strong></p><pre class="language-none"><code class="language-none">opacity：0.5；属性值在0-1之间注意：opacity会让元素整体透明，包括里面的内容</code></pre><p><strong>transparent  透明度</strong></p><h2 id="十二-链接伪类"><a href="#十二-链接伪类" class="headerlink" title="十二.链接伪类"></a>十二.链接伪类</h2><pre class="language-none"><code class="language-none">a:link a链接未访问过的状态a:visited  a链接访问以后的状态a:active  选中鼠标按下a:hover</code></pre><h2 id="十三-焦点伪类"><a href="#十三-焦点伪类" class="headerlink" title="十三.焦点伪类"></a>十三.焦点伪类</h2><p>input:focus</p><h2 id="十四-精灵图"><a href="#十四-精灵图" class="headerlink" title="十四.精灵图"></a>十四.精灵图</h2><p>1.设置背景图片<br>2.设置背景位置值，负值</p><h2 id="十五-过渡"><a href="#十五-过渡" class="headerlink" title="十五.过渡"></a>十五.过渡</h2><p>语法：transition:all  2s;<br><strong>注意：</strong><br>1.过渡需要：默认状态 和 hover状态样式不同，才能有过渡效果<br>2.transition属性给需要过渡的元素本身加<br>3.transition属性设置在不同状态中，效果不同的<br>① 给默认状态设置，鼠标移入移出都有过渡效果<br>② 给hover状态设置，鼠标移入有过渡效果，移出没有过渡效果</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
